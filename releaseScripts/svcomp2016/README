This archive contains an Ultimate tool.
Direct any questions to one of the maintainers and/or consult the websites. 

Websites:
https://github.com/ultimate-pa/ultimate
https://ultimate.informatik.uni-freiburg.de/

Maintainers:
dietsch@informatik.uni-freiburg.de
heizmann@informatik.uni-freiburg.de
nutz@informatik.uni-freiburg.de

This archive also contains a binary of the Z3 theorem prover.
https://github.com/Z3Prover

--------------------------------------------------------------------------------
1. Requirements
A working version of Python2.7 in your path. 

2. Usage
This Ultimate tool should be used in conjunction with the provided Python wrapper 
script Ultimate.py. This script is geared towards the interface provided by SV-COMP and 
maps the input given there to the arguments that are required by the actual binary of 
Ultimate. At the SV-COMP the input to a tool is 
 * a C program <inputfile>, 
 * a property file <prop.prp>,
 * an architecture which is either '32bit' or '64bit', and 
 * a memory model which is either 'simple' or 'precise'. 
Given these arguments, the script should be invoked by the following command.

	./Ultimate.py prop.prp inputfile 32bit|64bit simple|precise

The output of Ultimate Automizer is written to the file Ultimate.log and
the result is written to stdout. 

If the checked property does not hold, a human readable counterexample is
written to UltimateCounterExample.errorpath and an error witness is written
to witness.graphml.

3. Choosing the right parameters
3.1 Property files 
This archive contains a set of property files in the directory props/ that 
are supported by the current tool. Those files may be one of the following.
 * Deref.prp
   True iff all pointer dereferences are valid, i.e., iff the program never dereferences a null pointer. 
 * Memsafety.prp
   True iff the program never dereferences a null pointer and all deallocations are valid and all allocated memory is eventually freed. 
 * Overflow.prp
   True iff all operations whose resulting type is a signed integer type result in a value that is in the range of values representable by that type. 
 * Reach.prp
   True iff the program does not contain an execution that violates an assertion. 
 * Termination.prp
   True iff every program execution reaches the end of the program, i.e., iff all program executions are finite.  

3.2 Architecture 
The architecture parameter specifies whether the program is written for an ILP32 (32bit) or an LP64 (64bit) architecture.

3.3 Memory model
The memory model parameter specifies what Ultimate should assume about the memory model.
  * Simple
    Variables can only be modified using direct assignments or via pointer access if the address was obtained using the operator '&'.
  * Precise
    All memory cells can be written to, even dereferencing uninitialized pointers. 

4. Results
The wrapper script provides output to stdout that indicates whether the checked property is violated or not. 
The output "TRUE" generally means that the property holds.
The output "FALSE(P)" generally means that the property is violated. P specifies which property is violated. 
If the result is "FALSE(P)", the wrapper script produces the file "UltimateCounterExample.errorpath" in the current working directory. This file contains a counterexample in human-readable form. 
The wrapper script also records the original output of Ultimate in the file "Ultimate.log" in the current working directory. 
