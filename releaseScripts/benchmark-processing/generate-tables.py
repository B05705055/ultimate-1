#!/usr/bin/env python2.7
import argparse
import csv 
import re

mUltimateHeader = ['File',
                   'Settings',
                   'Toolchain',
                   'Result',
                   'Overall time',
                   'Overall iterations',
                   'TraceCheckerBenchmark_InterpolantComputationTime',
                   'TraceCheckerBenchmark_Conjuncts in SSA',
                   'TraceCheckerBenchmark_Conjuncts in UnsatCore']

def parseArgs():
    # parse command line arguments
    parser = argparse.ArgumentParser(description='Ultimate Latex table generator')
    parser.add_argument('input', type=str, nargs=1, help='A .csv file generated by an Ultimate test suite')
    parser.add_argument('output', type=str, nargs='?', help='Where should we write the output to')
    parser.add_argument('-n', '--table-name', dest='name', help='The name of the table we should produce')
    parser.add_argument('-d', '--with-document', dest='withDoc', action='store_true', help='Should we just print the table or also generate a surrounding document?')

    args = parser.parse_args()
    print 'Arguments:', args
    return args.input[0]


def parseCsvFile(fname):
    csvfile = open(fname, 'rb')
    dialect = csv.Sniffer().sniff(csvfile.read(1024))
    csvfile.seek(0)
    return csv.DictReader(csvfile, dialect=dialect)

def applyOnCsvFile(reader, fun, *args):
    acc = None
    for row in reader:
        acc = fun(row, acc, *args)
    return acc

def printFields(row, acc):
    for field in mUltimateHeader:
        print row[field],
    print
    return

def getUniqueSet(fieldname, row, acc):
    if acc == None:
        acc = set()
    acc.add(row[fieldname])
    return acc

def getFolders(row, acc):
    if acc == None:
        acc = {}
    for field in mUltimateHeader:
        input = row['File']
        key = getSvcompSubFolder(input)
        if(not key in acc):
            acc[key] = []
        acc[key].append(input)
    return acc


def getResultCountPerSetting(result, row, acc):
    if acc == None:
        acc = {}
    
    setting = row['Settings']
    resultCounter = 0
    if setting in acc:
       resultCounter = acc[setting]
    
    if row['Result'] in result:
        acc[setting] = resultCounter + 1 
        
    return acc

def getResultInputPerSetting(result, row, acc):
    if acc == None:
        acc = {}
    
    setting = row['Settings']
    resultInput = set()
    if not setting in acc:
       acc[setting] = resultInput
    else:
        resultInput = acc[setting]
    
    if row['Result'] in result:
        resultInput.add(row['File']) 
        
    return acc


def getSvcompSubFolder(input):
    return re.search('svcomp/(.*)/', input).group(1)

def getExclusiveCountPerSetting(rows, results):
    successInputs = applyOnCsvFile(rows, lambda x, y : getResultInputPerSetting(results, x, y))
    acc = {}
    for key, value in successInputs.items():
        exclusive = value
        for okey, ovalue in successInputs.items():
            if ovalue == value:
                continue
            exclusive = exclusive.difference(ovalue)
            if len(exclusive) == 0:
                break
        acc[key] = len(exclusive)
    return acc

def main():
    file = parseArgs()
    rows = list(parseCsvFile(file))
    uniqueFiles = applyOnCsvFile(rows, lambda x, y : getUniqueSet('File', x, y))

    safeResults = ['SAFE', 'UNSAFE']

    # # one line of unique settings: total success
    success = applyOnCsvFile(rows, lambda x, y : getResultCountPerSetting(safeResults, x, y))
    exclusive = getExclusiveCountPerSetting(rows, safeResults)

    print 'Total inputs:', len(uniqueFiles)
    print success
    print exclusive
        
    
    
    # # for graphics: sort 
    
            
    # applyOnCsvFile(rows, printFields)
    # applyOnCsvFile(rows, lambda x, y : printFields2('haha', x, y))
#     dict = applyOnCsvFile(rows, getFolders)
#     for key, value in dict.items():
#         print key
#         for folder in value:
#             print '\t' + folder
    
    return

if __name__ == "__main__":
    main()
