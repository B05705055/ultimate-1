This archive contains Ultimate.
Please direct any questions to one of the maintainers and/or consult the
websites.

Websites:
https://github.com/ultimate-pa/ultimate
https://ultimate.informatik.uni-freiburg.de/

Maintainers:
Daniel Dietsch (dietsch@informatik.uni-freiburg.de)
Matthias Heizmann (heizmann@informatik.uni-freiburg.de)
Alexander Nutz (nutz@informatik.uni-freiburg.de)
Marius Greitschus (greitsch@informatik.uni-freiburg.de)
Christian Schilling (schillic@informatik.uni-freiburg.de)

This archive also contains binaries for the following theorem provers.
 * Z3 (https://github.com/Z3Prover/z3)
   - Linux (z3)
     z3-4.8.6-master-e95045368 (2019-08-06)
   - Windows (z3.exe)
     z3-4.8.6 64Bit master e95045368 (2019-08-06)

 * CVC4 (http://cvc4.cs.nyu.edu/)
   - Linux
     - cvc4nyu is an old build,
       version 1.5-prerelease,
       subversion URL: https://github.com/CVC4/CVC4/trunk r4671 (with modifications),
       compiled with GCC version 4.6.4 on Dec 5 2015 05:45:40
     - cvc4 is a development build,
       version 1.7-prerelease,
       git master 391ab9df
       compiled with GCC version 5.4.0 20160609 on Nov 23 2018 03:32:38
   - Windows
     - cvc4nyu.exe is an old build,
       version 1.5-prerelease,
       subversion URL: https://github.com/CVC4/CVC4/trunk r5092 (with modifications),
       compiled with GCC version 4.2.1-sjlj (mingw32-2) on Aug 4 2016 10:21:05
     - cvc4.exe is a development build,
       version 1.7-prerelease
       compiled with GCC version 5.3.1 20160211 on Nov 23 2018 13:17:28
       Note that this version does not output the git hash, but it should be the same as the Linux version

 * MathSAT5 (http://mathsat.fbk.eu)
   - Windows (mathsat.exe, mpir.dll)
     MathSAT5 version 50d9330d8efd
     (Nov 16 2017 22:42:29, gmp 5.0.1, gcc 6.3.0, 64-bit)
   - Linux (mathsat)
     MathSAT5 version 50d9330d8efd
     (Nov 16 2017 22:36:38, gmp 5.1.3, gcc 4.8.4, 64-bit)

For each of these theorem provers, a corresponding license file (z3-LICENSE, cvc4-LICENSE,
mathsat-LICENSE) can be found in our archive. Please consult these files for additional
restrictions regarding your application. If these restrictions apply, you must delete
the corresponding binaries. This might not necessarily affect your application.

-------------------------------------------------------------------------------

# Scripts to perform the complete analysis.
We wrote a script, which perform a complete anaylsis, including the extraction of relevant stuff.
The script is located in `/path/to/ultimate/releaseScripts/default/UReqCheck-linux`.

- You have to configure `run_complete_analysis.sh`, which is used to run the complete analysis.
The script takes several arguments:
```
run_complete_analysis.sh <req_file> <req_repo_folder> <req_folder> [<rt_inconsistency_range> <timeout_per_assertion>]
```

Where:
* `req_file` is the Requirements file you generated using Hanfor.
* `req_repo_folder` is the path to the repository, which contains the requirements-folder
* `req_folder` is the path to the requirements-folder
* `rt_inconsistency_range` (default: 2) is the amount of requirements which are checked together for RT-inconsistency.
Careful with this parameter, it will blow up the amount of checks really fast.
* `timeout_per_assertion` (default: 900) The time how long a singles assertion is checked.

# Use Ultimate
We now simply execute the `run_complete_analysis.sh` script.

``` bash
$ cd /path/to/ultimate/releaseScripts/default/UReqCheck-linux
$ ./run_complete_analysis.sh path/to/repo/example_input/example_input.req path/to/repo/example_input path/to/repo/example_input
```
