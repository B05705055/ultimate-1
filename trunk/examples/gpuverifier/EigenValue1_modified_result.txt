[2017-09-11 10:44:23,379 INFO  L164             ResultUtil]:   - CounterExampleResult [Line: 294]: procedure precondition can be violated
[2017-09-11 10:44:23,379 INFO  L168             ResultUtil]:     procedure precondition can be violated
We found a FailurePath: 
[L46-L47]           requires !_READ_HAS_OCCURRED_$$numEigenIntervals && !_WRITE_HAS_OCCURRED_$$numEigenIntervals && !_ATOMIC_HAS_OCCURRED_$$numEigenIntervals;
[L46-L48]           requires !_READ_HAS_OCCURRED_$$eigenIntervals && !_WRITE_HAS_OCCURRED_$$eigenIntervals && !_ATOMIC_HAS_OCCURRED_$$eigenIntervals;
[L46-L49]           requires !_READ_HAS_OCCURRED_$$diagonal && !_WRITE_HAS_OCCURRED_$$diagonal && !_ATOMIC_HAS_OCCURRED_$$diagonal;
[L46-L50]           requires !_READ_HAS_OCCURRED_$$offDiagonal && !_WRITE_HAS_OCCURRED_$$offDiagonal && !_ATOMIC_HAS_OCCURRED_$$offDiagonal;
[L46-L51]           requires BV32_SGT(group_size_x, 0bv32);
[L46-L52]           requires BV32_SGT(num_groups_x, 0bv32);
[L46-L53]           requires BV32_SGE(group_id_x$1, 0bv32);
[L46-L54]           requires BV32_SGE(group_id_x$2, 0bv32);
[L46-L55]           requires BV32_SLT(group_id_x$1, num_groups_x);
[L46-L56]           requires BV32_SLT(group_id_x$2, num_groups_x);
[L46-L57]           requires BV32_SGE(local_id_x$1, 0bv32);
[L46-L58]           requires BV32_SGE(local_id_x$2, 0bv32);
[L46-L59]           requires BV32_SLT(local_id_x$1, group_size_x);
[L46-L60]           requires BV32_SLT(local_id_x$2, group_size_x);
[L46-L61]           requires BV32_SGT(group_size_y, 0bv32);
[L46-L62]           requires BV32_SGT(num_groups_y, 0bv32);
[L46-L63]           requires BV32_SGE(group_id_y$1, 0bv32);
[L46-L64]           requires BV32_SGE(group_id_y$2, 0bv32);
[L46-L65]           requires BV32_SLT(group_id_y$1, num_groups_y);
[L46-L66]           requires BV32_SLT(group_id_y$2, num_groups_y);
[L46-L67]           requires BV32_SGE(local_id_y$1, 0bv32);
[L46-L68]           requires BV32_SGE(local_id_y$2, 0bv32);
[L46-L69]           requires BV32_SLT(local_id_y$1, group_size_y);
[L46-L70]           requires BV32_SLT(local_id_y$2, group_size_y);
[L46-L71]           requires BV32_SGT(group_size_z, 0bv32);
[L46-L72]           requires BV32_SGT(num_groups_z, 0bv32);
[L46-L73]           requires BV32_SGE(group_id_z$1, 0bv32);
[L46-L74]           requires BV32_SGE(group_id_z$2, 0bv32);
[L46-L75]           requires BV32_SLT(group_id_z$1, num_groups_z);
[L46-L76]           requires BV32_SLT(group_id_z$2, num_groups_z);
[L46-L77]           requires BV32_SGE(local_id_z$1, 0bv32);
[L46-L78]           requires BV32_SGE(local_id_z$2, 0bv32);
[L46-L79]           requires BV32_SLT(local_id_z$1, group_size_z);
[L46-L80]           requires BV32_SLT(local_id_z$2, group_size_z);
[L46-L81]           requires group_id_x$1 == group_id_x$2 && group_id_y$1 == group_id_y$2 && group_id_z$1 == group_id_z$2 ==> local_id_x$1 != local_id_x$2 || local_id_y$1 != local_id_y$2 || local_id_z$1 != local_id_z$2;
             VAL    [_ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=false, _WRITE_HAS_OCCURRED_$$offDiagonal=false]
[L136]              v0$1 := BV32_ADD(BV32_MUL(group_id_x$1, group_size_x), local_id_x$1);
[L137]              v0$2 := BV32_ADD(BV32_MUL(group_id_x$2, group_size_x), local_id_x$2);
[L138]              v1$1 := BV32_MUL(2bv32, v0$1);
[L139]              v1$2 := BV32_MUL(2bv32, v0$2);
[L140]              havoc v2$1, v2$2;
[L141]              havoc v3$1, v3$2;
[L142]              havoc v4$1, v4$2;
[L143]              v5$1 := FSUB32(v4$1, v2$1);
[L144]              v5$2 := FSUB32(v4$2, v2$2);
[L145]              $count.i.0$1, $prev_diff.i.0$1, $i.i.0 := (if FLT32(v5$1, 0bv32) then 1bv32 else 0bv32), v5$1, 1bv32;
[L146]              $count.i.0$2, $prev_diff.i.0$2 := (if FLT32(v5$2, 0bv32) then 1bv32 else 0bv32), v5$2;
[L147]              assume true;
             VAL    [$count.i.0$1=1bv32, $count.i.0$2=1bv32, $i.i.0=1bv32, $prev_diff.i.0$1=0bv32, $prev_diff.i.0$2=0bv32, _ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=false, _WRITE_HAS_OCCURRED_$$offDiagonal=false, v0$1=0bv32, v0$2=0bv32, v1$1=0bv32, v1$2=0bv32, v2$1=0bv32, v2$2=0bv32, v4$1=1bv32, v4$2=1bv32, v5$1=0bv32, v5$2=0bv32]
[L151]              assume true;
             VAL    [$count.i.0$1=1bv32, $count.i.0$2=1bv32, $i.i.0=1bv32, $prev_diff.i.0$1=0bv32, $prev_diff.i.0$2=0bv32, _ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=false, _WRITE_HAS_OCCURRED_$$offDiagonal=false, v0$1=0bv32, v0$2=0bv32, v1$1=0bv32, v1$2=0bv32, v2$1=0bv32, v2$2=0bv32, v4$1=1bv32, v4$2=1bv32, v5$1=0bv32, v5$2=0bv32]
[L152]              assert true;
[L153]              v6 := BV32_ULT($i.i.0, $width);
             VAL    [$count.i.0$1=1bv32, $count.i.0$2=1bv32, $i.i.0=1bv32, $prev_diff.i.0$1=0bv32, $prev_diff.i.0$2=0bv32, $width=0bv32, _ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=false, _WRITE_HAS_OCCURRED_$$offDiagonal=false, v0$1=0bv32, v0$2=0bv32, v1$1=0bv32, v1$2=0bv32, v2$1=0bv32, v2$2=0bv32, v4$1=1bv32, v4$2=1bv32, v5$1=0bv32, v5$2=0bv32, v6=false]
[L157]              assume !v6;
[L158]              havoc v11$1, v11$2;
[L159]              v12$1 := FSUB32(v11$1, v3$1);
[L160]              v12$2 := FSUB32(v11$2, v3$2);
[L161]              $prev_diff.i13.0$1, $count.i12.0$1, $i.i14.0 := v12$1, (if FLT32(v12$1, 0bv32) then 1bv32 else 0bv32), 1bv32;
[L162]              $prev_diff.i13.0$2, $count.i12.0$2 := v12$2, (if FLT32(v12$2, 0bv32) then 1bv32 else 0bv32);
[L163]              assume true;
             VAL    [$count.i.0$1=1bv32, $count.i.0$2=1bv32, $count.i12.0$1=0bv32, $count.i12.0$2=1bv32, $i.i.0=1bv32, $i.i14.0=1bv32, $prev_diff.i.0$1=0bv32, $prev_diff.i.0$2=0bv32, $prev_diff.i13.0$1=8bv32, $prev_diff.i13.0$2=0bv32, $width=0bv32, _ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=false, _WRITE_HAS_OCCURRED_$$offDiagonal=false, v0$1=0bv32, v0$2=0bv32, v1$1=0bv32, v1$2=0bv32, v11$1=0bv32, v11$2=0bv32, v12$1=8bv32, v12$2=0bv32, v2$1=0bv32, v2$2=0bv32, v3$1=0bv32, v3$2=1bv32, v4$1=1bv32, v4$2=1bv32, v5$1=0bv32, v5$2=0bv32, v6=false]
[L167]              assume true;
             VAL    [$count.i.0$1=1bv32, $count.i.0$2=1bv32, $count.i12.0$1=0bv32, $count.i12.0$2=1bv32, $i.i.0=1bv32, $i.i14.0=1bv32, $prev_diff.i.0$1=0bv32, $prev_diff.i.0$2=0bv32, $prev_diff.i13.0$1=8bv32, $prev_diff.i13.0$2=0bv32, $width=0bv32, _ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=false, _WRITE_HAS_OCCURRED_$$offDiagonal=false, v0$1=0bv32, v0$2=0bv32, v1$1=0bv32, v1$2=0bv32, v11$1=0bv32, v11$2=0bv32, v12$1=8bv32, v12$2=0bv32, v2$1=0bv32, v2$2=0bv32, v3$1=0bv32, v3$2=1bv32, v4$1=1bv32, v4$2=1bv32, v5$1=0bv32, v5$2=0bv32, v6=false]
[L168]              assert true;
[L169]              v13 := BV32_ULT($i.i14.0, $width);
             VAL    [$count.i.0$1=1bv32, $count.i.0$2=1bv32, $count.i12.0$1=0bv32, $count.i12.0$2=1bv32, $i.i.0=1bv32, $i.i14.0=1bv32, $prev_diff.i.0$1=0bv32, $prev_diff.i.0$2=0bv32, $prev_diff.i13.0$1=8bv32, $prev_diff.i13.0$2=0bv32, $width=0bv32, _ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=false, _WRITE_HAS_OCCURRED_$$offDiagonal=false, v0$1=0bv32, v0$2=0bv32, v1$1=0bv32, v1$2=0bv32, v11$1=0bv32, v11$2=0bv32, v12$1=8bv32, v12$2=0bv32, v13=false, v2$1=0bv32, v2$2=0bv32, v3$1=0bv32, v3$2=1bv32, v4$1=1bv32, v4$2=1bv32, v5$1=0bv32, v5$2=0bv32, v6=false]
[L173]              assume !v13;
             VAL    [$count.i.0$1=1bv32, $count.i.0$2=1bv32, $count.i12.0$1=0bv32, $count.i12.0$2=1bv32, $i.i.0=1bv32, $i.i14.0=1bv32, $prev_diff.i.0$1=0bv32, $prev_diff.i.0$2=0bv32, $prev_diff.i13.0$1=8bv32, $prev_diff.i13.0$2=0bv32, $width=0bv32, _ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=false, _WRITE_HAS_OCCURRED_$$offDiagonal=false, v0$1=0bv32, v0$2=0bv32, v1$1=0bv32, v1$2=0bv32, v11$1=0bv32, v11$2=0bv32, v12$1=8bv32, v12$2=0bv32, v13=false, v2$1=0bv32, v2$2=0bv32, v3$1=0bv32, v3$2=1bv32, v4$1=1bv32, v4$2=1bv32, v5$1=0bv32, v5$2=0bv32, v6=false]
[L174]       CALL   call _LOG_WRITE_$$numEigenIntervals(true, v0$1, BV32_SUB(FP32_TO_UI32(UI32_TO_FP32($count.i12.0$1)), FP32_TO_UI32(UI32_TO_FP32($count.i.0$1))), $$numEigenIntervals[v0$1]);
             VAL    [_ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _offset=0bv32, _P=true, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _value=0bv32, _value_old=0bv32, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=false, _WRITE_HAS_OCCURRED_$$offDiagonal=false, _WRITE_READ_BENIGN_FLAG_$$numEigenIntervals=false, old(_WRITE_HAS_OCCURRED_$$numEigenIntervals)=false, old(_WRITE_READ_BENIGN_FLAG_$$numEigenIntervals)=false]
[L287]              _WRITE_HAS_OCCURRED_$$numEigenIntervals := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$numEigenIntervals == _value then true else _WRITE_HAS_OCCURRED_$$numEigenIntervals);
[L288]              _WRITE_READ_BENIGN_FLAG_$$numEigenIntervals := (if _P && _TRACKING && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$numEigenIntervals == _value then _value != _value_old else _WRITE_READ_BENIGN_FLAG_$$numEigenIntervals);
             VAL    [_ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _offset=0bv32, _P=true, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _TRACKING=true, _value=0bv32, _value_old=0bv32, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=true, _WRITE_HAS_OCCURRED_$$offDiagonal=false, _WRITE_READ_BENIGN_FLAG_$$numEigenIntervals=false, old(_WRITE_HAS_OCCURRED_$$numEigenIntervals)=false, old(_WRITE_READ_BENIGN_FLAG_$$numEigenIntervals)=false]
[L174]       RET    call _LOG_WRITE_$$numEigenIntervals(true, v0$1, BV32_SUB(FP32_TO_UI32(UI32_TO_FP32($count.i12.0$1)), FP32_TO_UI32(UI32_TO_FP32($count.i.0$1))), $$numEigenIntervals[v0$1]);
             VAL    [$count.i.0$1=1bv32, $count.i.0$2=1bv32, $count.i12.0$1=0bv32, $count.i12.0$2=1bv32, $i.i.0=1bv32, $i.i14.0=1bv32, $prev_diff.i.0$1=0bv32, $prev_diff.i.0$2=0bv32, $prev_diff.i13.0$1=8bv32, $prev_diff.i13.0$2=0bv32, $width=0bv32, _ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _TRACKING=true, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=true, _WRITE_HAS_OCCURRED_$$offDiagonal=false, _WRITE_READ_BENIGN_FLAG_$$numEigenIntervals=false, v0$1=0bv32, v0$2=0bv32, v1$1=0bv32, v1$2=0bv32, v11$1=0bv32, v11$2=0bv32, v12$1=8bv32, v12$2=0bv32, v13=false, v2$1=0bv32, v2$2=0bv32, v3$1=0bv32, v3$2=1bv32, v4$1=1bv32, v4$2=1bv32, v5$1=0bv32, v5$2=0bv32, v6=false]
[L175]       CALL   call _UPDATE_WRITE_READ_BENIGN_FLAG_$$numEigenIntervals(true, v0$2);
             VAL    [_ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _offset=0bv32, _P=true, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _TRACKING=true, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=true, _WRITE_HAS_OCCURRED_$$offDiagonal=false, _WRITE_READ_BENIGN_FLAG_$$numEigenIntervals=false, old(_WRITE_READ_BENIGN_FLAG_$$numEigenIntervals)=false]
[L331]              _WRITE_READ_BENIGN_FLAG_$$numEigenIntervals := (if _P && _WRITE_HAS_OCCURRED_$$numEigenIntervals && _WATCHED_OFFSET == _offset then false else _WRITE_READ_BENIGN_FLAG_$$numEigenIntervals);
             VAL    [_ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _offset=0bv32, _P=true, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _TRACKING=true, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=true, _WRITE_HAS_OCCURRED_$$offDiagonal=false, _WRITE_READ_BENIGN_FLAG_$$numEigenIntervals=false, old(_WRITE_READ_BENIGN_FLAG_$$numEigenIntervals)=false]
[L175]       RET    call _UPDATE_WRITE_READ_BENIGN_FLAG_$$numEigenIntervals(true, v0$2);
             VAL    [$count.i.0$1=1bv32, $count.i.0$2=1bv32, $count.i12.0$1=0bv32, $count.i12.0$2=1bv32, $i.i.0=1bv32, $i.i14.0=1bv32, $prev_diff.i.0$1=0bv32, $prev_diff.i.0$2=0bv32, $prev_diff.i13.0$1=8bv32, $prev_diff.i13.0$2=0bv32, $width=0bv32, _ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _TRACKING=true, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=true, _WRITE_HAS_OCCURRED_$$offDiagonal=false, _WRITE_READ_BENIGN_FLAG_$$numEigenIntervals=false, v0$1=0bv32, v0$2=0bv32, v1$1=0bv32, v1$2=0bv32, v11$1=0bv32, v11$2=0bv32, v12$1=8bv32, v12$2=0bv32, v13=false, v2$1=0bv32, v2$2=0bv32, v3$1=0bv32, v3$2=1bv32, v4$1=1bv32, v4$2=1bv32, v5$1=0bv32, v5$2=0bv32, v6=false]
[L176]              assume true;
[L178]              tmp := BV32_SUB(FP32_TO_UI32(UI32_TO_FP32($count.i12.0$2)), FP32_TO_UI32(UI32_TO_FP32($count.i.0$2)));
[L179]              tmp2 := _WATCHED_OFFSET;
[L180]              tmp3 := _WATCHED_VALUE_$$numEigenIntervals;
             VAL    [$count.i.0$1=1bv32, $count.i.0$2=1bv32, $count.i12.0$1=0bv32, $count.i12.0$2=1bv32, $i.i.0=1bv32, $i.i14.0=1bv32, $prev_diff.i.0$1=0bv32, $prev_diff.i.0$2=0bv32, $prev_diff.i13.0$1=8bv32, $prev_diff.i13.0$2=0bv32, $width=0bv32, _ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _TRACKING=true, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=true, _WRITE_HAS_OCCURRED_$$offDiagonal=false, _WRITE_READ_BENIGN_FLAG_$$numEigenIntervals=false, tmp=1bv32, tmp2=0bv32, tmp3=0bv32, v0$1=0bv32, v0$2=0bv32, v1$1=0bv32, v1$2=0bv32, v11$1=0bv32, v11$2=0bv32, v12$1=8bv32, v12$2=0bv32, v13=false, v2$1=0bv32, v2$2=0bv32, v3$1=0bv32, v3$2=1bv32, v4$1=1bv32, v4$2=1bv32, v5$1=0bv32, v5$2=0bv32, v6=false]
[L182]       FCALL  call _CHECK_WRITE_$$numEigenIntervals(true, v0$2, tmp);
[L294-L295]         requires !(_P && _WRITE_HAS_OCCURRED_$$numEigenIntervals && _WATCHED_OFFSET == _offset && _WATCHED_VALUE_$$numEigenIntervals != _value);
             VAL    [$count.i.0$1=1bv32, $count.i.0$2=1bv32, $count.i12.0$1=0bv32, $count.i12.0$2=1bv32, $i.i.0=1bv32, $i.i14.0=1bv32, $prev_diff.i.0$1=0bv32, $prev_diff.i.0$2=0bv32, $prev_diff.i13.0$1=8bv32, $prev_diff.i13.0$2=0bv32, $width=0bv32, _ATOMIC_HAS_OCCURRED_$$diagonal=false, _ATOMIC_HAS_OCCURRED_$$eigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$numEigenIntervals=false, _ATOMIC_HAS_OCCURRED_$$offDiagonal=false, _READ_HAS_OCCURRED_$$diagonal=false, _READ_HAS_OCCURRED_$$eigenIntervals=false, _READ_HAS_OCCURRED_$$numEigenIntervals=false, _READ_HAS_OCCURRED_$$offDiagonal=false, _TRACKING=true, _WRITE_HAS_OCCURRED_$$diagonal=false, _WRITE_HAS_OCCURRED_$$eigenIntervals=false, _WRITE_HAS_OCCURRED_$$numEigenIntervals=true, _WRITE_HAS_OCCURRED_$$offDiagonal=false, _WRITE_READ_BENIGN_FLAG_$$numEigenIntervals=false, tmp=1bv32, tmp2=0bv32, tmp3=0bv32, v0$1=0bv32, v0$2=0bv32, v1$1=0bv32, v1$2=0bv32, v11$1=0bv32, v11$2=0bv32, v12$1=8bv32, v12$2=0bv32, v13=false, v2$1=0bv32, v2$2=0bv32, v3$1=0bv32, v3$2=1bv32, v4$1=1bv32, v4$2=1bv32, v5$1=0bv32, v5$2=0bv32, v6=false]