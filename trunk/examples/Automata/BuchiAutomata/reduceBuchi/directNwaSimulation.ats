// Author: Daniel Tischner
// Date: 2016-04-28
//
// Example usage of a reduction program for Nwa automata that uses direct nwa simulation.

assert(!isEmpty(nwa));
// Before operation
//print(nwa);
// After operation
print(reduceNwaDirectSimulation(nwa, false));

// Use a random automaton
//print(reduceNwaDirectSimulation(removeDeadEnds(getRandomDfa(10, 2, 5))));

// Some example automaton

// Small nwa example from whiteboard
/*
NestedWordAutomaton nwa = (
  callAlphabet = {c},
  internalAlphabet = {a},
  returnAlphabet = {r},
  states = {q0 q1},
  initialStates = {q0},
  finalStates = {q1},
  callTransitions = {
	  (q0 c q0)
  },
  internalTransitions = {
      (q0 a q1)
  }, 
  returnTransitions = {
	  (q1 q0 r q1)
  }
);
*/
// Another small nwa example from whiteboard
/*
NestedWordAutomaton nwa = (
  callAlphabet = {c},
  internalAlphabet = {},
  returnAlphabet = {r},
  states = {q0 q1},
  initialStates = {q0},
  finalStates = {q1},
  callTransitions = {
	  (q0 c q1)
  },
  internalTransitions = {}, 
  returnTransitions = {
	  (q1 q0 r q0)
  }
);
*/
// Example with cyclic dependent summarize edges
/*
NestedWordAutomaton nwa = (
  callAlphabet = {c},
  internalAlphabet = {a},
  returnAlphabet = {r},
  states = {q1 q2 q3 q4},
  initialStates = {q1},
  finalStates = {q2 q4},
  callTransitions = {
	  (q1 c q3)
	  (q2 c q3)
  },
  internalTransitions = {
      (q1 a q2)
	  (q2 a q1)
	  (q4 a q1)
	  (q4 a q2)
  },
  returnTransitions = {
	  (q3 q1 r q4)
	  (q3 q2 r q4)
  }
);
*/
// Small circle example with two direct simulations in both directions

NestedWordAutomaton nwa = (
  callAlphabet = {c},
  internalAlphabet = {a},
  returnAlphabet = {r},
  states = {q0 q1 q2 q3},
  initialStates = {q0},
  finalStates = {q0 q2},
  callTransitions = {
	  (q0 c q1)
	  (q2 c q3)
  },
  internalTransitions = {
      
  }, 
  returnTransitions = {
	  (q1 q0 r q2)
	  (q3 q2 r q0)
  }
);

// Small circle example with direct simulation in one direction and one in both directions
/*
NestedWordAutomaton nwa = (
  callAlphabet = {c},
  internalAlphabet = {a},
  returnAlphabet = {r},
  states = {q0 q1 q2 q3},
  initialStates = {q0},
  finalStates = {q0},
  callTransitions = {
	  (q0 c q1)
	  (q2 c q3)
  },
  internalTransitions = {
      
  }, 
  returnTransitions = {
	  (q1 q0 r q2)
	  (q3 q2 r q0)
  }
);
*/