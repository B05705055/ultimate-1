// Author: Daniel Tischner
// Date: 2015-11-30
//
// Example usage of a reduction program for BÃ¼chi automata that uses fair simulation.

assert(!isEmpty(nwa));
// Before operation
//print(nwa);
// After operation
print(reduceBuchiFairSimulation(removeDeadEnds(nwa), false));
// Check correctness of operation
//print(reduceBuchiFairSimulation(nwa, true, true));

// Use a random automaton
//print(reduceBuchiFairSimulation(removeDeadEnds(getRandomDfa(10, 2, 5))));

// Some example automaton

// Big example from tutors cardboard
/*
NestedWordAutomaton nwa = (
	callAlphabet = {},
	internalAlphabet = {"a" "b" },
	returnAlphabet = {},
	states = {"q1" "q2" "q3" "q4" "q0" },
	initialStates = {"q0" },
	finalStates = {"q2" "q4" },
	callTransitions = {
	},
	internalTransitions = {
		 ("q1" "a" "q1")
		 ("q1" "a" "q2")
		 ("q2" "a" "q1")
		 ("q2" "a" "q2")
		 ("q3" "a" "q4")
		 ("q3" "b" "q3")
		 ("q4" "a" "q4")
		 ("q4" "b" "q3")
		 ("q0" "a" "q1")
		 ("q0" "a" "q3")
	},
	returnTransitions = {
	}
);
*/
// Small example from cav02 paper
/*
NestedWordAutomaton nwa = (
  callAlphabet = { },
  internalAlphabet = {a b},
  returnAlphabet = { },
  states = {q1 q2},
  initialStates = {q1},
  finalStates = {q1},
  callTransitions = {},
  internalTransitions = {
      (q1 a q1)
	  (q1 b q2)
	  (q2 b q2)
	  (q2 a q1)
  }, 
  returnTransitions = {}
);
*/

// Small circle example from mind

NestedWordAutomaton nwa = (
  callAlphabet = { },
  internalAlphabet = {a b},
  returnAlphabet = { },
  states = {q1 q2 q3 q4},
  initialStates = {q1},
  finalStates = {q1},
  callTransitions = {},
  internalTransitions = {
      (q1 a q2)
	  (q2 b q3)
	  (q3 a q4)
	  (q4 b q1)
  }, 
  returnTransitions = {}
);

// Non merge-able example with a one-directed fair simulation
/*
NestedWordAutomaton nwa = (
  callAlphabet = { },
  internalAlphabet = {a b},
  returnAlphabet = { },
  states = {q0 q1},
  initialStates = {q0},
  finalStates = {q0},
  callTransitions = {},
  internalTransitions = {
      (q0 b q0)
	  (q0 a q1)
	  (q1 a q1)
	  (q1 b q1)
  }, 
  returnTransitions = {}
);
*/

// Big example from cav02
/*
NestedWordAutomaton nwa = (
  callAlphabet = { },
  internalAlphabet = {a b},
  returnAlphabet = { },
  states = {q1 q2 q3 q4 q5 q6 q7 q8 q9 q10},
  initialStates = {q1},
  finalStates = {q3 q4 q6 q10},
  callTransitions = {},
  internalTransitions = {
	(q1 a q2)
	(q1 a q3)
	(q2 a q6)
	(q2 b q4)
	(q2 b q7)
	(q4 a q2)
	(q6 a q6)
	(q3 b q5)
	(q3 b q7)
	(q5 a q3)
	(q7 b q8)
	(q8 a q9)
	(q8 b q10)
	(q9 a q9)
	(q9 b q10)
	(q10 b q10)
  }, 
  returnTransitions = {}
);
*/
// Debug bug alpha
/*
NestedWordAutomaton nwa = (
	callAlphabet = {},
	internalAlphabet = {"a1" "a2" "a0" },
	returnAlphabet = {},
	states = {"q1" "q2" "q3" "q4" "q0" },
	initialStates = {"q0" },
	finalStates = {"q2" },
	callTransitions = {
	},
	internalTransitions = {
		 ("q1" "a2" "q4")
		 ("q2" "a2" "q2")
		 ("q2" "a0" "q1")
		 ("q3" "a1" "q2")
		 ("q3" "a2" "q2")
		 ("q3" "a2" "q4")
		 ("q4" "a1" "q4")
		 ("q4" "a1" "q0")
		 ("q4" "a2" "q2")
		 ("q4" "a2" "q4")
		 ("q4" "a0" "q1")
		 ("q0" "a1" "q3")
		 ("q0" "a1" "q4")
		 ("q0" "a2" "q2")
		 ("q0" "a2" "q3")
	},
	returnTransitions = {
	}
);
*/
// Praxis automata
/*
NestedWordAutomaton nwa = (
	callAlphabet = {},
	internalAlphabet = {"~INFINITY := 899;havoc main_#res;havoc main_#t~nondet1, main_#t~nondet2, main_#t~post3, main_#t~post5, main_#t~post4, main_#t~post6, main_#t~post7, main_~nodecount~6, main_~edgecount~6, main_~source~6, main_~Source~6, main_~Dest~6, main_~Weight~6, main_~distance~6, main_~x~6, main_~y~6, main_~i~6, main_~j~6;assume -2147483648 <= main_#t~nondet1 && main_#t~nondet1 <= 2147483647;main_~nodecount~6 := main_#t~nondet1;havoc main_#t~nondet1;assume -2147483648 <= main_#t~nondet2 && main_#t~nondet2 <= 2147483647;main_~edgecount~6 := main_#t~nondet2;havoc main_#t~nondet2;assume 0 <= main_~nodecount~6 && main_~nodecount~6 <= 4;assume 0 <= main_~edgecount~6 && main_~edgecount~6 <= 19;main_~source~6 := 0;main_~Source~6 := main_~Source~6[0 := 0];main_~Source~6 := main_~Source~6[1 := 4];main_~Source~6 := main_~Source~6[2 := 1];main_~Source~6 := main_~Source~6[3 := 1];main_~Source~6 := main_~Source~6[4 := 0];main_~Source~6 := main_~Source~6[5 := 0];main_~Source~6 := main_~Source~6[6 := 1];main_~Source~6 := main_~Source~6[7 := 3];main_~Source~6 := main_~Source~6[8 := 4];main_~Source~6 := main_~Source~6[9 := 4];main_~Source~6 := main_~Source~6[10 := 2];main_~Source~6 := main_~Source~6[11 := 2];main_~Source~6 := main_~Source~6[12 := 3];main_~Source~6 := main_~Source~6[13 := 0];main_~Source~6 := main_~Source~6[14 := 0];main_~Source~6 := main_~Source~6[15 := 3];main_~Source~6 := main_~Source~6[16 := 1];main_~Source~6 := main_~Source~6[17 := 2];main_~Source~6 := main_~Source~6[18 := 2];main_~Source~6 := main_~Source~6[19 := 3];main_~Dest~6 := main_~Dest~6[0 := 1];main_~Dest~6 := main_~Dest~6[1 := 3];main_~Dest~6 := main_~Dest~6[2 := 4];main_~Dest~6 := main_~Dest~6[3 := 1];main_~Dest~6 := main_~Dest~6[4 := 1];main_~Dest~6 := main_~Dest~6[5 := 4];main_~Dest~6 := main_~Dest~6[6 := 3];main_~Dest~6 := main_~Dest~6[7 := 4];main_~Dest~6 := main_~Dest~6[8 := 3];main_~Dest~6 := main_~Dest~6[9 := 0];main_~Dest~6 := main_~Dest~6[10 := 0];main_~Dest~6 := main_~Dest~6[11 := 0];main_~Dest~6 := main_~Dest~6[12 := 0];main_~Dest~6 := main_~Dest~6[13 := 2];main_~Dest~6 := main_~Dest~6[14 := 3];main_~Dest~6 := main_~Dest~6[15 := 0];main_~Dest~6 := main_~Dest~6[16 := 2];main_~Dest~6 := main_~Dest~6[17 := 1];main_~Dest~6 := main_~Dest~6[18 := 0];main_~Dest~6 := main_~Dest~6[19 := 4];main_~Weight~6 := main_~Weight~6[0 := 0];main_~Weight~6 := main_~Weight~6[1 := 1];main_~Weight~6 := main_~Weight~6[2 := 2];main_~Weight~6 := main_~Weight~6[3 := 3];main_~Weight~6 := main_~Weight~6[4 := 4];main_~Weight~6 := main_~Weight~6[5 := 5];main_~Weight~6 := main_~Weight~6[6 := 6];main_~Weight~6 := main_~Weight~6[7 := 7];main_~Weight~6 := main_~Weight~6[8 := 8];main_~Weight~6 := main_~Weight~6[9 := 9];main_~Weight~6 := main_~Weight~6[10 := 10];main_~Weight~6 := main_~Weight~6[11 := 11];main_~Weight~6 := main_~Weight~6[12 := 12];main_~Weight~6 := main_~Weight~6[13 := 13];main_~Weight~6 := main_~Weight~6[14 := 14];main_~Weight~6 := main_~Weight~6[15 := 15];main_~Weight~6 := main_~Weight~6[16 := 16];main_~Weight~6 := main_~Weight~6[17 := 17];main_~Weight~6 := main_~Weight~6[18 := 18];main_~Weight~6 := main_~Weight~6[19 := 19];havoc main_~distance~6;havoc main_~x~6;havoc main_~y~6;havoc main_~i~6;havoc main_~j~6;main_~i~6 := 0;" "assume true;" "assume !(main_~i~6 < main_~nodecount~6);" "main_~i~6 := 0;" "assume true;assume !(main_~i~6 < main_~nodecount~6);" "main_~i~6 := 0;" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume true;assume true;assume true;assume !(main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~i~6]);main_#t~post6 := main_~i~6;main_~i~6 := main_#t~post6 + 1;havoc main_#t~post6;" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume true;assume true;assume true;assume main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~i~6];main_#res := 0;" "#t~ret8 := main_#res;assume true;" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume true;assume true;assume !(0 <= main_~i~6 && main_~i~6 < 20);" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume true;assume !(0 <= main_~y~6 && main_~y~6 < 5);" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume !(0 <= main_~x~6 && main_~x~6 < 5);" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume !(0 <= main_~i~6 && main_~i~6 < 20);" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume !(0 <= main_~i~6 && main_~i~6 < 20);" "assume true;assume !(main_~i~6 < main_~edgecount~6);" "main_~i~6 := 0;" "assume true;" "assume !(main_~i~6 < main_~nodecount~6);" "main_#res := 0;" "assume !!(main_~i~6 < main_~nodecount~6);" "assume !(0 <= main_~i~6 && main_~i~6 < 5);" "assume true;__VERIFIER_assert_#in~cond := (if main_~distance~6[main_~i~6] >= 0 then 1 else 0);havoc __VERIFIER_assert_~cond;__VERIFIER_assert_~cond := __VERIFIER_assert_#in~cond;" "assume __VERIFIER_assert_~cond == 0;assume !false;" "assume __VERIFIER_assert_~cond == 0;assume true;" "main_#t~post7 := main_~i~6;main_~i~6 := main_#t~post7 + 1;havoc main_#t~post7;" "assume !true;" "assume !(__VERIFIER_assert_~cond == 0);" "assume !true;" "assume true;assume !!(main_~i~6 < main_~nodecount~6);main_~j~6 := 0;" "assume true;" "assume !(main_~j~6 < main_~edgecount~6);" "main_#t~post4 := main_~i~6;main_~i~6 := main_#t~post4 + 1;havoc main_#t~post4;" "assume !true;" "assume !!(main_~j~6 < main_~edgecount~6);" "assume !(0 <= main_~j~6 && main_~j~6 < 20);" "assume true;main_~x~6 := main_~Dest~6[main_~j~6];" "assume !(0 <= main_~j~6 && main_~j~6 < 20);" "assume true;main_~y~6 := main_~Source~6[main_~j~6];" "assume !(0 <= main_~x~6 && main_~x~6 < 5);" "assume true;" "assume !(0 <= main_~y~6 && main_~y~6 < 5);" "assume true;" "assume !(0 <= main_~j~6 && main_~j~6 < 20);" "assume true;" "assume main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~j~6];assume !(0 <= main_~x~6 && main_~x~6 < 5);" "assume main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~j~6];assume true;main_~distance~6 := main_~distance~6[main_~x~6 := -1];" "main_#t~post5 := main_~j~6;main_~j~6 := main_#t~post5 + 1;havoc main_#t~post5;" "assume !true;" "assume !(main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~j~6]);" "assume !!(main_~i~6 < main_~nodecount~6);" "assume !(main_~i~6 == main_~source~6);assume !(0 <= main_~i~6 && main_~i~6 < 5);" "assume !(main_~i~6 == main_~source~6);assume true;main_~distance~6 := main_~distance~6[main_~i~6 := ~INFINITY];" "main_#t~post3 := main_~i~6;main_~i~6 := main_#t~post3 + 1;havoc main_#t~post3;" "assume !true;" "assume main_~i~6 == main_~source~6;assume !(0 <= main_~i~6 && main_~i~6 < 5);" "assume main_~i~6 == main_~source~6;assume true;main_~distance~6 := main_~distance~6[main_~i~6 := 0];" },
	returnAlphabet = {},
	states = {"128#L56'''" "129#L58" "130#L56" "131#L34''" "132#L38" "133#ULTIMATE.startErr5AssertViolation" "134#L40''" "135#L6" "136#L56'''" "137#L58" "138#ULTIMATE.startErr2AssertViolation" "139#L39" "140#ULTIMATE.startErr6AssertViolation" "141#L40'''" "142#L6''" "143#ULTIMATE.startErr14AssertViolation" "144#ULTIMATE.startErr13AssertViolation" "145#L6" "146#L40" "147#ULTIMATE.startErr3AssertViolation" "148#ULTIMATE.startErr7AssertViolation" "149#L36''" "150#L6''" "151#ULTIMATE.startErr14AssertViolation" "152#ULTIMATE.startErr4AssertViolation" "153#L40'" "154#ULTIMATE.startErr5AssertViolation" "155#L40''" "156#ULTIMATE.startErr6AssertViolation" "157#L40'''" "158#ULTIMATE.startErr7AssertViolation" "159#L36''" "81#ULTIMATE.startENTRY" "82#L25'''" "83#L25" "84#L26" "85#L25''''" "86#L25''" "87#L34'''" "88#L25'''" "89#L36'''" "90#L34''''" "91#L25" "92#L36" "93#L46'''" "94#L26" "95#L25''''" "96#L34''" "97#L38" "98#ULTIMATE.startErr11AssertViolation" "99#L46''''" "100#L46'''" "101#ULTIMATE.startErr10AssertViolation" "102#L61" "103#ULTIMATE.startErr1AssertViolation" "104#L25''" "105#ULTIMATE.startErr0AssertViolation" "106#L34'''" "107#ULTIMATE.startErr2AssertViolation" "108#L39" "109#L56''" "110#ULTIMATE.startErr8AssertViolation" "111#ULTIMATE.startErr11AssertViolation" "112#L46''''" "113#ULTIMATE.startErr10AssertViolation" "114#ULTIMATE.startErr12AssertViolation" "115#ULTIMATE.startErr9AssertViolation" "116#L61" "117#ULTIMATE.startEXIT" "118#L36'''" "119#L34''''" "120#L40" "121#ULTIMATE.startErr3AssertViolation" "122#L56" "123#L56''" "124#ULTIMATE.startEXIT" "125#L36" "126#ULTIMATE.startErr4AssertViolation" "127#L40'" },
	initialStates = {"81#ULTIMATE.startENTRY" },
	finalStates = {"128#L56'''" "129#L58" "130#L56" "131#L34''" "132#L38" "133#ULTIMATE.startErr5AssertViolation" "134#L40''" "135#L6" "136#L56'''" "137#L58" "138#ULTIMATE.startErr2AssertViolation" "139#L39" "140#ULTIMATE.startErr6AssertViolation" "141#L40'''" "142#L6''" "143#ULTIMATE.startErr14AssertViolation" "144#ULTIMATE.startErr13AssertViolation" "145#L6" "146#L40" "147#ULTIMATE.startErr3AssertViolation" "148#ULTIMATE.startErr7AssertViolation" "149#L36''" "150#L6''" "151#ULTIMATE.startErr14AssertViolation" "152#ULTIMATE.startErr4AssertViolation" "153#L40'" "154#ULTIMATE.startErr5AssertViolation" "155#L40''" "156#ULTIMATE.startErr6AssertViolation" "157#L40'''" "158#ULTIMATE.startErr7AssertViolation" "159#L36''" "81#ULTIMATE.startENTRY" "82#L25'''" "83#L25" "84#L26" "85#L25''''" "86#L25''" "87#L34'''" "88#L25'''" "89#L36'''" "90#L34''''" "91#L25" "92#L36" "93#L46'''" "94#L26" "95#L25''''" "96#L34''" "97#L38" "98#ULTIMATE.startErr11AssertViolation" "99#L46''''" "100#L46'''" "101#ULTIMATE.startErr10AssertViolation" "102#L61" "103#ULTIMATE.startErr1AssertViolation" "104#L25''" "105#ULTIMATE.startErr0AssertViolation" "106#L34'''" "107#ULTIMATE.startErr2AssertViolation" "108#L39" "109#L56''" "110#ULTIMATE.startErr8AssertViolation" "111#ULTIMATE.startErr11AssertViolation" "112#L46''''" "113#ULTIMATE.startErr10AssertViolation" "114#ULTIMATE.startErr12AssertViolation" "115#ULTIMATE.startErr9AssertViolation" "116#L61" "117#ULTIMATE.startEXIT" "118#L36'''" "119#L34''''" "120#L40" "121#ULTIMATE.startErr3AssertViolation" "122#L56" "123#L56''" "124#ULTIMATE.startEXIT" "125#L36" "126#ULTIMATE.startErr4AssertViolation" "127#L40'" },
	callTransitions = {
	},
	internalTransitions = {
		 ("128#L56'''" "main_#res := 0;" "102#L61")
		 ("129#L58" "assume true;__VERIFIER_assert_#in~cond := (if main_~distance~6[main_~i~6] >= 0 then 1 else 0);havoc __VERIFIER_assert_~cond;__VERIFIER_assert_~cond := __VERIFIER_assert_#in~cond;" "135#L6")
		 ("130#L56" "assume !(main_~i~6 < main_~nodecount~6);" "136#L56'''")
		 ("130#L56" "assume !!(main_~i~6 < main_~nodecount~6);" "137#L58")
		 ("131#L34''" "main_#t~post4 := main_~i~6;main_~i~6 := main_#t~post4 + 1;havoc main_#t~post4;" "106#L34'''")
		 ("132#L38" "assume !(0 <= main_~j~6 && main_~j~6 < 20);" "138#ULTIMATE.startErr2AssertViolation")
		 ("132#L38" "assume true;main_~x~6 := main_~Dest~6[main_~j~6];" "139#L39")
		 ("134#L40''" "assume !(0 <= main_~j~6 && main_~j~6 < 20);" "140#ULTIMATE.startErr6AssertViolation")
		 ("134#L40''" "assume true;" "141#L40'''")
		 ("135#L6" "assume __VERIFIER_assert_~cond == 0;assume true;" "142#L6''")
		 ("135#L6" "assume !(__VERIFIER_assert_~cond == 0);" "142#L6''")
		 ("135#L6" "assume __VERIFIER_assert_~cond == 0;assume !false;" "143#ULTIMATE.startErr14AssertViolation")
		 ("136#L56'''" "main_#res := 0;" "116#L61")
		 ("137#L58" "assume !(0 <= main_~i~6 && main_~i~6 < 5);" "144#ULTIMATE.startErr13AssertViolation")
		 ("137#L58" "assume true;__VERIFIER_assert_#in~cond := (if main_~distance~6[main_~i~6] >= 0 then 1 else 0);havoc __VERIFIER_assert_~cond;__VERIFIER_assert_~cond := __VERIFIER_assert_#in~cond;" "145#L6")
		 ("139#L39" "assume true;main_~y~6 := main_~Source~6[main_~j~6];" "146#L40")
		 ("139#L39" "assume !(0 <= main_~j~6 && main_~j~6 < 20);" "147#ULTIMATE.startErr3AssertViolation")
		 ("141#L40'''" "assume main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~j~6];assume !(0 <= main_~x~6 && main_~x~6 < 5);" "148#ULTIMATE.startErr7AssertViolation")
		 ("141#L40'''" "assume main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~j~6];assume true;main_~distance~6 := main_~distance~6[main_~x~6 := -1];" "149#L36''")
		 ("141#L40'''" "assume !(main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~j~6]);" "149#L36''")
		 ("142#L6''" "main_#t~post7 := main_~i~6;main_~i~6 := main_#t~post7 + 1;havoc main_#t~post7;" "123#L56''")
		 ("145#L6" "assume __VERIFIER_assert_~cond == 0;assume true;" "150#L6''")
		 ("145#L6" "assume !(__VERIFIER_assert_~cond == 0);" "150#L6''")
		 ("145#L6" "assume __VERIFIER_assert_~cond == 0;assume !false;" "151#ULTIMATE.startErr14AssertViolation")
		 ("146#L40" "assume !(0 <= main_~x~6 && main_~x~6 < 5);" "152#ULTIMATE.startErr4AssertViolation")
		 ("146#L40" "assume true;" "153#L40'")
		 ("149#L36''" "main_#t~post5 := main_~j~6;main_~j~6 := main_#t~post5 + 1;havoc main_#t~post5;" "89#L36'''")
		 ("150#L6''" "main_#t~post7 := main_~i~6;main_~i~6 := main_#t~post7 + 1;havoc main_#t~post7;" "123#L56''")
		 ("153#L40'" "assume !(0 <= main_~y~6 && main_~y~6 < 5);" "154#ULTIMATE.startErr5AssertViolation")
		 ("153#L40'" "assume true;" "155#L40''")
		 ("155#L40''" "assume !(0 <= main_~j~6 && main_~j~6 < 20);" "156#ULTIMATE.startErr6AssertViolation")
		 ("155#L40''" "assume true;" "157#L40'''")
		 ("157#L40'''" "assume main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~j~6];assume !(0 <= main_~x~6 && main_~x~6 < 5);" "158#ULTIMATE.startErr7AssertViolation")
		 ("157#L40'''" "assume main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~j~6];assume true;main_~distance~6 := main_~distance~6[main_~x~6 := -1];" "159#L36''")
		 ("157#L40'''" "assume !(main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~j~6]);" "159#L36''")
		 ("159#L36''" "main_#t~post5 := main_~j~6;main_~j~6 := main_#t~post5 + 1;havoc main_#t~post5;" "118#L36'''")
		 ("81#ULTIMATE.startENTRY" "~INFINITY := 899;havoc main_#res;havoc main_#t~nondet1, main_#t~nondet2, main_#t~post3, main_#t~post5, main_#t~post4, main_#t~post6, main_#t~post7, main_~nodecount~6, main_~edgecount~6, main_~source~6, main_~Source~6, main_~Dest~6, main_~Weight~6, main_~distance~6, main_~x~6, main_~y~6, main_~i~6, main_~j~6;assume -2147483648 <= main_#t~nondet1 && main_#t~nondet1 <= 2147483647;main_~nodecount~6 := main_#t~nondet1;havoc main_#t~nondet1;assume -2147483648 <= main_#t~nondet2 && main_#t~nondet2 <= 2147483647;main_~edgecount~6 := main_#t~nondet2;havoc main_#t~nondet2;assume 0 <= main_~nodecount~6 && main_~nodecount~6 <= 4;assume 0 <= main_~edgecount~6 && main_~edgecount~6 <= 19;main_~source~6 := 0;main_~Source~6 := main_~Source~6[0 := 0];main_~Source~6 := main_~Source~6[1 := 4];main_~Source~6 := main_~Source~6[2 := 1];main_~Source~6 := main_~Source~6[3 := 1];main_~Source~6 := main_~Source~6[4 := 0];main_~Source~6 := main_~Source~6[5 := 0];main_~Source~6 := main_~Source~6[6 := 1];main_~Source~6 := main_~Source~6[7 := 3];main_~Source~6 := main_~Source~6[8 := 4];main_~Source~6 := main_~Source~6[9 := 4];main_~Source~6 := main_~Source~6[10 := 2];main_~Source~6 := main_~Source~6[11 := 2];main_~Source~6 := main_~Source~6[12 := 3];main_~Source~6 := main_~Source~6[13 := 0];main_~Source~6 := main_~Source~6[14 := 0];main_~Source~6 := main_~Source~6[15 := 3];main_~Source~6 := main_~Source~6[16 := 1];main_~Source~6 := main_~Source~6[17 := 2];main_~Source~6 := main_~Source~6[18 := 2];main_~Source~6 := main_~Source~6[19 := 3];main_~Dest~6 := main_~Dest~6[0 := 1];main_~Dest~6 := main_~Dest~6[1 := 3];main_~Dest~6 := main_~Dest~6[2 := 4];main_~Dest~6 := main_~Dest~6[3 := 1];main_~Dest~6 := main_~Dest~6[4 := 1];main_~Dest~6 := main_~Dest~6[5 := 4];main_~Dest~6 := main_~Dest~6[6 := 3];main_~Dest~6 := main_~Dest~6[7 := 4];main_~Dest~6 := main_~Dest~6[8 := 3];main_~Dest~6 := main_~Dest~6[9 := 0];main_~Dest~6 := main_~Dest~6[10 := 0];main_~Dest~6 := main_~Dest~6[11 := 0];main_~Dest~6 := main_~Dest~6[12 := 0];main_~Dest~6 := main_~Dest~6[13 := 2];main_~Dest~6 := main_~Dest~6[14 := 3];main_~Dest~6 := main_~Dest~6[15 := 0];main_~Dest~6 := main_~Dest~6[16 := 2];main_~Dest~6 := main_~Dest~6[17 := 1];main_~Dest~6 := main_~Dest~6[18 := 0];main_~Dest~6 := main_~Dest~6[19 := 4];main_~Weight~6 := main_~Weight~6[0 := 0];main_~Weight~6 := main_~Weight~6[1 := 1];main_~Weight~6 := main_~Weight~6[2 := 2];main_~Weight~6 := main_~Weight~6[3 := 3];main_~Weight~6 := main_~Weight~6[4 := 4];main_~Weight~6 := main_~Weight~6[5 := 5];main_~Weight~6 := main_~Weight~6[6 := 6];main_~Weight~6 := main_~Weight~6[7 := 7];main_~Weight~6 := main_~Weight~6[8 := 8];main_~Weight~6 := main_~Weight~6[9 := 9];main_~Weight~6 := main_~Weight~6[10 := 10];main_~Weight~6 := main_~Weight~6[11 := 11];main_~Weight~6 := main_~Weight~6[12 := 12];main_~Weight~6 := main_~Weight~6[13 := 13];main_~Weight~6 := main_~Weight~6[14 := 14];main_~Weight~6 := main_~Weight~6[15 := 15];main_~Weight~6 := main_~Weight~6[16 := 16];main_~Weight~6 := main_~Weight~6[17 := 17];main_~Weight~6 := main_~Weight~6[18 := 18];main_~Weight~6 := main_~Weight~6[19 := 19];havoc main_~distance~6;havoc main_~x~6;havoc main_~y~6;havoc main_~i~6;havoc main_~j~6;main_~i~6 := 0;" "82#L25'''")
		 ("82#L25'''" "assume true;" "83#L25")
		 ("83#L25" "assume !!(main_~i~6 < main_~nodecount~6);" "84#L26")
		 ("83#L25" "assume !(main_~i~6 < main_~nodecount~6);" "85#L25''''")
		 ("84#L26" "assume main_~i~6 == main_~source~6;assume true;main_~distance~6 := main_~distance~6[main_~i~6 := 0];" "86#L25''")
		 ("85#L25''''" "main_~i~6 := 0;" "87#L34'''")
		 ("86#L25''" "main_#t~post3 := main_~i~6;main_~i~6 := main_#t~post3 + 1;havoc main_#t~post3;" "88#L25'''")
		 ("87#L34'''" "assume true;assume !!(main_~i~6 < main_~nodecount~6);main_~j~6 := 0;" "89#L36'''")
		 ("87#L34'''" "assume true;assume !(main_~i~6 < main_~nodecount~6);" "90#L34''''")
		 ("88#L25'''" "assume true;" "91#L25")
		 ("89#L36'''" "assume true;" "92#L36")
		 ("90#L34''''" "main_~i~6 := 0;" "93#L46'''")
		 ("91#L25" "assume !!(main_~i~6 < main_~nodecount~6);" "94#L26")
		 ("91#L25" "assume !(main_~i~6 < main_~nodecount~6);" "95#L25''''")
		 ("92#L36" "assume !(main_~j~6 < main_~edgecount~6);" "96#L34''")
		 ("92#L36" "assume !!(main_~j~6 < main_~edgecount~6);" "97#L38")
		 ("93#L46'''" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume true;assume !(0 <= main_~y~6 && main_~y~6 < 5);" "98#ULTIMATE.startErr11AssertViolation")
		 ("93#L46'''" "assume true;assume !(main_~i~6 < main_~edgecount~6);" "99#L46''''")
		 ("93#L46'''" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume true;assume true;assume true;assume !(main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~i~6]);main_#t~post6 := main_~i~6;main_~i~6 := main_#t~post6 + 1;havoc main_#t~post6;" "100#L46'''")
		 ("93#L46'''" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume !(0 <= main_~x~6 && main_~x~6 < 5);" "101#ULTIMATE.startErr10AssertViolation")
		 ("93#L46'''" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume true;assume true;assume true;assume main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~i~6];main_#res := 0;" "102#L61")
		 ("94#L26" "assume !(main_~i~6 == main_~source~6);assume !(0 <= main_~i~6 && main_~i~6 < 5);" "103#ULTIMATE.startErr1AssertViolation")
		 ("94#L26" "assume !(main_~i~6 == main_~source~6);assume true;main_~distance~6 := main_~distance~6[main_~i~6 := ~INFINITY];" "104#L25''")
		 ("94#L26" "assume main_~i~6 == main_~source~6;assume !(0 <= main_~i~6 && main_~i~6 < 5);" "105#ULTIMATE.startErr0AssertViolation")
		 ("94#L26" "assume main_~i~6 == main_~source~6;assume true;main_~distance~6 := main_~distance~6[main_~i~6 := 0];" "104#L25''")
		 ("95#L25''''" "main_~i~6 := 0;" "106#L34'''")
		 ("96#L34''" "main_#t~post4 := main_~i~6;main_~i~6 := main_#t~post4 + 1;havoc main_#t~post4;" "106#L34'''")
		 ("97#L38" "assume !(0 <= main_~j~6 && main_~j~6 < 20);" "107#ULTIMATE.startErr2AssertViolation")
		 ("97#L38" "assume true;main_~x~6 := main_~Dest~6[main_~j~6];" "108#L39")
		 ("99#L46''''" "main_~i~6 := 0;" "109#L56''")
		 ("100#L46'''" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume !(0 <= main_~i~6 && main_~i~6 < 20);" "110#ULTIMATE.startErr8AssertViolation")
		 ("100#L46'''" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume true;assume !(0 <= main_~y~6 && main_~y~6 < 5);" "111#ULTIMATE.startErr11AssertViolation")
		 ("100#L46'''" "assume true;assume !(main_~i~6 < main_~edgecount~6);" "112#L46''''")
		 ("100#L46'''" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume true;assume true;assume true;assume !(main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~i~6]);main_#t~post6 := main_~i~6;main_~i~6 := main_#t~post6 + 1;havoc main_#t~post6;" "100#L46'''")
		 ("100#L46'''" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume !(0 <= main_~x~6 && main_~x~6 < 5);" "113#ULTIMATE.startErr10AssertViolation")
		 ("100#L46'''" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume true;assume true;assume !(0 <= main_~i~6 && main_~i~6 < 20);" "114#ULTIMATE.startErr12AssertViolation")
		 ("100#L46'''" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume !(0 <= main_~i~6 && main_~i~6 < 20);" "115#ULTIMATE.startErr9AssertViolation")
		 ("100#L46'''" "assume true;assume !!(main_~i~6 < main_~edgecount~6);assume true;main_~x~6 := main_~Dest~6[main_~i~6];assume true;main_~y~6 := main_~Source~6[main_~i~6];assume true;assume true;assume true;assume main_~distance~6[main_~x~6] > main_~distance~6[main_~y~6] + main_~Weight~6[main_~i~6];main_#res := 0;" "116#L61")
		 ("102#L61" "#t~ret8 := main_#res;assume true;" "117#ULTIMATE.startEXIT")
		 ("104#L25''" "main_#t~post3 := main_~i~6;main_~i~6 := main_#t~post3 + 1;havoc main_#t~post3;" "88#L25'''")
		 ("106#L34'''" "assume true;assume !!(main_~i~6 < main_~nodecount~6);main_~j~6 := 0;" "118#L36'''")
		 ("106#L34'''" "assume true;assume !(main_~i~6 < main_~nodecount~6);" "119#L34''''")
		 ("108#L39" "assume true;main_~y~6 := main_~Source~6[main_~j~6];" "120#L40")
		 ("108#L39" "assume !(0 <= main_~j~6 && main_~j~6 < 20);" "121#ULTIMATE.startErr3AssertViolation")
		 ("109#L56''" "assume true;" "122#L56")
		 ("112#L46''''" "main_~i~6 := 0;" "123#L56''")
		 ("116#L61" "#t~ret8 := main_#res;assume true;" "124#ULTIMATE.startEXIT")
		 ("118#L36'''" "assume true;" "125#L36")
		 ("119#L34''''" "main_~i~6 := 0;" "100#L46'''")
		 ("120#L40" "assume !(0 <= main_~x~6 && main_~x~6 < 5);" "126#ULTIMATE.startErr4AssertViolation")
		 ("120#L40" "assume true;" "127#L40'")
		 ("122#L56" "assume !(main_~i~6 < main_~nodecount~6);" "128#L56'''")
		 ("122#L56" "assume !!(main_~i~6 < main_~nodecount~6);" "129#L58")
		 ("123#L56''" "assume true;" "130#L56")
		 ("125#L36" "assume !(main_~j~6 < main_~edgecount~6);" "131#L34''")
		 ("125#L36" "assume !!(main_~j~6 < main_~edgecount~6);" "132#L38")
		 ("127#L40'" "assume !(0 <= main_~y~6 && main_~y~6 < 5);" "133#ULTIMATE.startErr5AssertViolation")
		 ("127#L40'" "assume true;" "134#L40''")
	},
	returnTransitions = {
	}
);
*/