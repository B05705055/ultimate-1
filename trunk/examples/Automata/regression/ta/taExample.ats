// Example that demonstrates how to use tree automata in AutomataScript
// Authors: Mostafa Mahmoud Mohamed, Alexander Nutz
// Date: 2017-08-07


// Create a tree automaton via a constructor, assign it to the freshly declared
// variable "taLists".
// Intuitively, the new tree automaton accepts lists of natural numbers in 
// unary encoding. This example is inspired by Comon et al "Tree Automata 
// Techniques and Applications", Example 1.1.4
// For example the list [0, 0, 1] would be represented as the tree 
// (cons(elem("0"), cons(elem("0"), cons(elem(succ("0")), nil)))) 
TreeAutomaton taLists = TreeAutomaton (
    alphabet = { nil "0" cons succ elem },
    states = { Node Num List "_" },
    finalStates = { List },
    transitionTable = {
        ((Node List) cons List)
        (() "0" Num)
        (() nil List)
        ((Num) succ Num)
        ((Num) elem Node)
    }
);

// Constructs a tree that represents the list "[0, 1]", and assigns it to a
// variable called "list".
Tree list = Tree[cons(elem("0"), cons(elem(succ("0")), nil))];

// Check that taLists accepts list
assert(accepts(taLists, list));

// _____________________________________________________________________________

// Declare a second tree automaton that accepts binary trees whose nodes contain 
// natural numbers in unary encoding (like in the example above).
TreeAutomaton taBinaryTrees = TreeAutomaton(
    alphabet = { nil "0" cons succ elem },
    states = { Node Num BinTree "_" },
    finalStates = { BinTree },
    transitionTable = {
        (() "0" Num)
        ((Node BinTree BinTree) cons BinTree)
        ((Node BinTree) cons BinTree)
        (() nil BinTree)
        ((Num) succ Num)
        ((Num) elem Node)
    }
);


// Declare a tree of the following shape
//       1
//     /   \
//    0     -
//   /
//  -
Tree binaryTree = Tree[cons(elem(succ("0")), cons(elem("0"), nil), nil)];

// Check that the automaton "taBinaryTrees" accepts the tree "binaryTree"
assert(accepts(taBinaryTrees, binaryTree));

// _____________________________________________________________________________

// Check that the tree "list" from before is also a binary tree
assert(accepts(taBinaryTrees, list));

// Check that all lists accepted by tree automaton taLists are also accepted by 
// tree automaton taBinaryTrees.
// Uses the Boolean language operations for complement, intersection, and 
// check for emptiness.
assert(treeEmptinessCheck(intersect(taLists, complement(taBinaryTrees))));

