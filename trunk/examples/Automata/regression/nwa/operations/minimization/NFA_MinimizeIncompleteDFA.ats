// Author: Daniel Tischner
// Date: 2015-04-07
//
// Example usage of a minimization program for incomplete DFAs.

assert(!isEmpty(a));
//Before
//print(a);
//After
print(minimizeDfaHopcroftLists(a));

//Use a random automaton
//print(minimizeIncompleteDFA(removeDeadEnds(getRandomDfa(10, 2, 5))));

//Some example automaton

NestedWordAutomaton a = (
  callAlphabet = { },
  internalAlphabet = {a b c d},
  returnAlphabet = { },
  states = {q0 q1 q2 q3 q4 q5 q6 q7 q8},
  initialStates = {q0},
  finalStates = {q5 q6 q7 q8},
  callTransitions = {},
  internalTransitions = {
      (q0 a q4)
      (q0 b q3)
      (q0 c q2)
      (q0 d q1)
      (q1 a q1)
      (q1 b q1)
      (q1 c q2)
      (q1 d q1)
      (q2 a q2)
      (q2 b q2)
      (q2 c q2)
      (q2 d q1)
      (q3 a q4)
      (q3 b q3)
      (q3 c q5)
      (q3 d q6)
      (q4 a q4)
      (q4 b q3)
      (q4 c q5)
      (q4 d q6)
      (q5 a q5)
      (q5 b q6)
      (q5 c q7)
      (q5 d q8)
      (q6 a q5)
      (q6 b q6)
      (q6 c q7)
      (q6 d q8)
      (q7 a q5)
      (q7 b q6)
      (q7 c q7)
      (q7 d q8)
      (q8 a q5)
      (q8 b q6)
      (q8 c q7)
      (q8 d q8)
  }, 
  returnTransitions = {}
);

/*
NestedWordAutomaton a = (
  callAlphabet = { },
  internalAlphabet = {a b c},
  returnAlphabet = { },
  states = {q0 q1 q2 q3 q4},
  initialStates = {q0},
  finalStates = {q0 q1},
  callTransitions = {},
  internalTransitions = {
      (q0 b q0)
      (q0 a q1)
      (q0 c q4)
      (q1 c q1)
      (q1 b q0)
      (q1 a q3)
      (q2 c q2)
      (q2 b q0)
      (q2 a q3)
      (q3 a q2)
      (q3 c q2)
      (q4 c q2)
  }, 
  returnTransitions = {}
);
*/
/*
NestedWordAutomaton a = (
  callAlphabet = { },
  internalAlphabet = {a b c},
  returnAlphabet = { },
  states = {q0 q1 q2 q3},
  initialStates = {q0},
  finalStates = {q0 q1 q2 q3},
  callTransitions = {},
  internalTransitions = {
      (q0 a q1)
	  (q0 b q3)
	  (q0 c q2)
      (q1 a q0)
      (q1 b q3)
	  (q1 c q2)
      (q2 c q0)
      (q2 a q1)
	  (q2 b q3)
      (q3 b q0)
	  (q3 a q1)
	  (q3 c q2)
  }, 
  returnTransitions = {}
);
*/
/*
NestedWordAutomaton a = (
  callAlphabet = { },
  internalAlphabet = {a b},
  returnAlphabet = { },
  states = {q0 q1},
  initialStates = {q0},
  finalStates = {q0 q1},
  callTransitions = {},
  internalTransitions = {
      (q0 a q1)
      (q1 a q0)
  }, 
  returnTransitions = {}
);
*/
/*
NestedWordAutomaton a = (
  callAlphabet = { },
  internalAlphabet = {a b},
  returnAlphabet = { },
  states = {q0 q1 q2 q3},
  initialStates = {q0},
  finalStates = {q0 q2},
  callTransitions = {},
  internalTransitions = {
      (q0 a q1)
      (q1 b q2)
      (q2 a q3)
      (q3 b q0)
  }, 
  returnTransitions = {}
);
*/
/*
NestedWordAutomaton a = (
    callAlphabet = {},
    internalAlphabet = {"a" "b" },
    returnAlphabet = {},
    states = {"q1" "q2" "q3" "q0" },
    initialStates = {"q0" },
    finalStates = {"q1" "q2" },
    callTransitions = {
    },
    internalTransitions = {
         ("q3" "a" "q1")
         ("q0" "a" "q2")
         ("q0" "b" "q3")
    },
    returnTransitions = {
    }
);
*/
/*
NestedWordAutomaton a = (
    callAlphabet = {},
    internalAlphabet = {a },
    returnAlphabet = {},
    states = {q1 qs },
    initialStates = {q1 },
    finalStates = {q1 },
    callTransitions = {
    },
    internalTransitions = {
         (q1 a qs)
         (qs a qs)
    },
    returnTransitions = {
    }
);
*/