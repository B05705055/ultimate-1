// Some examples from terminationTraceAbstractionBlueGreen 
// and SizeChangeTermination2001
// Author: heizmann@informatik.uni-freiburg.de
// Date: 13.8.2012

assert(buchiIsEmpty(buchiReduce(buchiComplementSVW(infeasible))));
assert(buchiIsEmpty(buchiReduce(buchiComplementFKV(infeasible))));

assert(!buchiIsEmpty(buchiReduce(buchiComplementSVW(infeasibleN))));
assert(!buchiIsEmpty(buchiReduce(buchiComplementFKV(infeasibleN))));

assert(!buchiIsEmpty(buchiReduce(buchiComplementSVW(manualIA1))));
assert(!buchiIsEmpty(buchiReduce(buchiComplementFKV(manualIA1))));

assert(!buchiIsEmpty(buchiReduce(buchiComplementSVW(manualIA2))));
assert(!buchiIsEmpty(buchiReduce(buchiComplementFKV(manualIA2))));

assert(!buchiIsEmpty(buchiReduce(buchiComplementSVW(interpolantAutomaton1))));
assert(!buchiIsEmpty(buchiReduce(buchiComplementFKV(interpolantAutomaton1))));

assert(!buchiIsEmpty(buchiReduce(buchiComplementSVW(interpolantAutomaton2))));
assert(!buchiIsEmpty(buchiReduce(buchiComplementFKV(interpolantAutomaton2))));

assert(!buchiIsEmpty(buchiReduce(buchiComplementSVW(interpolantAutomaton3))));
assert(!buchiIsEmpty(buchiReduce(buchiComplementFKV(interpolantAutomaton3))));

assert(!buchiIsEmpty(buchiReduce(buchiComplementSVW(interpolantAutomaton4))));
assert(!buchiIsEmpty(buchiReduce(buchiComplementFKV(interpolantAutomaton4))));

assert(!buchiIsEmpty(buchiReduce(buchiComplementSVW(interpolantAutomaton5))));
assert(!buchiIsEmpty(buchiReduce(buchiComplementFKV(interpolantAutomaton5))));

assert(!buchiIsEmpty(buchiReduce(buchiComplementSVW(interpolantAutomaton6))));
assert(!buchiIsEmpty(buchiReduce(buchiComplementFKV(interpolantAutomaton6))));



NestedWordAutomaton infeasible = (
  callAlphabet = { },
  internalAlphabet = { "1" "2" "3"},
  returnAlphabet = { },
  states = {init m mStrict n nStrict},
  initialStates = {init},
  finalStates = {mStrict nStrict},
  callTransitions = { },
  internalTransitions = { 
    (init "1" init) (init "2" init) (init "3" init) 
    (init "1" m) (init "2" m) (init "3" m) 
    (init "1" n) (init "2" n) (init "3" n) 
    (m "3" m)
    (m "1" mStrict) (m "2" mStrict)
    (mStrict "1" mStrict) (mStrict "2" mStrict)
    (mStrict "3" m)
    (n "3" nStrict)
    (nStrict "3" n)
  }, 
  returnTransitions = { }
);

NestedWordAutomaton infeasibleN = (
  callAlphabet = { },
  internalAlphabet = { "1" "2" "3"},
  returnAlphabet = { },
  states = {init n nStrict},
  initialStates = {init},
  finalStates = {nStrict},
  callTransitions = { },
  internalTransitions = { 
    (init "1" init) (init "2" init) (init "3" init) 
    (init "1" n) (init "2" n) (init "3" n) 
    (n "3" nStrict)
    (nStrict "3" n)
  }, 
  returnTransitions = { }
);




NestedWordAutomaton manualIA1 = (
  callAlphabet = { },
  internalAlphabet = {blue green},
  returnAlphabet = { },
  states = {"rk=inf" "y<rk A"},
  initialStates = {"rk=inf"},
  finalStates = {"y<rk A"},
  callTransitions = {},
  internalTransitions = {
    ("rk=inf" blue "rk=inf") ("rk=inf" green "rk=inf")
    ("rk=inf" blue "y<rk A") 
    ("y<rk A" blue "y<rk A")
  }, 
  returnTransitions = {}
);


NestedWordAutomaton manualIA2 = (
  callAlphabet = { },
  internalAlphabet = {blue green},
  returnAlphabet = { },
  states = {"rk=inf" "x<rk A" "x<=rk"},
  initialStates = {"rk=inf"},
  finalStates = {"x<rk A"},
  callTransitions = {},
  internalTransitions = {
    ("rk=inf" green "rk=inf") ("rk=inf" blue "rk=inf") 
    ("rk=inf" green "x<rk A") 
    ("x<rk A" green "x<=rk") ("x<rk A" blue "x<=rk")
    ("x<=rk" green "x<rk A") ("x<=rk" blue "x<=rk")
  }, 
  returnTransitions = {}
);





NestedWordAutomaton interpolantAutomaton1 = (
  callAlphabet = { },
  internalAlphabet = {blue green},
  returnAlphabet = { },
  states = {"rk=inf" "x<rk A"},
  initialStates = {"rk=inf"},
  finalStates = {"x<rk A"},
  callTransitions = {},
  internalTransitions = {
    ("rk=inf" blue "rk=inf") 
    ("rk=inf" blue "x<rk A") 
    ("x<rk A" blue "x<rk A")
  }, 
  returnTransitions = {}
);


NestedWordAutomaton interpolantAutomaton2 = (
  callAlphabet = { },
  internalAlphabet = {blue green},
  returnAlphabet = { },
  states = {"rk=inf" "y<rk A" "y<rk"},
  initialStates = {"rk=inf"},
  finalStates = {"y<rk A"},
  callTransitions = {},
  internalTransitions = {
    ("rk=inf" green "rk=inf") 
    ("rk=inf" green "y<rk A") 
    ("y<rk A" blue "y<rk")
    ("y<rk" blue "y<rk A")
  }, 
  returnTransitions = {}
);



NestedWordAutomaton interpolantAutomaton3 = (
  callAlphabet = { },
  internalAlphabet = {blue green},
  returnAlphabet = { },
  states = {"rk=inf" "x<rk A" "x<rk"},
  initialStates = {"rk=inf"},
  finalStates = {"x<rk A"},
  callTransitions = {},
  internalTransitions = {
    ("rk=inf" green "rk=inf") 
    ("rk=inf" green "x<rk A") 
    ("x<rk A" green "x<rk")
    ("x<rk" green "x<rk A")
    ("x<rk A" green "x<rk A")
    ("x<rk" green "x<rk")
  }, 
  returnTransitions = {}
);



NestedWordAutomaton interpolantAutomaton4 = (
  callAlphabet = { },
  internalAlphabet = {blue green},
  returnAlphabet = { },
  states = {"rk=inf" "y<rk A" "y<rk"},
  initialStates = {"rk=inf"},
  finalStates = {"y<rk A"},
  callTransitions = {},
  internalTransitions = {
    ("rk=inf" blue "rk=inf")
    ("rk=inf" green "rk=inf")
    ("rk=inf" green "y<rk A") 
    ("y<rk A" blue "y<rk")
    ("y<rk" blue "y<rk A")
    ("y<rk A" blue "y<rk A")
    ("y<rk" blue "y<rk")
  }, 
  returnTransitions = {}
);


NestedWordAutomaton interpolantAutomaton5 = (
  callAlphabet = { },
  internalAlphabet = {blue green},
  returnAlphabet = { },
  states = {"rk=inf" "x<rk A" "x<rk"},
  initialStates = {"rk=inf"},
  finalStates = {"x<rk A"},
  callTransitions = {},
  internalTransitions = {
    ("rk=inf" blue "rk=inf")
    ("rk=inf" green "rk=inf")
    ("rk=inf" green "x<rk A") 
    ("x<rk A" green "x<rk")
    ("x<rk" green "x<rk A")
    ("x<rk A" green "x<rk A")
    ("x<rk" green "x<rk")
    ("x<rk" blue "x<rk")
  }, 
  returnTransitions = {}
);

NestedWordAutomaton interpolantAutomaton6 = (
  callAlphabet = { },
  internalAlphabet = {blue green},
  returnAlphabet = { },
  states = {"rk=inf" "x<rk A" "x<rk"},
  initialStates = {"rk=inf"},
  finalStates = {"x<rk A"},
  callTransitions = {},
  internalTransitions = {
    ("rk=inf" blue "rk=inf")
    ("rk=inf" green "rk=inf")
    ("rk=inf" green "x<rk A") 
    ("x<rk A" green "x<rk")
    ("x<rk A" blue "x<rk")
    ("x<rk" green "x<rk A")
    ("x<rk A" green "x<rk A")
    ("x<rk" green "x<rk")
    ("x<rk" blue "x<rk")
  }, 
  returnTransitions = {}
);
