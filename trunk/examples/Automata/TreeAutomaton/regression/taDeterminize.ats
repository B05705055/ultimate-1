
TreeAutomaton taIntList = (
    alphabet = { nil "0" cons succ },
    states = { Num List "_" },
    initialStates = { "_" },
    finalStates = { List },
    transitionTable = {
        ((Num) succ Num)
        (("_") "0" Num)
        ((Num List) cons List)
        (("_") nil List)
    }
);

TreeAutomaton taEvenIntList = (
    alphabet = { nil "0" cons succ },
    states = { OddNum EvenNum List "_" },
    initialStates = { "_" },
    finalStates = { List },
    transitionTable = {
        ((OddNum) succ EvenNum)
        ((EvenNum) succ OddNum)
        (("_") "0" EvenNum)
        ((EvenNum List) cons List)
        (("_") nil List)
    }
);


TreeAutomaton taMul3IntList = (
    alphabet = { nil "0" cons succ },
    states = { mod1 mod2 mod0 List "_" },
    initialStates = { "_" },
    finalStates = { List },
    transitionTable = {
        ((mod2) succ mod0)
        ((mod1) succ mod2)
        ((mod0) succ mod1)
        (("_") "0" mod0)
        ((mod0 List) cons List)
        (("_") nil List)
    }
);


// [[]]
Tree list0 = Tree [cons(nil,nil)];
// [2, 1]
Tree listA = Tree [cons(succ(succ("0")),cons(succ("0"),nil))];
// [2, 0]
Tree listB = Tree [cons(succ(succ("0")),cons("0",nil))];
// [2, 4]
Tree listC = Tree [cons(succ(succ("0")),cons(succ(succ(succ(succ("0")))),nil))];
// [3, 0]
Tree listD = Tree [cons(succ(succ(succ("0"))),cons("0",nil))];
// [6, 12]
Tree listE = Tree [cons(succ(succ(succ(succ(succ(succ("0")))))),cons(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ("0")))))))))))),nil))];


// Not lists of integers
assert(!accepts(taIntList, list0));
assert(!accepts(taEvenIntList, list0));
assert(!accepts(taMul3IntList, list0));
assert(!accepts(Determinize(taIntList), list0));
assert(!accepts(Determinize(taEvenIntList), list0));
assert(!accepts(Determinize(taMul3IntList), list0));

assert(!accepts(Determinize(taIntList), Tree["0"]));
assert(!accepts(taIntList, Tree["0"]));

// taIntList accepts all integer lists
assert(accepts(taIntList, listA));
assert(accepts(taIntList, listB));
assert(accepts(taIntList, listC));
assert(accepts(taIntList, listD));
assert(accepts(taIntList, listE));
assert(accepts(Determinize(taIntList), listA));
assert(accepts(Determinize(taIntList), listB));
assert(accepts(Determinize(taIntList), listC));
assert(accepts(Determinize(taIntList), listD));
assert(accepts(Determinize(taIntList), listE));

// taEvenList accepts only lists of even numbers
assert(!accepts(taEvenIntList, listA));
assert(accepts(taEvenIntList, listB));
assert(accepts(taEvenIntList, listC));
assert(!accepts(taEvenIntList, listD));
assert(accepts(taEvenIntList, listE));
assert(!accepts(Determinize(taEvenIntList), listA));
assert(accepts(Determinize(taEvenIntList), listB));
assert(accepts(Determinize(taEvenIntList), listC));
assert(!accepts(Determinize(taEvenIntList), listD));
assert(accepts(Determinize(taEvenIntList), listE));

// taMul3IntList accepts only lists of multiples of 3
assert(!accepts(taMul3IntList, listA));
assert(!accepts(taMul3IntList, listB));
assert(!accepts(taMul3IntList, listC));
assert(accepts(taMul3IntList, listD));
assert(accepts(taMul3IntList, listE));
assert(!accepts(Determinize(taMul3IntList), listA));
assert(!accepts(Determinize(taMul3IntList), listB));
assert(!accepts(Determinize(taMul3IntList), listC));
assert(accepts(Determinize(taMul3IntList), listD));
assert(accepts(Determinize(taMul3IntList), listE));

