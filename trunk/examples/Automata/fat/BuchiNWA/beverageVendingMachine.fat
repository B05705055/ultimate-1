// Author: heizmann@informatik.uni-freiburg.de
// Date: 2.8.2011

#Print beverageVendingMachine
//#Print alwaysDispenceSpecification
//#AcceptsBuchi beverageVendingMachine [, select paidInsufficient]
//#NotAcceptsBuchi alwaysDispenceSpecification [, select paidInsufficient]
//#AcceptsBuchi buchiComplementFKV(alwaysDispenceSpecification) [, select paidInsufficient]

#IsNotEmptyBuchi buchiIntersect(beverageVendingMachine buchiComplementFKV(alwaysDispenceSpecification))

#nwa beverageVendingMachine := (
  #callAlphabet := {},
  #internalAlphabet := { select paidSufficient paidInsufficient dispence },
  #returnAlphabet := {},
  #states := {idle checkPayment paymentChecked},
  #initialStates := {idle},
  #finalStates := {idle checkPayment paymentChecked},
  #callTransitions := {},
  #internalTransitions := {
    (idle select checkPayment) 
    (checkPayment paidSufficient paymentChecked)
    (checkPayment paidInsufficient idle)
    (paymentChecked dispence idle)
  }, 
  #returnTransitions := {}
)


#nwa alwaysDispenceSpecification := (
  #callAlphabet := {},
  #internalAlphabet := { select paidSufficient paidInsufficient dispence },
  #returnAlphabet := {},
  #states := {notSelected selected},
  #initialStates := {notSelected},
  #finalStates := {notSelected},
  #callTransitions := {},
  #internalTransitions := {
    (notSelected paidSufficient notSelected) 
    (notSelected paidInsufficient notSelected) 
    (notSelected dispence notSelected) 
    (notSelected select selected)
    (selected select selected) 
    (selected paidSufficient selected) 
    (selected paidInsufficient selected) 
    (selected dispence notSelected) 
 }, 
  #returnTransitions := {}
)