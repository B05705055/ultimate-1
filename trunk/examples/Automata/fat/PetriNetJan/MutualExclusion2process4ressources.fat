// Models a system of two processes p1,p1 that want to access the four
// ressources a,b,c,d.
// If we say the system is correct if both can not access ressources a at the
// same time, the system is correct iff the language accepted by the following
// concurrent product(s) is empty.
// 
// 20.1.2011 heizmann@informatik.uni-freiburg.de


#IsEmpty concurrentProductAutomaton(p1
      concurrentProductAutomaton(p2
      concurrentProductAutomaton(aRessourceManager
      concurrentProductAutomaton(bRessourceManager
      concurrentProductAutomaton(cRessourceManager
      dRessourceManager)))))


#Print concurrentProductAutomaton(p1
      concurrentProductAutomaton(p2
      concurrentProductAutomaton(aRessourceManager
      concurrentProductAutomaton(bRessourceManager
      concurrentProductAutomaton(cRessourceManager
      dRessourceManager)))))

#nwa p1 := (
  #callAlphabet := {},
  #internalAlphabet := {
	p1REQa p1RELa 
	p1REQb p1RELb
	p1REQc p1RELc 
	p1REQd p1RELd
      },
  #returnAlphabet := {},
  #states := {p1init p1a p1b p1c p1d},
  #initialStates := {p1init},
  #finalStates := {p1a},
  #callTransitions := {},
  #internalTransitions := {
    (p1init p1REQa p1a) (p1a p1RELa p1init)
    (p1init p1REQb p1b) (p1b p1RELb p1init)
    (p1init p1REQc p1c) (p1c p1RELc p1init)
    (p1init p1REQd p1d) (p1d p1RELd p1init)
}, 
  #returnTransitions := {}
)

#nwa p2 := (
  #callAlphabet := {},
  #internalAlphabet := {
	p2REQa p2RELa
	p2REQb p2RELb
	p2REQc p2RELc 
	p2REQd p2RELd
      },
  #returnAlphabet := {},
  #states := {p2init p2a p2b p2c p2d},
  #initialStates := {p2init},
  #finalStates := {p2a},
  #callTransitions := {},
  #internalTransitions := {
    (p2init p2REQa p2a) (p2a p2RELa p2init)
    (p2init p2REQb p2b) (p2b p2RELb p2init)
    (p2init p2REQc p2c) (p2c p2RELc p2init)
    (p2init p2REQd p2d) (p2d p2RELd p2init)

}, 
  #returnTransitions := {}
)




#nwa aRessourceManager := (
  #callAlphabet := {},
  #internalAlphabet := {
	p1REQa p1RELa p2REQa p2RELa 
	p1REQb p1RELb p2REQb p2RELb 
	p1REQc p1RELc p2REQc p2RELc 
	p1REQd p1RELd p2REQd p2RELd 
      },
  #returnAlphabet := {},
  #states := {aFree aLocked},
  #initialStates := {aFree},
  #finalStates := {aFree aLocked},
  #callTransitions := {},
  #internalTransitions := {
    (aFree p1REQa aLocked) (aLocked p1RELa aFree)
    (aFree p2REQa aLocked) (aLocked p2RELa aFree)

    (aFree p1REQb aFree) (aLocked p1REQb aLocked) (aFree p1RELb aFree) (aLocked p1RELb aLocked)
    (aFree p2REQb aFree) (aLocked p2REQb aLocked) (aFree p2RELb aFree) (aLocked p2RELb aLocked)

    (aFree p1REQc aFree) (aLocked p1REQc aLocked) (aFree p1RELc aFree) (aLocked p1RELc aLocked)
    (aFree p2REQc aFree) (aLocked p2REQc aLocked) (aFree p2RELc aFree) (aLocked p2RELc aLocked)

    (aFree p1REQd aFree) (aLocked p1REQd aLocked) (aFree p1RELd aFree) (aLocked p1RELd aLocked)
    (aFree p2REQd aFree) (aLocked p2REQd aLocked) (aFree p2RELd aFree) (aLocked p2RELd aLocked)
}, 
  #returnTransitions := {}
)


#nwa bRessourceManager := (
  #callAlphabet := {},
  #internalAlphabet := {
	p1REQa p1RELa p2REQa p2RELa 
	p1REQb p1RELb p2REQb p2RELb 
	p1REQc p1RELc p2REQc p2RELc 
	p1REQd p1RELd p2REQd p2RELd 
      },
  #returnAlphabet := {},
  #states := {bFree bLocked},
  #initialStates := {bFree},
  #finalStates := {bFree bLocked},
  #callTransitions := {},
  #internalTransitions := {
    (bFree p1REQa bFree) (bLocked p1REQa bLocked) (bFree p1RELa bFree) (bLocked p1RELa bLocked)
    (bFree p2REQa bFree) (bLocked p2REQa bLocked) (bFree p2RELa bFree) (bLocked p2RELa bLocked)

    (bFree p1REQb bLocked) (bLocked p1RELb bFree)
    (bFree p2REQb bLocked) (bLocked p2RELb bFree)

    (bFree p1REQc bFree) (bLocked p1REQc bLocked) (bFree p1RELc bFree) (bLocked p1RELc bLocked)
    (bFree p2REQc bFree) (bLocked p2REQc bLocked) (bFree p2RELc bFree) (bLocked p2RELc bLocked)

    (bFree p1REQd bFree) (bLocked p1REQd bLocked) (bFree p1RELd bFree) (bLocked p1RELd bLocked)
    (bFree p2REQd bFree) (bLocked p2REQd bLocked) (bFree p2RELd bFree) (bLocked p2RELd bLocked)
}, 
  #returnTransitions := {}
)



#nwa cRessourceManager := (
  #callAlphabet := {},
  #internalAlphabet := {
	p1REQa p1RELa p2REQa p2RELa 
	p1REQb p1RELb p2REQb p2RELb 
	p1REQc p1RELc p2REQc p2RELc 
	p1REQd p1RELd p2REQd p2RELd 
      },
  #returnAlphabet := {},
  #states := {cFree cLocked},
  #initialStates := {cFree},
  #finalStates := {cFree cLocked},
  #callTransitions := {},
  #internalTransitions := {
    (cFree p1REQa cFree) (cLocked p1REQa cLocked) (cFree p1RELa cFree) (cLocked p1RELa cLocked)
    (cFree p2REQa cFree) (cLocked p2REQa cLocked) (cFree p2RELa cFree) (cLocked p2RELa cLocked)

    (cFree p1REQb cFree) (cLocked p1REQb cLocked) (cFree p1RELb cFree) (cLocked p1RELb cLocked)
    (cFree p2REQb cFree) (cLocked p2REQb cLocked) (cFree p2RELb cFree) (cLocked p2RELb cLocked)

    (cFree p1REQc cLocked) (cLocked p1RELc cFree)
    (cFree p2REQc cLocked) (cLocked p2RELc cFree)

    (cFree p1REQd cFree) (cLocked p1REQd cLocked) (cFree p1RELd cFree) (cLocked p1RELd cLocked)
    (cFree p2REQd cFree) (cLocked p2REQd cLocked) (cFree p2RELd cFree) (cLocked p2RELd cLocked)
}, 
  #returnTransitions := {}
)


#nwa dRessourceManager := (
  #callAlphabet := {},
  #internalAlphabet := {
	p1REQa p1RELa p2REQa p2RELa 
	p1REQb p1RELb p2REQb p2RELb 
	p1REQc p1RELc p2REQc p2RELc 
	p1REQd p1RELd p2REQd p2RELd 
      },
  #returnAlphabet := {},
  #states := {dFree dLocked},
  #initialStates := {dFree},
  #finalStates := {dFree dLocked},
  #callTransitions := {},
  #internalTransitions := {
    (dFree p1REQa dFree) (dLocked p1REQa dLocked) (dFree p1RELa dFree) (dLocked p1RELa dLocked)
    (dFree p2REQa dFree) (dLocked p2REQa dLocked) (dFree p2RELa dFree) (dLocked p2RELa dLocked)

    (dFree p1REQb dFree) (dLocked p1REQb dLocked) (dFree p1RELb dFree) (dLocked p1RELb dLocked)
    (dFree p2REQb dFree) (dLocked p2REQb dLocked) (dFree p2RELb dFree) (dLocked p2RELb dLocked)

    (dFree p1REQc dFree) (dLocked p1REQc dLocked) (dFree p1RELc dFree) (dLocked p1RELc dLocked)
    (dFree p2REQc dFree) (dLocked p2REQc dLocked) (dFree p2RELc dFree) (dLocked p2RELc dLocked)

    (dFree p1REQd dLocked) (dLocked p1RELd dFree)
    (dFree p2REQd dLocked) (dLocked p2RELd dFree)
}, 
  #returnTransitions := {}
)


