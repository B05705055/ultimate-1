
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 26 17:08:17 CEST 2013
//----------------------------------------------------

package de.uni_freiburg.informatik.ultimate.LTL2aut;

import java_cup.runtime.*;
import de.uni_freiburg.informatik.ultimate.LTL2aut.ast.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 26 17:08:17 CEST 2013
  */
public class parserAP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserAP() {super();}

  /** Constructor which sets the default scanner. */
  public parserAP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserAP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\003\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\003" +
    "\000\002\002\003\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\004\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\004\020\005\001\002\000\004\002\037\001" +
    "\002\000\004\004\006\001\002\000\016\005\013\010\007" +
    "\016\012\017\015\020\017\021\010\001\002\000\012\005" +
    "\013\010\007\020\017\021\010\001\002\000\022\002\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\001\002\000\022\002\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\001\002\000\004\002" +
    "\ufffc\001\002\000\012\005\013\010\007\020\017\021\010" +
    "\001\002\000\004\002\000\001\002\000\004\002\ufffb\001" +
    "\002\000\016\007\023\010\024\011\025\012\022\013\020" +
    "\014\021\001\002\000\022\002\ufff3\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\001\002\000\012" +
    "\005\013\010\007\020\017\021\010\001\002\000\012\005" +
    "\013\010\007\020\017\021\010\001\002\000\012\005\013" +
    "\010\007\020\017\021\010\001\002\000\012\005\013\010" +
    "\007\020\017\021\010\001\002\000\012\005\013\010\007" +
    "\020\017\021\010\001\002\000\012\005\013\010\007\020" +
    "\017\021\010\001\002\000\022\002\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\001\002\000" +
    "\022\002\ufff9\006\ufff9\007\ufff9\010\ufff9\011\025\012\ufff9" +
    "\013\ufff9\014\ufff9\001\002\000\022\002\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\025\012\ufffa\013\ufffa\014\ufffa\001\002" +
    "\000\012\002\uffff\007\023\010\024\011\025\001\002\000" +
    "\012\002\ufffd\007\023\010\024\011\025\001\002\000\012" +
    "\002\ufffe\007\023\010\024\011\025\001\002\000\012\006" +
    "\035\007\023\010\024\011\025\001\002\000\022\002\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\001\002\000\022\002\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\013\004\010\005\015\001\001" +
    "\000\006\004\010\005\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\010\005\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\010\005\032\001\001" +
    "\000\006\004\010\005\031\001\001\000\006\004\010\005" +
    "\030\001\001\000\006\004\010\005\027\001\001\000\006" +
    "\004\010\005\026\001\001\000\006\004\010\005\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserAP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserAP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserAP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserAP$actions {
  private final parserAP parser;

  /** Constructor */
  CUP$parserAP$actions(parserAP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserAP$do_action(
    int                        CUP$parserAP$act_num,
    java_cup.runtime.lr_parser CUP$parserAP$parser,
    java.util.Stack            CUP$parserAP$stack,
    int                        CUP$parserAP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserAP$result;

      /* select the action based on the action number */
      switch (CUP$parserAP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // name ::= NAME 
            {
              AstNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parserAP$stack.peek()).value;
		 RESULT = new Name(m); 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("name",2, ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= INT 
            {
              AstNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$parserAP$stack.peek()).value;
		 RESULT = new IntLiteral(i); 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= name 
            {
              AstNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).right;
		AstNode n = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.peek()).value;
		 RESULT = n; 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= LPAR expr RPAR 
            {
              AstNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-1)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.elementAt(CUP$parserAP$top-1)).value;
		 RESULT = e1; 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= MINUS expr 
            {
              AstNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.peek()).value;
		 RESULT = RESULT = new IntLiteral(((IntLiteral)e1).getValue() * -1); 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-1)), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr TIMES expr 
            {
              AstNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).right;
		AstNode e2 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.peek()).value;
		 RESULT = new BinaryOperator(BinaryType.times, e1, e2); 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr MINUS expr 
            {
              AstNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).right;
		AstNode e2 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.peek()).value;
		 RESULT = new BinaryOperator(BinaryType.minus, e1, e2); 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr PLUS expr 
            {
              AstNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).right;
		AstNode e2 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.peek()).value;
		 RESULT = new BinaryOperator(BinaryType.plus, e1, e2); 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ap ::= FALSE 
            {
              AstNode RESULT =null;
		 RESULT = new BoolLiteral(false); 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("ap",0, ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ap ::= TRUE 
            {
              AstNode RESULT =null;
		 RESULT = new BoolLiteral(true); 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("ap",0, ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ap ::= expr GEQ expr 
            {
              AstNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).right;
		AstNode e2 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.peek()).value;
		 RESULT = new ComperativeOperator(ComperativeType.geq, e1, e2); 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("ap",0, ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ap ::= expr GREATER expr 
            {
              AstNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).right;
		AstNode e2 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.peek()).value;
		 RESULT = new ComperativeOperator(ComperativeType.greater, e1, e2); 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("ap",0, ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ap ::= expr EQUALS expr 
            {
              AstNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).right;
		AstNode e2 = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.peek()).value;
		 RESULT = new ComperativeOperator(ComperativeType.equals, e1, e2); 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("ap",0, ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // assign ::= NAME COLON ap 
            {
              AstNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.peek()).value;
		 RESULT = new AtomicProposition(n, a); 
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("assign",1, ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-2)), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          return CUP$parserAP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= assign EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-1)).right;
		AstNode start_val = (AstNode)((java_cup.runtime.Symbol) CUP$parserAP$stack.elementAt(CUP$parserAP$top-1)).value;
		RESULT = start_val;
              CUP$parserAP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserAP$stack.elementAt(CUP$parserAP$top-1)), ((java_cup.runtime.Symbol)CUP$parserAP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserAP$parser.done_parsing();
          return CUP$parserAP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

