
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 18 16:46:28 CEST 2013
//----------------------------------------------------

package de.uni_freiburg.informatik.ultimate.LTL2aut;

import java.util.ArrayList;

import de.uni_freiburg.informatik.ultimate.LTL2aut.ast.AstNode;
import de.uni_freiburg.informatik.ultimate.LTL2aut.ast.BinaryOperator;
import de.uni_freiburg.informatik.ultimate.LTL2aut.ast.BinaryType;
import de.uni_freiburg.informatik.ultimate.LTL2aut.ast.BoolLiteral;
import de.uni_freiburg.informatik.ultimate.LTL2aut.ast.ConditionalBlock;
import de.uni_freiburg.informatik.ultimate.LTL2aut.ast.GotoStatement;
import de.uni_freiburg.informatik.ultimate.LTL2aut.ast.LabeledBlock;
import de.uni_freiburg.informatik.ultimate.LTL2aut.ast.Name;
import de.uni_freiburg.informatik.ultimate.LTL2aut.ast.NeverStatement;
import de.uni_freiburg.informatik.ultimate.LTL2aut.ast.Not;
import de.uni_freiburg.informatik.ultimate.LTL2aut.ast.OptionStatement;
import de.uni_freiburg.informatik.ultimate.LTL2aut.ast.SkipStatement;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 18 16:46:28 CEST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\003\006\000\002\012" +
    "\004\000\002\012\003\000\002\002\003\000\002\004\010" +
    "\000\002\004\005\000\002\011\011\000\002\011\010\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\005\000\002\005\003\000\002\007\005\000\002\007" +
    "\005\000\002\010\005\000\002\010\005\000\002\006\003" +
    "\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\004\004\005\001\002\000\004\002\054\001" +
    "\002\000\004\005\006\001\002\000\004\024\012\001\002" +
    "\000\004\006\053\001\002\000\006\006\ufffe\024\012\001" +
    "\002\000\004\015\013\001\002\000\016\010\ufffd\013\ufffd" +
    "\015\ufffd\017\ufffd\020\ufffd\022\ufffd\001\002\000\006\007" +
    "\015\011\014\001\002\000\006\006\ufffb\024\ufffb\001\002" +
    "\000\004\015\017\001\002\000\004\010\050\001\002\000" +
    "\004\015\020\001\002\000\012\016\023\021\024\023\030" +
    "\024\012\001\002\000\010\013\044\017\032\020\033\001" +
    "\002\000\012\013\uffef\017\uffef\020\uffef\022\uffef\001\002" +
    "\000\012\013\uffee\017\uffee\020\uffee\022\uffee\001\002\000" +
    "\012\016\023\021\024\023\030\024\012\001\002\000\012" +
    "\013\ufff4\017\ufff4\020\ufff4\022\ufff4\001\002\000\012\013" +
    "\ufff7\017\ufff7\020\040\022\ufff7\001\002\000\012\013\ufff8" +
    "\017\036\020\ufff8\022\ufff8\001\002\000\012\016\023\021" +
    "\024\023\030\024\012\001\002\000\012\013\ufff6\017\ufff6" +
    "\020\ufff6\022\ufff6\001\002\000\012\016\023\021\024\023" +
    "\030\024\012\001\002\000\012\016\023\021\024\023\030" +
    "\024\012\001\002\000\012\013\ufff0\017\ufff0\020\ufff0\022" +
    "\ufff0\001\002\000\012\013\ufff2\017\ufff2\020\ufff2\022\ufff2" +
    "\001\002\000\012\016\023\021\024\023\030\024\012\001" +
    "\002\000\012\013\ufff3\017\ufff3\020\ufff3\022\ufff3\001\002" +
    "\000\012\016\023\021\024\023\030\024\012\001\002\000" +
    "\012\013\ufff1\017\ufff1\020\ufff1\022\ufff1\001\002\000\010" +
    "\017\032\020\033\022\043\001\002\000\012\013\ufff5\017" +
    "\ufff5\020\ufff5\022\ufff5\001\002\000\004\012\045\001\002" +
    "\000\004\024\012\001\002\000\006\010\ufff9\015\017\001" +
    "\002\000\004\010\ufffa\001\002\000\004\014\051\001\002" +
    "\000\006\006\ufffc\024\ufffc\001\002\000\004\006\uffff\001" +
    "\002\000\004\002\000\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\010\004\007\012\006\001\001" +
    "\000\002\001\001\000\010\002\010\004\007\012\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\021\005\020\006\024" +
    "\007\026\010\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\021\005\041\006\024" +
    "\007\026\010\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\021\005\030\006\024" +
    "\007\026\010\025\001\001\000\002\001\001\000\014\002" +
    "\021\005\034\006\024\007\026\010\025\001\001\000\014" +
    "\002\021\005\033\006\024\007\026\010\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\021\005\036" +
    "\006\024\007\026\010\025\001\001\000\002\001\001\000" +
    "\014\002\021\005\040\006\024\007\026\010\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\045\001\001\000\004\011\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ap ::= TRUE 
            {
              AstNode RESULT =null;
		RESULT = new BoolLiteral(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ap ::= name 
            {
              AstNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode n = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // or ::= prop OR prop 
            {
              AstNode RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNode p1 = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode p2 = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		BinaryOperator a = new BinaryOperator(BinaryType.or);
		a.addOutgoing(p1);
		a.addOutgoing(p2);
		RESULT = a;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // or ::= or OR prop 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode p = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		a.addOutgoing(p);
		RESULT = a;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // and ::= prop AND prop 
            {
              AstNode RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNode p1 = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode p2 = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		BinaryOperator a = new BinaryOperator(BinaryType.and);
		a.addOutgoing(p1);
		a.addOutgoing(p2);
		RESULT = a;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // and ::= and AND prop 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode p = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		a.addOutgoing(p);
		RESULT = a;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // prop ::= ap 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // prop ::= LPAR prop RPAR 
            {
              AstNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AstNode p = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // prop ::= NOT prop 
            {
              AstNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode p = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // prop ::= or 
            {
              AstNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode o = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // prop ::= and 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // options ::= COLON COLON prop TO GOTO name 
            {
              ArrayList<AstNode> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AstNode n = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode m = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		ArrayList<AstNode> l = new ArrayList<AstNode>();
		l.add(new OptionStatement(n,new GotoStatement(m)));
		RESULT = l;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("options",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // options ::= COLON COLON prop TO GOTO name options 
            {
              ArrayList<AstNode> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AstNode n = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AstNode m = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<AstNode> o = (ArrayList<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		o.add(0,new OptionStatement(n,new GotoStatement(m)));
		RESULT = o;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("options",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lblock ::= name COLON SKIP 
            {
              AstNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNode n = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
		RESULT = new LabeledBlock(n, new SkipStatement()); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lblock",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lblock ::= name COLON IF options FI SEMICOLON 
            {
              AstNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AstNode n = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<AstNode> o = (ArrayList<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		ConditionalBlock cb = new ConditionalBlock(o);
		RESULT = new LabeledBlock(n, cb);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lblock",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // name ::= NAME 
            {
              AstNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Name(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtlist ::= lblock 
            {
              ArrayList<AstNode> RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNode b1 = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		ArrayList<AstNode> l = new ArrayList<AstNode>();
		l.add(b1);
		RESULT = l;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtlist ::= lblock stmtlist 
            {
              ArrayList<AstNode> RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AstNode b1 = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<AstNode> b2 = (ArrayList<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		b2.add(0,b1);
		RESULT = b2;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // claim ::= NEVER LCB stmtlist RCB 
            {
              AstNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<AstNode> s = (ArrayList<AstNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		NeverStatement n = new NeverStatement();
		n.addAllOutgoing(s);
		RESULT = n;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claim",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= claim EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AstNode start_val = (AstNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

