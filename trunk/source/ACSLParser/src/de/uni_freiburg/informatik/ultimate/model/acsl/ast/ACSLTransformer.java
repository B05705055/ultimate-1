/* ACSLTransformer -- Automatically generated by TreeBuilder */

package de.uni_freiburg.informatik.ultimate.model.acsl.ast;

/**
 * 
 */
public class ACSLTransformer {
    /**
     * The default constructor.
     */
    public ACSLTransformer() {
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        return "ACSLTransformer";
    }

    public OldValueExpression transform(OldValueExpression node) {
        return node;
    }

    public LogicFunction transform(LogicFunction node) {
        return node;
    }

    public FunctionApplication transform(FunctionApplication node) {
        return node;
    }

    public LoopAnnot transform(LoopAnnot node) {
        return node;
    }

    public Predicate transform(Predicate node) {
        return node;
    }

    public ValidExpression transform(ValidExpression node) {
        return node;
    }

    public BinaryExpression transform(BinaryExpression node) {
        return node;
    }

    public FieldAccessExpression transform(FieldAccessExpression node) {
        return node;
    }

    public ResultExpression transform(ResultExpression node) {
        return node;
    }

    public Assumes transform(Assumes node) {
        return node;
    }

    public WildcardExpression transform(WildcardExpression node) {
        return node;
    }

    public Behavior transform(Behavior node) {
        return node;
    }

    public Ensures transform(Ensures node) {
        return node;
    }

    public Terminates transform(Terminates node) {
        return node;
    }

    public Axiom transform(Axiom node) {
        return node;
    }

    public IntegerLiteral transform(IntegerLiteral node) {
        return node;
    }

    public BaseAddrExpression transform(BaseAddrExpression node) {
        return node;
    }

    public LoopAssigns transform(LoopAssigns node) {
        return node;
    }

    public Requires transform(Requires node) {
        return node;
    }

    public Decreases transform(Decreases node) {
        return node;
    }

    public Assertion transform(Assertion node) {
        return node;
    }

    public CodeStatement transform(CodeStatement node) {
        return node;
    }

    public ACSLTransformer transform(ACSLTransformer node) {
        return node;
    }

    public MallocableExpression transform(MallocableExpression node) {
        return node;
    }

    public ACSLVisitor transform(ACSLVisitor node) {
        return node;
    }

    public Axiomatic transform(Axiomatic node) {
        return node;
    }

    public LogicStatement transform(LogicStatement node) {
        return node;
    }

    public CodeInvariant transform(CodeInvariant node) {
        return node;
    }

    public ArrayStoreExpression transform(ArrayStoreExpression node) {
        return node;
    }

    public ACSLType transform(ACSLType node) {
        return node;
    }

    public BlockLengthExpression transform(BlockLengthExpression node) {
        return node;
    }

    public StringLiteral transform(StringLiteral node) {
        return node;
    }

    public PolyIdentifier transform(PolyIdentifier node) {
        return node;
    }

    public AtLabelExpression transform(AtLabelExpression node) {
        return node;
    }

    public GlobalLTLInvariant transform(GlobalLTLInvariant node) {
        return node;
    }

    public SyntacticNamingExpression transform(SyntacticNamingExpression node) {
        return node;
    }

    public Contract transform(Contract node) {
        return node;
    }

    public Invariant transform(Invariant node) {
        return node;
    }

    public CodeAnnotStmt transform(CodeAnnotStmt node) {
        return node;
    }

    public LoopInvariant transform(LoopInvariant node) {
        return node;
    }

    public BooleanLiteral transform(BooleanLiteral node) {
        return node;
    }

    public UnaryExpression transform(UnaryExpression node) {
        return node;
    }

    public QuantifierExpression transform(QuantifierExpression node) {
        return node;
    }

    public LoopForBehavior transform(LoopForBehavior node) {
        return node;
    }

    public Case transform(Case node) {
        return node;
    }

    public FreeableExpression transform(FreeableExpression node) {
        return node;
    }

    public NotDefinedExpression transform(NotDefinedExpression node) {
        return node;
    }

    public RealLiteral transform(RealLiteral node) {
        return node;
    }

    public Completeness transform(Completeness node) {
        return node;
    }

    public Lemma transform(Lemma node) {
        return node;
    }

    public ContractStatement transform(ContractStatement node) {
        return node;
    }

    public ModelVariable transform(ModelVariable node) {
        return node;
    }

    public TypeInvariant transform(TypeInvariant node) {
        return node;
    }

    public CodeAnnot transform(CodeAnnot node) {
        return node;
    }

    public NullPointer transform(NullPointer node) {
        return node;
    }

    public LoopVariant transform(LoopVariant node) {
        return node;
    }

    public BitvecLiteral transform(BitvecLiteral node) {
        return node;
    }

    public CodeAnnotBehavior transform(CodeAnnotBehavior node) {
        return node;
    }

    public LoopStatement transform(LoopStatement node) {
        return node;
    }

    public IfThenElseExpression transform(IfThenElseExpression node) {
        return node;
    }

    public IdentifierExpression transform(IdentifierExpression node) {
        return node;
    }

    public CodeForBehavior transform(CodeForBehavior node) {
        return node;
    }

    public Inductive transform(Inductive node) {
        return node;
    }

    public Expression transform(Expression node) {
        return node;
    }

    public Parameter transform(Parameter node) {
        return node;
    }

    public BitVectorAccessExpression transform(BitVectorAccessExpression node) {
        return node;
    }

    public SizeOfExpression transform(SizeOfExpression node) {
        return node;
    }

    public Assigns transform(Assigns node) {
        return node;
    }

    public ArrayAccessExpression transform(ArrayAccessExpression node) {
        return node;
    }

    public GlobalInvariant transform(GlobalInvariant node) {
        return node;
    }
}
