/*
 * Copyright (C) 2012-2014 University of Freiburg
 *
 * This file is part of the ULTIMATE LassoRanker Library.
 *
 * The ULTIMATE LassoRanker Library is free software: you can redistribute it
 * and/or modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * The ULTIMATE LassoRanker Library is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with the ULTIMATE LassoRanker Library. If not,
 * see <http://www.gnu.org/licenses/>.
 * 
 * Additional permission under GNU GPL version 3 section 7:
 * If you modify the ULTIMATE LassoRanker Library, or any covered work, by
 * linking or combining it with Eclipse RCP (or a modified version of
 * Eclipse RCP), containing parts covered by the terms of the Eclipse Public
 * License, the licensors of the ULTIMATE LassoRanker Library grant you
 * additional permission to convey the resulting work.
 */
package de.uni_freiburg.informatik.ultimate.plugins.analysis.lassoranker;

import java.util.ArrayList;
import java.util.Collection;

import de.uni_freiburg.informatik.ultimate.logic.ApplicationTerm;
import de.uni_freiburg.informatik.ultimate.logic.Script;
import de.uni_freiburg.informatik.ultimate.logic.Sort;
import de.uni_freiburg.informatik.ultimate.logic.Term;
import de.uni_freiburg.informatik.ultimate.logic.TermVariable;


/**
 * Generates and keeps track of new auxiliary variables.
 * Auxiliary variables are required by some preprocessors
 * 
 * @author Jan Leike
 */
public class AuxVarGenerator {
	private Script m_script;
	private Collection<TermVariable> m_auxVars;
	private Term m_term;
	
	/**
	 * Construct a new AuxVarGenerator
	 * @param script current SMT script
	 * @param term the term to check for occurrences of other auxiliary
	 *             variables to prevent overlap
	 */
	public AuxVarGenerator(Script script, Term term) {
		m_script = script;
		m_term = term;
		m_auxVars = new ArrayList<TermVariable>();
	}
	
	/**
	 * @return list of all auxiliary variables generated by this instance
	 */
	public Collection<TermVariable> getAuxVars() {
		return m_auxVars;
	}
	
	/**
	 * Recursively find the largest i such that prefix + i is a unused
	 * variable name.
	 * @param t term
	 * @return i
	 */
	private static int findMinAuxName(String prefix, Term t) {
		if (!(t instanceof ApplicationTerm)) {
			return 0;
		}
		ApplicationTerm appt = (ApplicationTerm) t;
		String func = appt.getFunction().getName();
		if (func.startsWith(prefix)) {
			try {
				String num = func.substring(prefix.length());
				int n = Integer.parseInt(num);
				return n + 1;
			} catch (NumberFormatException e) {
				// Do nothing
			}
		}
		// Proceed recursively
		int i = 0;
		for (Term param : appt.getParameters()) {
			int n = findMinAuxName(prefix, param);
			i = n >= i ? n + 1 : i;
		}
		return i;
	}
	
	/**
	 * Create a new auxiliary variable
	 * @param prefix prefix of the new variable's name
	 * @param sort the variable's sort
	 * @return new variable
	 */
	public TermVariable newAuxVar(String prefix, Sort sort) {
		int i = findMinAuxName(prefix, m_term);
		for (TermVariable var : m_auxVars) {
			i = Math.max(i, findMinAuxName(prefix, var));
		}
		TermVariable auxVar = m_script.variable(prefix + i, sort);
		m_auxVars.add(auxVar);
		return auxVar;
	}
}