package de.uni_freiburg.informatik.ultimate.plugins.analysis.lassoranker.rankingfunctions;

import java.math.BigInteger;
import java.util.*;

import de.uni_freiburg.informatik.ultimate.logic.*;
import de.uni_freiburg.informatik.ultimate.model.boogie.BoogieVar;
import de.uni_freiburg.informatik.ultimate.plugins.analysis.lassoranker.AffineFunction;


/**
 * An lexicographic ranking function as generated by the lexicographic template
 * 
 * @author Jan Leike
 */
public class LexicographicRankingFunction extends RankingFunction {
	private static final long serialVersionUID = -7426526617632086331L;
	
	private List<AffineFunction> m_ranking;
	public final int lex;
	
	public LexicographicRankingFunction(List<AffineFunction> ranking) {
		m_ranking = ranking;
		lex = ranking.size();
		assert(lex > 0);
	}
	
	public List<AffineFunction> getComponents() {
		return m_ranking;
	}
	
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append(m_ranking.size());
		sb.append("-lexicographic ranking function:\n");
		sb.append("  f(");
		boolean first = true;
		for (BoogieVar var : m_ranking.get(0).getVariables()) {
			if (!first) {
				sb.append(", ");
			}
			sb.append(var.getIdentifier());
			first = false;
		}
		sb.append(") = <");
		for (int i = 0; i < lex; ++i) {
			sb.append(m_ranking.get(i));
			if (i < lex - 1) {
				sb.append(",  ");
			}
		}
		sb.append(">");
		return sb.toString();
	}
	
	@Override
	public Term[] asLexTerm(Script script) throws SMTLIBException {
		Term[] lex = new Term[m_ranking.size()];
		for (int i = 0; i < m_ranking.size(); ++i) {
			lex[i] = m_ranking.get(i).asTerm(script);
		}
		return lex;
	}
	
	@Override
	public Ordinal evaluate(Map<BoogieVar, Rational> assignment) {
		Ordinal o = Ordinal.ZERO;
		Ordinal w_pow = Ordinal.ONE;
		for (int i = lex - 1; i >= 0; --i) {
			Rational r = m_ranking.get(i).evaluate(assignment);
			if (r.compareTo(Rational.ZERO) > 0) {
				BigInteger k = r.ceil().numerator();
				o = o.add(w_pow.mult(Ordinal.fromInteger(k)));
			}
			w_pow = w_pow.mult(Ordinal.OMEGA);
		}
		return o;
	}
}