package de.uni_freiburg.informatik.ultimate.plugins.analysis.lassoranker.rankingfunctions;

import java.util.*;

import de.uni_freiburg.informatik.ultimate.logic.*;
import de.uni_freiburg.informatik.ultimate.model.boogie.BoogieVar;
import de.uni_freiburg.informatik.ultimate.plugins.analysis.lassoranker.AffineFunction;


/**
 * An piecewise ranking function as generated by the piecewise template
 * 
 * @author Jan Leike
 */
public class PiecewiseRankingFunction extends RankingFunction {
	private static final long serialVersionUID = 1605612582853046558L;
	
	private List<AffineFunction> m_ranking;
	private List<AffineFunction> m_predicates;
	public final int pieces;
	
	public PiecewiseRankingFunction(List<AffineFunction> ranking, List<AffineFunction> predicates) {
		m_ranking = ranking;
		m_predicates = predicates;
		pieces = ranking.size();
		assert(pieces > 0);
		assert(pieces == predicates.size());
	}
	
	public List<AffineFunction> getComponents() {
		List<AffineFunction> l = new ArrayList<AffineFunction>();
		l.addAll(m_ranking);
		l.addAll(m_predicates);
		return l;
	}
	
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("f(");
		boolean first = true;
		for (BoogieVar var : m_ranking.get(0).getVariables()) {
			if (!first) {
				sb.append(", ");
			}
			sb.append(var.getIdentifier());
			first = false;
		}
		sb.append(") = {\n");
		for (int i = 0; i < pieces; ++i) {
			sb.append(m_ranking.get(i));
			sb.append(",\tif ");
			sb.append(m_predicates.get(i));
			sb.append(" >= 0");
			if (i < pieces - 1) {
				sb.append(",\n");
			} else {
				sb.append(".");
			}
		}
		sb.append(">");
		return sb.toString();
	}
	
	@Override
	public Term asTerm(Script script) throws SMTLIBException {
		// m_ranking.asTerm(script);
		return null; // TODO
	}
	
	@Override
	public Ordinal evaluate(Map<BoogieVar, Rational> assignment) {
		Rational r = Rational.ZERO;
		for (int i = 0; i < pieces; ++i) {
			if (!m_predicates.get(i).evaluate(assignment).isNegative()) {
				Rational rnew = m_ranking.get(i).evaluate(assignment);
				if (rnew.compareTo(r) > 0) {
					r = rnew;
				}
			}
		}
		return Ordinal.fromInteger(r.ceil().numerator());
	}
}