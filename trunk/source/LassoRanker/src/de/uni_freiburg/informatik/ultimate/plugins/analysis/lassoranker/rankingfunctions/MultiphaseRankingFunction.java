package de.uni_freiburg.informatik.ultimate.plugins.analysis.lassoranker.rankingfunctions;

import java.util.*;

import de.uni_freiburg.informatik.ultimate.logic.*;
import de.uni_freiburg.informatik.ultimate.model.boogie.BoogieVar;
import de.uni_freiburg.informatik.ultimate.plugins.analysis.lassoranker.AffineFunction;


/**
 * An multiphase ranking function as generated by the multiphase template
 * 
 * @author Jan Leike
 */
public class MultiphaseRankingFunction extends RankingFunction {
	private static final long serialVersionUID = 5376322220596462295L;
	
	private List<AffineFunction> m_ranking;
	public final int phases;
	
	public MultiphaseRankingFunction(List<AffineFunction> ranking) {
		m_ranking = ranking;
		phases = ranking.size();
		assert(phases > 0);
	}
	
	public List<AffineFunction> getComponents() {
		return m_ranking;
	}
	
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < phases; ++i) {
			sb.append("f" + i);
			sb.append(" = ");
			sb.append(m_ranking.get(i));
			if (i < phases - 1) {
				sb.append("\n");
			}
		}
		return sb.toString();
	}
	
	@Override
	public Term asTerm(Script script) throws SMTLIBException {
		// m_ranking.asTerm(script);
		return null; // TODO
	}
	
	@Override
	public Ordinal evaluate(Map<BoogieVar, Rational> assignment) {
		Ordinal o = Ordinal.ZERO;
		for (int i = 0; i < phases; ++i) {
			Rational r = m_ranking.get(i).evaluate(assignment);
			if (r.compareTo(Rational.ZERO) > 0) {
				return o.add(Ordinal.fromInteger(r.ceil().numerator()));
			}
			o = o.add(Ordinal.OMEGA);
		}
		assert(false);
		return o;
	}
}
