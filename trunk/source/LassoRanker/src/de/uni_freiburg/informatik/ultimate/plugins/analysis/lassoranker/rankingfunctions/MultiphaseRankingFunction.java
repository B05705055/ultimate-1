package de.uni_freiburg.informatik.ultimate.plugins.analysis.lassoranker.rankingfunctions;

import java.math.BigInteger;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.uni_freiburg.informatik.ultimate.logic.Rational;
import de.uni_freiburg.informatik.ultimate.logic.SMTLIBException;
import de.uni_freiburg.informatik.ultimate.logic.Script;
import de.uni_freiburg.informatik.ultimate.logic.Term;
import de.uni_freiburg.informatik.ultimate.model.boogie.BoogieVar;
import de.uni_freiburg.informatik.ultimate.plugins.analysis.lassoranker.AffineFunction;


/**
 * An multiphase ranking function as generated by the multiphase template
 * 
 * @author Jan Leike
 */
public class MultiphaseRankingFunction extends RankingFunction {
	private static final long serialVersionUID = 5376322220596462295L;
	
	private List<AffineFunction> m_ranking;
	public final int phases;
	
	public MultiphaseRankingFunction(List<AffineFunction> ranking) {
		m_ranking = ranking;
		phases = ranking.size();
		assert(phases > 0);
	}
	
	@Override
	public Set<BoogieVar> getVariables() {
		Set<BoogieVar> vars = new HashSet<BoogieVar>();
		for (AffineFunction af : m_ranking) {
			vars.addAll(af.getVariables());
		}
		return vars;
	}
	
	public List<AffineFunction> getComponents() {
		return m_ranking;
	}
	
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append(m_ranking.size());
		sb.append("-phase ranking function:\n");
		for (int i = 0; i < phases; ++i) {
			sb.append("  f" + i);
			sb.append(" = ");
			sb.append(m_ranking.get(i));
			if (i < phases - 1) {
				sb.append("\n");
			}
		}
		return sb.toString();
	}
	
	@Override
	public Term[] asLexTerm(Script script) throws SMTLIBException {
		BigInteger n = BigInteger.ZERO;
		Term phase = m_ranking.get(m_ranking.size() - 1).asTerm(script);
		Term value = script.numeral(n);
		for (int i = m_ranking.size() - 2; i >= 0; --i) {
			n = n.add(BigInteger.ONE);
			Term f_term = m_ranking.get(i).asTerm(script);
			Term cond = script.term(">", f_term,
					script.numeral(BigInteger.ZERO));
			phase = script.term("ite", cond, script.numeral(n), phase);
			value = script.term("ite", cond, f_term, value);
		}
		return new Term[] { phase, value };
	}
	
	@Override
	public Ordinal evaluate(Map<BoogieVar, Rational> assignment) {
		Ordinal o = Ordinal.ZERO;
		for (int i = 0; i < phases; ++i) {
			Rational r = m_ranking.get(i).evaluate(assignment);
			if (r.compareTo(Rational.ZERO) > 0) {
				return o.add(Ordinal.fromInteger(r.ceil().numerator()));
			}
			o = o.add(Ordinal.OMEGA);
		}
		assert(false);
		return o;
	}
}
