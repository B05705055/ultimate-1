package de.uni_freiburg.informatik.ultimate.plugins.analysis.lassoranker.rankingfunctions;

import java.math.BigInteger;
import java.util.*;

import de.uni_freiburg.informatik.ultimate.logic.*;
import de.uni_freiburg.informatik.ultimate.model.boogie.BoogieVar;
import de.uni_freiburg.informatik.ultimate.plugins.analysis.lassoranker.AffineFunction;


/**
 * An affine-linear ranking function as generated by the affine template
 * 
 * @author Jan Leike
 */
public class LinearRankingFunction extends RankingFunction {
	private static final long serialVersionUID = 5376322220596462295L;
	
	private AffineFunction m_ranking;
	
	public LinearRankingFunction(AffineFunction ranking) {
		m_ranking = ranking;
	}
	
	public AffineFunction getComponent() {
		return m_ranking;
	}
	
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("f");
		if (!m_ranking.isConstant()) {
			sb.append("(");
			boolean first = true;
			for (BoogieVar var : m_ranking.getVariables()) {
				if (!first) {
					sb.append(", ");
				}
				sb.append(var.getIdentifier());
				first = false;
			}
			sb.append(")");			
		}
		sb.append(" = ");
		sb.append(m_ranking);
		return sb.toString();
	}
	
	@Override
	public Term[] asLexTerm(Script script) throws SMTLIBException {
		return new Term[] { m_ranking.asTerm(script) };
	}
	
	@Override
	public Ordinal evaluate(Map<BoogieVar, Rational> assignment) {
		BigInteger i = m_ranking.evaluate(assignment).ceil().numerator();
		if (i.compareTo(BigInteger.ZERO) < 0) {
			i = BigInteger.ZERO;
		}
		return Ordinal.fromInteger(i);
	}
}
