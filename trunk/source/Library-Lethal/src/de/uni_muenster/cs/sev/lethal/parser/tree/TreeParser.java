/* Generated By:JavaCC: Do not edit this line. TreeParser.java */
package de.uni_muenster.cs.sev.lethal.parser.tree;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import de.uni_muenster.cs.sev.lethal.symbol.common.*;
import de.uni_muenster.cs.sev.lethal.symbol.special.*;
import de.uni_muenster.cs.sev.lethal.utils.*;
import de.uni_muenster.cs.sev.lethal.tree.standard.*;
import de.uni_muenster.cs.sev.lethal.tree.common.*;
import de.uni_muenster.cs.sev.lethal.tree.special.*;
import de.uni_muenster.cs.sev.lethal.hedgeautomaton.*;
import de.uni_muenster.cs.sev.lethal.factories.*;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Tree/Hedge parser
 * @author Philipp
 */
public class TreeParser<S extends Symbol> implements TreeParserConstants {

        public static Tree<RankedSymbol> parseString(String s) throws ParseException{
                return parseString(s,RankedSymbol.class);
        }
        public static Tree<UnrankedSymbol> parseStringAsHedge(String s) throws ParseException{
                return parseString(s,UnrankedSymbol.class);
        }

        public static <S extends Symbol> Tree<S> parseString(String s, Class<S> symClass) throws ParseException{
        NamedSymbolTreeFactory<S> tc = TreeFactory.getTreeFactory(symClass);
        TreeParser<S> parser = new TreeParser<S>(new ByteArrayInputStream(s.getBytes()));
        return parser.inputTree(tc);
        }

        public static Tree<RankedSymbol> makeTree(String nodeName, List<Tree<RankedSymbol>> subTrees) throws ParseException{
                return makeTree(nodeName,subTrees, RankedSymbol.class);
        }

        public static Tree<UnrankedSymbol> makeHedge(String nodeName, List<Tree<UnrankedSymbol>> subTrees) throws ParseException{
                return makeTree(nodeName,subTrees,UnrankedSymbol.class);
        }

        private static <S extends Symbol> Tree<S> makeTree(String nodeName, List subTrees, Class<S> symClass) throws ParseException{
                Pattern p = Pattern.compile("^\u005c\u005cs*([a-zA-Z_'><0-9]+)\u005c\u005cs*$");
                Matcher m = p.matcher(nodeName);
                if (!m.find()) throw new ParseException("Invalid node name");
                nodeName = m.group(1);
                NamedSymbolTreeFactory<S> tc = TreeFactory.getTreeFactory(symClass);
                return tc.makeTreeFromName(nodeName, subTrees);
        }

  final public Tree<S> inputTree(NamedSymbolTreeFactory<S> tc) throws ParseException {
        Tree<S> result;
    result = tree(tc);
    jj_consume_token(0);
         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Tree<S> tree(NamedSymbolTreeFactory<S> tc) throws ParseException {
        Tree<S> subtree;
        ArrayList<Tree<S>> subtrees = new ArrayList<Tree<S>>();
        String symbolName = null;
        //RankedSymbol specialSymbol = null;
        String content = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTENT:
      content = jj_consume_token(CONTENT).image;
            {if (true) return new StringTree<S>(tc.getSymbolClass(), content.substring(1,content.length()-1));}
      break;
    case NAME:
      symbolName = jj_consume_token(NAME).image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 5:
        jj_consume_token(5);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
        case CONTENT:
          subtree = tree(tc);
                                              subtrees.add(subtree);
          label_1:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 6:
              ;
              break;
            default:
              jj_la1[0] = jj_gen;
              break label_1;
            }
            jj_consume_token(6);
            subtree = tree(tc);
                                                          subtrees.add(subtree);
          }
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        jj_consume_token(7);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
                {if (true) return tc.makeTreeFromName(symbolName, subtrees);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public TreeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x18,0x20,0x18,};
   }

  /** Constructor with InputStream. */
  public TreeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TreeParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TreeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TreeParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TreeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TreeParser(TreeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TreeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[8];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 8; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
