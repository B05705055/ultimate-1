/* Generated By:JavaCC: Do not edit this line. FTAGrammarParser.java */
package de.uni_muenster.cs.sev.lethal.parser.ftagrammar;

import java.io.ByteArrayInputStream;
import java.util.*;
import de.uni_muenster.cs.sev.lethal.symbol.common.*;
import de.uni_muenster.cs.sev.lethal.symbol.standard.*;
import de.uni_muenster.cs.sev.lethal.tree.common.*;
import de.uni_muenster.cs.sev.lethal.tree.standard.*;
import de.uni_muenster.cs.sev.lethal.grammars.*;
import de.uni_muenster.cs.sev.lethal.grammars.generic.*;
import de.uni_muenster.cs.sev.lethal.treeautomata.easy.*;
import de.uni_muenster.cs.sev.lethal.states.*;
import de.uni_muenster.cs.sev.lethal.factories.*;
import de.uni_muenster.cs.sev.lethal.utils.*;

import java.util.List;

/**
 * Parser for tree grammars
 * @author Sezar
 */
public class FTAGrammarParser implements FTAGrammarParserConstants {

  private static FTAGrammarParser parser = new FTAGrammarParser(new ByteArrayInputStream(new byte[]{}));

  public static EasyFTA parseString(String s) throws ParseException{
        parser.ReInit(new ByteArrayInputStream((s+ "\u005cn").getBytes()));
        return parser.grammar();
  }

  public static Set<String> nonTerminalNames(String s){
                String name;
                HashSet<String> names = new HashSet<String>();
                for (String line : s.split("\u005cn")){
                        int i = line.indexOf("=");
                        if (i < 0) {
                                name = line.trim();
                        } else {
                                name = line.substring(0,i).trim();
                        }
                        if (name.length() != 0) names.add(name);
                }
                return names;
        }

  final public EasyFTA grammar() throws ParseException {
    State startSymbol;
        GenRTGRule<RankedSymbol,State > rule;
        List<GenRTGRule<RankedSymbol,State >> rules = new ArrayList<GenRTGRule<RankedSymbol,State> >();
        Set<State> states = new HashSet<State>();
        Set<State> finalStates = new HashSet<State>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINE_END_COMMENT:
      case 5:
      case 12:
      case 13:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(4)) {
        startSymbol = nonTerminal();
                                                   finalStates.add(startSymbol);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LINE_END_COMMENT:
          jj_consume_token(LINE_END_COMMENT);
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        jj_consume_token(5);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 12:
        case 13:
          rule = rules(states);
                                                                                                                                     rules.add(rule);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LINE_END_COMMENT:
            jj_consume_token(LINE_END_COMMENT);
            break;
          default:
            jj_la1[2] = jj_gen;
            ;
          }
          jj_consume_token(5);
          break;
        case LINE_END_COMMENT:
        case 5:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LINE_END_COMMENT:
            jj_consume_token(LINE_END_COMMENT);
            break;
          default:
            jj_la1[3] = jj_gen;
            ;
          }
          jj_consume_token(5);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(0);
          RTG<RankedSymbol,State> g = new GenRTG<RankedSymbol,State >(finalStates, rules);
          {if (true) return new EasyFTA(g, new StateBuilder<Object>());}
    throw new Error("Missing return statement in function");
  }

  final public GenRTGRule<RankedSymbol,State > rules(Set<State> states) throws ParseException {
        State left;
        Tree<BiSymbol<RankedSymbol, State>>  right;
    left = nonTerminal();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
      jj_consume_token(6);
      break;
    case 7:
      jj_consume_token(7);
      break;
    case 8:
      jj_consume_token(8);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = tree();
                                                                   states.add(left); {if (true) return new GenRTGRule(left, right);}
    throw new Error("Missing return statement in function");
  }

  final public Tree<BiSymbol<RankedSymbol, State>> tree() throws ParseException {
    Tree<BiSymbol<RankedSymbol, State>> subtree;
        ArrayList<Tree<BiSymbol<RankedSymbol, State>>> subtrees = new ArrayList<Tree<BiSymbol<RankedSymbol, State>>>();
        String terminalName = null;
        State nonTerminal = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
    case 13:
      nonTerminal = nonTerminal();
                {if (true) return TreeFactory.getTreeFactory().makeTreeFromSymbol((BiSymbol<RankedSymbol,State>)new LeafSymbol<RankedSymbol,State>(nonTerminal));}
      break;
    case SYMBOL:
      terminalName = jj_consume_token(SYMBOL).image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        jj_consume_token(9);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SYMBOL:
        case 12:
        case 13:
          subtree = tree();
                                                  subtrees.add(subtree);
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 10:
              ;
              break;
            default:
              jj_la1[6] = jj_gen;
              break label_2;
            }
            jj_consume_token(10);
            subtree = tree();
                                                              subtrees.add(subtree);
          }
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(11);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
                {if (true) return TreeFactory.getTreeFactory().makeTreeFromSymbol((BiSymbol<RankedSymbol,State>)new InnerSymbol<RankedSymbol,State>(new StdNamedRankedSymbol(terminalName, subtrees.size())), subtrees);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NamedState<String> nonTerminal() throws ParseException {
        String name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      jj_consume_token(12);
      break;
    case 13:
      jj_consume_token(13);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = jj_consume_token(SYMBOL).image;
                                             {if (true) return StateFactory.getStateFactory().makeState(name);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(4)) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public FTAGrammarParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3030,0x10,0x10,0x10,0x3030,0x1c0,0x400,0x3008,0x200,0x3008,0x3000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FTAGrammarParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FTAGrammarParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FTAGrammarParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FTAGrammarParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FTAGrammarParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FTAGrammarParser(FTAGrammarParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FTAGrammarParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
