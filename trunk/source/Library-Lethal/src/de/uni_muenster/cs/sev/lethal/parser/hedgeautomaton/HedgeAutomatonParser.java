/* Generated By:JavaCC: Do not edit this line. HedgeAutomatonParser.java */
package de.uni_muenster.cs.sev.lethal.parser.hedgeautomaton;

import java.io.ByteArrayInputStream;
import java.util.*;
import de.uni_muenster.cs.sev.lethal.hedgeautomaton.*;
import de.uni_muenster.cs.sev.lethal.hedgeautomaton.expressions.*;
import de.uni_muenster.cs.sev.lethal.states.*;
import de.uni_muenster.cs.sev.lethal.factories.*;
import de.uni_muenster.cs.sev.lethal.symbol.common.*;
import de.uni_muenster.cs.sev.lethal.symbol.standard.*;

/**
 * Parser for hedge automata.
 * @author Philipp
 */
public class HedgeAutomatonParser implements HedgeAutomatonParserConstants {
        private static HedgeAutomatonParser parser = new HedgeAutomatonParser(new ByteArrayInputStream(new byte[]{}));

        public static EasyHedgeAutomaton parseString(String s) throws ParseException{
                parser.ReInit(new ByteArrayInputStream(s.getBytes()));
                return parser.hedgeautomaton();
        }

        private static List<String> stringRange(String startName, String endName) throws ParseException{
                List<String> names = new ArrayList<String>();
                names.add(startName);

                if (endName != null){
                        if (startName.length() != endName.length()) throw new ParseException("Ranges only support equal length names");
                        StringBuffer currentName = new StringBuffer(startName);
                        while (!currentName.toString().equals(endName)){
                                for (int pos = 0; pos < startName.length(); pos++){
                                        if (startName.charAt(pos) != endName.charAt(pos)){
                                                if (currentName.charAt(pos) < endName.charAt(pos)){
                                                        currentName.setCharAt(pos, (char)(currentName.charAt(pos) + 1));
                                                        names.add(currentName.toString());
                                                        break;
                                                } else {
                                                        currentName.setCharAt(pos, startName.charAt(pos));
                                                }
                                        }
                                }
                        }
                }
                return names;
        }

  final public EasyHedgeAutomaton hedgeautomaton() throws ParseException {
        Set<State> states = new HashSet<State>();
        Set<State> finalStates = new HashSet<State>();
        List<HedgeRule<UnrankedSymbol,State>> lineRules;
        Set<HedgeRule<UnrankedSymbol,State>> haRules = new HashSet<HedgeRule<UnrankedSymbol,State>>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
    case 9:
      lineRules = line(states, finalStates);
                                                         haRules.addAll(lineRules);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINE_END_COMMENT:
      jj_consume_token(LINE_END_COMMENT);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(8);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
      case 9:
        lineRules = line(states, finalStates);
                                                                haRules.addAll(lineRules);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINE_END_COMMENT:
        jj_consume_token(LINE_END_COMMENT);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    }
    jj_consume_token(0);
         {if (true) return new EasyHedgeAutomaton(states,finalStates,haRules);}
    throw new Error("Missing return statement in function");
  }

  final public List<HedgeRule<UnrankedSymbol, State>> line(Set<State> states, Set<State> finalStates) throws ParseException {
        String symName;
        List<UnrankedSymbol> symbolSet = new ArrayList<UnrankedSymbol>();
        State destState;
        RegularExpression exp = null;
        List<HedgeRule<UnrankedSymbol,State>> rules = new ArrayList<HedgeRule<UnrankedSymbol,State>>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      symName = jj_consume_token(NAME).image;
                                              symbolSet.add(new StdNamedUnrankedSymbol<String>(symName));
      break;
    case 9:
      jj_consume_token(9);
      symbolSet = symbolSet();
      jj_consume_token(10);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
      jj_consume_token(11);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
      case 9:
      case 11:
        exp = regexp(states, finalStates);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(12);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(13);
    destState = state(states,finalStates);
                if (exp == null){
                        exp = new EmptyExpression<UnrankedSymbol,State>();
                }
                for (UnrankedSymbol sym : symbolSet){
                        rules.add(new HedgeRule<UnrankedSymbol,State>(sym, exp, destState));
                }
                {if (true) return rules;}
    throw new Error("Missing return statement in function");
  }

  final public List<UnrankedSymbol> symbolSet() throws ParseException {
        String startName;
        String endName = null;
        List<UnrankedSymbol> symbols = null;
    startName = jj_consume_token(NAME).image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      jj_consume_token(14);
      endName = jj_consume_token(NAME).image;
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      symbols = symbolSet();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                if (symbols == null) symbols = new ArrayList<UnrankedSymbol>();
                for (String stateName : stringRange(startName,endName)){
                        symbols.add(new StdNamedUnrankedSymbol<String>(stateName));
                }
                {if (true) return symbols;}
    throw new Error("Missing return statement in function");
  }

  final public RegularExpression regexp(Set<State> states, Set<State> finalStates) throws ParseException {
        RegularExpression rightExp = null;
        //List<State> leftStates = null;
        RegularExpression leftExp = null;
        boolean boundsGiven = false;
        String smin;
        String smax;
        int min = 1;
        int max = 1;
        boolean disj = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
    case 9:
      leftExp = states(states,finalStates);
      break;
    case 11:
      jj_consume_token(11);
      leftExp = regexp(states,finalStates);
      jj_consume_token(12);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RSTART:
    case 16:
    case 17:
    case 18:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RSTART:
        smin = jj_consume_token(RSTART).image;
        smax = jj_consume_token(REND).image;
                                min = (smin.length() > 1 ? Integer.valueOf(smin.substring(1,smin.length())) : 0);
                                max = (smax.length() > 2 ? Integer.valueOf(smax.substring(1,smax.length()-1)) : -1);
                                boundsGiven=true;
        break;
      case 16:
        jj_consume_token(16);
                                 min=0;max=-1;boundsGiven=true;
        break;
      case 17:
        jj_consume_token(17);
                                 min=1;max=-1;boundsGiven=true;
        break;
      case 18:
        jj_consume_token(18);
                                 min=0;max=1 ;boundsGiven=true;
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
    case 9:
    case 11:
    case 15:
    case 19:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        jj_consume_token(19);
        rightExp = regexp(states,finalStates);
                                                                   disj = true;
        break;
      case NAME:
      case 9:
      case 11:
      case 15:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 15:
          jj_consume_token(15);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        rightExp = regexp(states,finalStates);
                                                                        disj = false;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
                if (!boundsGiven){
                        min = max = 1;
                }

                //if (leftStates != null){
                //	leftExp = new Expression(min,max, new BasicExpression(leftStates));
                //} else
                if (min != 1 || max != 1) {
                        leftExp = JoeExpression.makeOptimizedJoe(min,max, leftExp);
                }

                if (rightExp != null){
                        if (disj){
                                {if (true) return OrExpression.makeOptimizedOr(1,1, leftExp, rightExp);}
                        } else {
                                {if (true) return ConcatExpression.makeOptimizedConcat(1,1, leftExp,rightExp);}
                        }
                } else {
                        {if (true) return leftExp;}
                }
    throw new Error("Missing return statement in function");
  }

  final public RegularExpression states(Set<State> allStates, Set<State> finalStates) throws ParseException {
        State state;
        List<State> rstates = new ArrayList<State>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      state = state(allStates,finalStates);
                                                        rstates.add(state);
      break;
    case 9:
      jj_consume_token(9);
      rstates = stateSet();
                                              allStates.addAll(rstates);
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIN_MARK:
        jj_consume_token(FIN_MARK);
                                                                                           finalStates.addAll(rstates);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                RegularExpression exp = null;
                for (State rstate : rstates){
                        List<State> slist = new ArrayList<State>();
                        slist.add(rstate);
                        BasicExpression bexp = new BasicExpression(slist);
                        if (exp == null){
                                exp = new Expression(1,1, bexp);
                        } else {
                                exp = OrExpression.makeOptimizedOr(1,1, exp, new Expression(1,1, bexp));
                        }
                }
                {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public List<State> stateSet() throws ParseException {
        String startName;
        String endName = null;
        List<State> states = null;
    startName = jj_consume_token(NAME).image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      jj_consume_token(14);
      endName = jj_consume_token(NAME).image;
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      states = stateSet();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
                if (states == null) states = new ArrayList<State>();
                for (String stateName : stringRange(startName,endName)){
                        states.add(StateFactory.getStateFactory().makeState(stateName));
                }
                {if (true) return states;}
    throw new Error("Missing return statement in function");
  }

  final public State state(Set<State> states, Set<State> finalStates) throws ParseException {
        String name;
        State state;
        boolean isFinal = false;
    name = jj_consume_token(NAME).image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FIN_MARK:
      jj_consume_token(FIN_MARK);
                                        isFinal=true;
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
                state = StateFactory.getStateFactory().makeState(name);
                states.add(state);
                if (isFinal) finalStates.add(state);
                {if (true) return state;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public HedgeAutomatonParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x208,0x80,0x100,0x208,0x80,0x208,0xa08,0x800,0x4000,0x8000,0xa08,0x70010,0x70010,0x8000,0x88a08,0x88a08,0x40,0x208,0x4000,0x8000,0x40,};
   }

  /** Constructor with InputStream. */
  public HedgeAutomatonParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HedgeAutomatonParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HedgeAutomatonParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public HedgeAutomatonParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HedgeAutomatonParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public HedgeAutomatonParser(HedgeAutomatonParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(HedgeAutomatonParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
