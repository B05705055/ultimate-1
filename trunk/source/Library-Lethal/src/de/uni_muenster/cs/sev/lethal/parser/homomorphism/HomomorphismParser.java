/* Generated By:JavaCC: Do not edit this line. HomomorphismParser.java */
package de.uni_muenster.cs.sev.lethal.parser.homomorphism;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.HashMap;
import de.uni_muenster.cs.sev.lethal.symbol.common.*;
import de.uni_muenster.cs.sev.lethal.symbol.standard.*;
import de.uni_muenster.cs.sev.lethal.states.*;
import de.uni_muenster.cs.sev.lethal.utils.*;
import de.uni_muenster.cs.sev.lethal.tree.common.*;
import de.uni_muenster.cs.sev.lethal.tree.standard.*;
import de.uni_muenster.cs.sev.lethal.factories.*;
import de.uni_muenster.cs.sev.lethal.hom.*;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * Tree homomorphism parser
 * @author Philipp
 */
public class HomomorphismParser implements HomomorphismParserConstants {
        private static HomomorphismParser parser = new HomomorphismParser(new ByteArrayInputStream(new byte[]{}));

        public static EasyHom parseString(String s) throws ParseException{
                parser.ReInit(new ByteArrayInputStream(s.getBytes()));
                return new EasyHom(parser.homomorphism());
        }

  final public HashMap<RankedSymbol,Tree<? extends BiSymbol<RankedSymbol,Variable>>> homomorphism() throws ParseException {
        Pair<RankedSymbol,Tree<BiSymbol<RankedSymbol,Variable>>> rule;
        HashMap<RankedSymbol,Tree<? extends BiSymbol<RankedSymbol,Variable>>> rules = new HashMap<RankedSymbol,Tree<? extends BiSymbol<RankedSymbol,Variable>>>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      rule = homomorphismRule();
                                             rules.put(rule.getFirst(), rule.getSecond());
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINE_END_COMMENT:
      jj_consume_token(LINE_END_COMMENT);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 5:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        rule = homomorphismRule();
                                        if (rules.containsKey(rule.getFirst())) {if (true) throw new ParseException("Multiple rule definitions for symbol " + rule.getFirst());}
                                        rules.put(rule.getFirst(), rule.getSecond());
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINE_END_COMMENT:
        jj_consume_token(LINE_END_COMMENT);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    }
    jj_consume_token(0);
          {if (true) return rules;}
    throw new Error("Missing return statement in function");
  }

  final public Pair<RankedSymbol,Tree<BiSymbol<RankedSymbol,Variable>>> homomorphismRule() throws ParseException {
        Pair<RankedSymbol, List<String>> func;
        Tree<BiSymbol<RankedSymbol,Variable>> vtree;
        Pair<RankedSymbol,Tree<BiSymbol<RankedSymbol,Variable>>> rule;
    func = function();
    jj_consume_token(6);
    vtree = tree(func.getSecond());
         {if (true) return new Pair<RankedSymbol,Tree<BiSymbol<RankedSymbol,Variable>>>(func.getFirst(), vtree);}
    throw new Error("Missing return statement in function");
  }

  final public Pair<RankedSymbol, List<String>> function() throws ParseException {
        String functionName;
        String var;
        List<String> variableNames = new ArrayList<String>();
    functionName = jj_consume_token(NAME).image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        var = jj_consume_token(NAME).image;
                                                            variableNames.add(var);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 8:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_2;
          }
          jj_consume_token(8);
          var = jj_consume_token(NAME).image;
                                                                                                             variableNames.add(var);
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(9);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
                RankedSymbol function = new StdNamedRankedSymbol(functionName, variableNames.size());
                {if (true) return new Pair<RankedSymbol, List<String>>(function,variableNames);}
    throw new Error("Missing return statement in function");
  }

  final public Tree<BiSymbol<RankedSymbol,Variable>> tree(List<String> variableNames) throws ParseException {
        Tree<BiSymbol<RankedSymbol,Variable>> subtree;
        ArrayList<Tree<BiSymbol<RankedSymbol,Variable>>> subtrees = new ArrayList<Tree<BiSymbol<RankedSymbol,Variable>>>();
        String symbolName;
    symbolName = jj_consume_token(NAME).image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        subtree = tree(variableNames);
                                                       subtrees.add(subtree);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 8:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_3;
          }
          jj_consume_token(8);
          subtree = tree(variableNames);
                                                                   subtrees.add(subtree);
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(9);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
                int index = variableNames.indexOf(symbolName);
                if (index != -1){
                        if (subtrees.size() != 0) {if (true) throw new ParseException("Variable Symbols must be leaf nodes");}
                        {if (true) return TreeFactory.getTreeFactory().makeTreeFromSymbol((BiSymbol<RankedSymbol,Variable>)new LeafSymbol<RankedSymbol,Variable>((Variable)new NamedVariable(symbolName, index)));}
                } else {
                        {if (true) return TreeFactory.getTreeFactory().makeTreeFromSymbol((BiSymbol<RankedSymbol,Variable>)new InnerSymbol<RankedSymbol,Variable>(new StdNamedRankedSymbol(symbolName, subtrees.size())), subtrees);}
                }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public HomomorphismParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8,0x10,0x20,0x8,0x10,0x100,0x8,0x80,0x100,0x8,0x80,};
   }

  /** Constructor with InputStream. */
  public HomomorphismParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HomomorphismParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HomomorphismParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public HomomorphismParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HomomorphismParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public HomomorphismParser(HomomorphismParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(HomomorphismParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[10];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 10; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
