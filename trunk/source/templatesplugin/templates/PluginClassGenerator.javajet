<%@ jet 
	package="de.uni_freiburg.informatik.ultimate.dev.eclipse.templates.filegenerators"
	class="PluginClassGenerator" imports="de.uni_freiburg.informatik.ultimate.dev.eclipse.templates.UltimatePluginData"
%><%
	UltimatePluginData data = (UltimatePluginData) argument; 
%>package de.uni_freiburg.informatik.ultimate.plugins.<%=data.getTypeString()%>.<%=data.getPluginName().toLowerCase()%>;

import java.util.Collections;
import java.util.List;

import de.uni_freiburg.informatik.ultimate.access.IObserver;
import de.uni_freiburg.informatik.ultimate.ep.interfaces.<%=data.getInterfaceName()%>;
import de.uni_freiburg.informatik.ultimate.model.GraphType;<%if(data.getType() == UltimatePluginData.PluginType.generator){%>
import de.uni_freiburg.informatik.ultimate.model.IElement;<%}%>
import de.uni_freiburg.informatik.ultimate.model.MarkedTrace;
import de.uni_freiburg.informatik.ultimate.model.TokenMap;
import de.uni_freiburg.informatik.ultimate.core.api.UltimateServices;

import org.apache.log4j.Logger;

/**
 * Main class of Plug-In <%=data.getPluginName()%>
 * 
 *
 * TODO: refine comments
 * 
 */
public class <%=data.getPluginName()%> implements <%=data.getInterfaceName()%> {

	private static final String s_PLUGIN_NAME = Activator.s_PLUGIN_NAME;
	private static final String s_PLUGIN_ID = Activator.s_PLUGIN_ID;
	
	private <%=data.getPluginName()%>Observer m_Observer;
	private GraphType m_InputDefinition;
	
	private static Logger s_Logger = UltimateServices.getInstance().getLogger(Activator.s_PLUGIN_ID);
	
	<% if(data.getType() == UltimatePluginData.PluginType.output){%>/**
	* Keeps track of marked traces that should be visualized in a way.
	*/
	private List<MarkedTrace> m_MarkedTraces;<%}%>
	
	/* (non-Javadoc)
	 * @see de.uni_freiburg.informatik.ultimate.ep.interfaces.IRCPPlugin#getName()
	 */
	@Override
    public String getName() {
        return s_PLUGIN_NAME;
    }

	/* (non-Javadoc)
	 * @see de.uni_freiburg.informatik.ultimate.ep.interfaces.IRCPPlugin#getPluginID()
	 */
	@Override
    public String getPluginID() {
        return s_PLUGIN_ID;
    }

	/* (non-Javadoc)
	 * @see de.uni_freiburg.informatik.ultimate.ep.interfaces.IRCPPlugin#init(java.lang.Object)
	 */
	@Override
    public int init(Object param) {
    	m_Observer = new <%=data.getPluginName()%>Observer();
    	return 0;
    }

	/* (non-Javadoc)
	 * @see de.uni_freiburg.informatik.ultimate.ep.interfaces.ITool#getQueryKeyword()
	 */
	@Override
	public QueryKeyword getQueryKeyword() {
		return <%=data.getQueryKeywordString()%>;
	}

	/* (non-Javadoc)
	 * @see de.uni_freiburg.informatik.ultimate.ep.interfaces.ITool#getDesiredToolID()
	 */
	@Override
	public List<String> getDesiredToolID() {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see de.uni_freiburg.informatik.ultimate.ep.interfaces.ITool#setTokenMap(de.uni_freiburg.informatik.ultimate.model.TokenMap)
	 */
	@Override
	public void setTokenMap(TokenMap tokenMap) {
		// TODO Auto-generated method stub

	}

	/* (non-Javadoc)
	 * @see de.uni_freiburg.informatik.ultimate.ep.interfaces.ITool#setInputDefinition(de.uni_freiburg.informatik.ultimate.model.GraphType)
	 */
	@Override
	public void setInputDefinition(GraphType graphType) {
		this.m_InputDefinition = graphType;
	}

	//@Override
	public List<IObserver> getObservers() {
		return Collections.singletonList((IObserver) m_Observer);
	}
	<%if(data.getType() == UltimatePluginData.PluginType.analysis || data.getType() == UltimatePluginData.PluginType.generator){%>
	/* (non-Javadoc)
	 * @see de.uni_freiburg.informatik.ultimate.ep.interfaces.IModifyingTool#getOutputDefinition()
	 */
	public GraphType getOutputDefinition() {
		/* 
		 * TODO This generated method body only assumes a standard case.
		 * Adapt it if necessary. Otherwise remove this todo-tag.
		 */
		return new GraphType(Activator.s_PLUGIN_ID,
				m_InputDefinition.getType(), m_InputDefinition.getFileNames());
	}
	<%if(data.getType() == UltimatePluginData.PluginType.generator){%>
	/* (non-Javadoc)
	 * @see de.uni_freiburg.informatik.ultimate.ep.interfaces.IGenerator#getModel()
	 */
	@Override
	public IElement getModel() {
		// TODO Auto-generated method stub
		return null;
	}
	<%}}%>
	/* (non-Javadoc)
	 * @see de.uni_freiburg.informatik.ultimate.ep.interfaces.ITool#getRequireGui()
	 */
	@Override
	public boolean isGuiRequired() {
		return <%=data.isGuiRequired()%>;
	}
	
	<% if(data.getType() == UltimatePluginData.PluginType.output){%>/**
	* Keeps track of marked traces that should be visualized in a way.
	*/
	public void setMarkedTraces(List<MarkedTrace> traces){
		this.m_MarkedTraces = traces;
	}<%} 
	else{%>/**
	* @return marked traces or null if no special markers shall be added for output plug-ins
	*/
	public List<MarkedTrace> getMarkedTraces(){
		// TODO Auto-generated method stub
		return null;
	}<%}%>
}
