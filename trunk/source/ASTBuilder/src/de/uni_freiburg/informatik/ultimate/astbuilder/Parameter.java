/*
 * Copyright (C) 2015 Daniel Dietsch (dietsch@informatik.uni-freiburg.de)
 * Copyright (C) 2015 University of Freiburg
 * 
 * This file is part of the ULTIMATE ASTBuilder plug-in.
 * 
 * The ULTIMATE ASTBuilder plug-in is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The ULTIMATE ASTBuilder plug-in is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with the ULTIMATE ASTBuilder plug-in. If not, see <http://www.gnu.org/licenses/>.
 * 
 * Additional permission under GNU GPL version 3 section 7:
 * If you modify the ULTIMATE ASTBuilder plug-in, or any covered work, by linking
 * or combining it with Eclipse RCP (or a modified version of Eclipse RCP), 
 * containing parts covered by the terms of the Eclipse Public License, the 
 * licensors of the ULTIMATE ASTBuilder plug-in grant you additional permission 
 * to convey the resulting work.
 */
/* Parameter -- Automatically generated by TreeBuilder */

package de.uni_freiburg.informatik.ultimate.astbuilder;

/**
 * Represents a parameter.
 */
public class Parameter {
    /**
     * The name of this parameter.
     */
    String name;

    /**
     * The type of this parameter.
     */
    String type;

    /**
     * The comment of this parameter.
     */
    String comment;

    /**
     * True iff this parameter is writeable.
     */
    boolean isWriteable;

    /**
     * True iff this parameter is writeable once.
     */
    boolean isWriteableOnce;

    /**
     * True iff this parameter is optional.
     */
    boolean isOptional;

    /**
     * The constructor taking initial values.
     * @param name the name of this parameter.
     * @param type the type of this parameter.
     * @param comment the comment of this parameter.
     * @param isWriteable true iff this parameter is writeable.
     * @param isWriteableOnce true iff this parameter is writeable once.
     * @param isOptional true iff this parameter is optional.
     */
    public Parameter(String name, String type, String comment, boolean isWriteable, boolean isWriteableOnce, boolean isOptional) {
        super();
        this.name = name;
        this.type = type;
        this.comment = comment;
        this.isWriteable = isWriteable;
        this.isWriteableOnce = isWriteableOnce;
        this.isOptional = isOptional;
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("Parameter").append('[');
        sb.append(name);
        sb.append(',').append(type);
        sb.append(',').append(comment);
        sb.append(',').append(isWriteable);
        sb.append(',').append(isWriteableOnce);
        sb.append(',').append(isOptional);
        return sb.append(']').toString();
    }

    /**
     * Gets the name of this parameter.
     * @return the name of this parameter.
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the type of this parameter.
     * @return the type of this parameter.
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the type of this parameter.
     * @param type the type of this parameter.
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Gets the comment of this parameter.
     * @return the comment of this parameter.
     */
    public String getComment() {
        return comment;
    }

    /**
     * Checks iff this parameter is writeable.
     * @return true iff this parameter is writeable.
     */
    public boolean isWriteable() {
        return isWriteable;
    }

    /**
     * Checks iff this parameter is writeable once.
     * @return true iff this parameter is writeable once.
     */
    public boolean isWriteableOnce() {
        return isWriteableOnce;
    }

    /**
     * Checks iff this parameter is optional.
     * @return true iff this parameter is optional.
     */
    public boolean isOptional() {
        return isOptional;
    }
}
