package de.uni_freiburg.informatik.junit_helper.testfactory;

import java.lang.reflect.Method;

import org.junit.runners.model.FrameworkMethod;

/**
 * Represents a single test-case that corresponds to an object generated by a \@TestFactory
 * method. Is only used internally by the FactoryTestRunner and named to be
 * consistent with JUnit naming conventions.
 * 
 * @author Dietsch
 * 
 */
public class FrameworkFactoryTest extends FrameworkMethod {
	private Object mTarget;
	private String mName;

	/**
	 * 
	 * @param method
	 *            The method which should be invoked
	 * @param target
	 *            The instance on which the method should be invoked
	 * @param name
	 * 			The name that will be displayed in JUnit reports for this test 
	 */
	public FrameworkFactoryTest(Method method, Object target, String name) {
		super(method);
		this.mTarget = target;
		this.mName = name;
	}

	@Override
	public Object invokeExplosively(Object target, Object... params)
			throws Throwable {
		// Executes the test method on the supplied target (returned by the
		// TestFactory)
		// and not the instance generated by FrameworkMethod.
		return super.invokeExplosively(this.mTarget, params);
	}

	@Override
	public String getName() {
		// this name will be displayed by JUnit
		// return String.format("%s=%s.%s[%s]", mName, mTarget.getClass()
		// .getSimpleName(), getMethod().getName(), mTarget.toString());
		return mName;
	}
}