/*
 * Console.cup
 *
 * Cup grammar specification for the command-line input 
 * of the interactive console.
 * 
 * @author Jochen Hoenicke based on an original work of Christian Simon
 */

package de.uni_freiburg.informatik.ultimate.interactiveconsole;
import java_cup.runtime.Symbol;

parser ConsoleParser;
option symbols = ConsoleSymbols;
option java15, compact_red, newpositions;

parser code {:

  /** This method is called if it is determined that syntax error recovery 
   *  has been unsuccessful.  
   * @param cur_token the current lookahead Symbol.
   */
  public void unrecovered_syntax_error(Symbol cur_token)
    throws java.lang.Exception
    {
      throw new SyntaxException("Could not parse command line");
    }
:}


terminal HELP, EXIT, LIST, USE, ON;
terminal SETPRELUDE, LISTMM, RERUN, SETRESULTOUTPUT;
terminal LOADPREFS;
terminal String NUMBER;
terminal String FILE_NAME;
terminal LPAR, RPAR, STAR, CURRENT;
				
non terminal Stmt cmdline;
non terminal TC tcd;
non terminal TCnew ntcd;


cmdline 
    ::= HELP
    	{: RESULT = new HelpStmt();  :}
    |	EXIT
    	{: RESULT = new ExitStmt(); :}
    |	LIST
    	{: RESULT = new ListStmt(); :}
    |	USE tcd:t ON FILE_NAME:f
    	{: RESULT = new UseStmt(t, f); :}
    |	SETPRELUDE FILE_NAME:f
    	{: RESULT = new SetPreludeStmt(f); :}
    |	LISTMM
    	{: RESULT = new ListMMStmt(); :}
    |	RERUN
    	{: RESULT = new RerunStmt(); :}
    |	SETRESULTOUTPUT FILE_NAME:f
    	{: RESULT = new SetResultOutputStmt(f); :}
    |	LOADPREFS FILE_NAME:f
    	{: RESULT = new LoadPrefsStmt(f); :}
    ;

// toolchain grammar
tcd
	::=	CURRENT
		{: RESULT = new TCcurrent(); :}
	|	FILE_NAME:f
		{: RESULT = new TCfile(f); :}
	|	ntcd
	;
	

// descriptor for new toolchain made up of integers 
ntcd
	::=	NUMBER:nmb  ntcd?:next
		{: RESULT = new TCPlugin(nmb, next); :}
	|	LPAR ntcd:sbc RPAR STAR  ntcd?:next
		{: RESULT = new TCSubchain(sbc, next); :}
	;
