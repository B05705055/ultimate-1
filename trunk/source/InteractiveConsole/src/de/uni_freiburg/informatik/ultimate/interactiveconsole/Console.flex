/*
 * Console.flex
 *
 * Flex grammar specification for the command-line input 
 * of the interactive console.
 * 
 * @author Jochen Hoenicke based on an original work of Christian Simon
 */

package de.uni_freiburg.informatik.ultimate.interactiveconsole;

import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.ComplexSymbolFactory;

/**
 * This is a autogenerated lexer for Command-line input.
 * It is generated from Console.flex by JFlex.
 */
%%

%class ConsoleLexer
%unicode
%cupsym ConsoleSymbols
%cup
%line
%column
%caseless

%{
  private SymbolFactory symFactory;
  
  public void setSymbolFactory(SymbolFactory factory) {
    symFactory = factory;
  }

  private Symbol symbol(int type) {
    return symFactory.newSymbol(yytext(), type, yytext());
  }
  private Symbol symbol(int type, String value) {
    return symFactory.newSymbol(value, type, value);
  }
%}

LineTerminator = \r|\n|\r\n
InputCharacter = [^\r\n]
WhiteSpace     = {LineTerminator} | [ \t\f]

/* comments */
Comment = {TraditionalComment} | {EndOfLineComment}

LETTER = [:letter:];
DIGIT  = [:digit:];
PATHSEPARATOR = [\/\\];
FILECHAR = ( LETTER | DIGIT | '_' | '-' | ',' | ':' | '.');

%%

<YYINITIAL>  {
  "current"        { return symbol(ConsoleSymbols.CURRENT); }

  "help"        { return symbol(ConsoleSymbols.HELP); }
  "exit"        { return symbol(ConsoleSymbols.EXIT); }
  "list"        { return symbol(ConsoleSymbols.LIST); }
  "use"         { return symbol(ConsoleSymbols.USE); }
  "on"          { return symbol(ConsoleSymbols.ON); }
  "set prelude" { return symbol(ConsoleSymbols.SETPRELUDE); }
  "listmm"      { return symbol(ConsoleSymbols.LISTMM); }
  "rerun"       { return symbol(ConsoleSymbols.RERUN); }
  "output result to" { return symbol(ConsoleSymbols.SETRESULTOUTPUT); }
  "load preferences from" { return symbol(ConsoleSymbols.LOADPREFS); }
				
  /* Other Symbols */
  "("             { return symbol(ConsoleSymbols.LPAR); }
  ")"             { return symbol(ConsoleSymbols.RPAR); }
  "*"             { return symbol(ConsoleSymbols.STAR); }

  /* Numbers, Ids and Strings */

  DIGIT+          { return symbol(ConsoleSymbols.NUMBER, yytext()); }
  PATHSEPARATOR? (FILECHAR PATHSEPARATOR?)+
                  { return symbol(ConsoleSymbols.FILE_NAME, yytext()); }
 
  /* whitespace */
  {WhiteSpace}                   { /* ignore */ }
}


/* error fallback */
.|\n                             { return symbol(ConsoleSymbols.error, yytext()); }
