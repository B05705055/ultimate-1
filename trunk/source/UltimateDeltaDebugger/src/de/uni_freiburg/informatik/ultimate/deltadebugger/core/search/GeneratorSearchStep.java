package de.uni_freiburg.informatik.ultimate.deltadebugger.core.search;

import java.util.List;

import de.uni_freiburg.informatik.ultimate.deltadebugger.core.ChangeHandle;
import de.uni_freiburg.informatik.ultimate.deltadebugger.core.VariantGenerator;
import de.uni_freiburg.informatik.ultimate.deltadebugger.core.search.minimizers.DuplicateVariantTracker;
import de.uni_freiburg.informatik.ultimate.deltadebugger.core.search.minimizers.MinimizerStep;

/**
 * Holds the state of one search step for the best reduced source code variant.
 * 
 * Combines the VariantGenerator and MinimizerStep interfaces into a single
 * iterable search step that supports speculative searching.
 */
public interface GeneratorSearchStep extends SearchStep<String, GeneratorSearchStep> {
	/**
	 * @return the current VariantGenerator
	 */
	VariantGenerator getVariantGenerator();

	/**
	 * @return the utilized duplicate tracker to filter duplicate variants
	 *         generated by the minimizer
	 */
	DuplicateVariantTracker<ChangeHandle> getDuplicateTracker();

	/**
	 * @return the current set of active changes to be tested
	 */
	List<ChangeHandle> getActiveChanges();

	/**
	 * @return the current minimizer step, holding the current set of
	 *         <em>in</em>active changes
	 */
	MinimizerStep<ChangeHandle> getMinimizerStep();

	/**
	 * @return getVariantGenerator().apply(getActiveChanges())
	 */
	@Override
	String getVariant();

	/**
	 * Updates the duplicate tracker once the actual test result of this step is
	 * known.
	 * 
	 * @param keepVariant
	 */
	default void updateDuplicateTrackerWithTestResult(boolean keepVariant) {
		if (keepVariant) {
			getDuplicateTracker().removeLargerVariants(getMinimizerStep().getVariant().size());
		} else {
			getDuplicateTracker().add(getMinimizerStep().getVariant());
		}
	}
}