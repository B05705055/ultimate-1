package de.uni_freiburg.informatik.ultimate.deltadebugger.core.search;

import java.util.List;

import de.uni_freiburg.informatik.ultimate.deltadebugger.core.IChangeHandle;
import de.uni_freiburg.informatik.ultimate.deltadebugger.core.IVariantGenerator;
import de.uni_freiburg.informatik.ultimate.deltadebugger.core.search.minimizers.IDuplicateVariantTracker;
import de.uni_freiburg.informatik.ultimate.deltadebugger.core.search.minimizers.IMinimizerStep;

/**
 * Holds the state of one search step for the best reduced source code variant.
 *
 * Combines the VariantGenerator and MinimizerStep interfaces into a single iterable search step that supports
 * speculative searching.
 */
public interface IGeneratorSearchStep extends ISearchStep<String, IGeneratorSearchStep> {
	/**
	 * @return the current set of active changes to be tested
	 */
	List<IChangeHandle> getActiveChanges();

	/**
	 * @return the utilized duplicate tracker to filter duplicate variants generated by the minimizer
	 */
	IDuplicateVariantTracker<IChangeHandle> getDuplicateTracker();

	/**
	 * @return the current minimizer step, holding the current set of <em>in</em>active changes
	 */
	IMinimizerStep<IChangeHandle> getMinimizerStep();

	/**
	 * @return getVariantGenerator().apply(getActiveChanges())
	 */
	@Override
	String getVariant();

	/**
	 * @return the current VariantGenerator
	 */
	IVariantGenerator getVariantGenerator();

	/**
	 * Updates the duplicate tracker once the actual test result of this step is known.
	 *
	 * @param keepVariant
	 */
	default void updateDuplicateTrackerWithTestResult(final boolean keepVariant) {
		if (keepVariant) {
			getDuplicateTracker().removeLargerVariants(getMinimizerStep().getVariant().size());
		} else {
			getDuplicateTracker().add(getMinimizerStep().getVariant());
		}
	}
}
