/* AtomicStatement -- Automatically generated by TreeBuilder (2018-11-11T09:25Z) */

package de.uni_freiburg.informatik.ultimate.boogie.ast;

import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import de.uni_freiburg.informatik.ultimate.core.model.models.ILocation;
import de.uni_freiburg.informatik.ultimate.boogie.ast.BoogieASTNode;
/**
 * The atomic statement. Used for concurrent programs.
 * At the verification process with other threads, the whole body of
 * the atomic statement is checked with each statement of the other
 * thread instead of checking each statement within the atomic body with
 * each statement of the other thread.
 */
public class AtomicStatement extends Statement {
    private static final long serialVersionUID = 1L;
    private static final java.util.function.Predicate<BoogieASTNode> VALIDATOR = 
			BoogieASTNode.VALIDATORS.get(AtomicStatement.class);
    /**
     * Body of the atomic statement.
     */
    Statement[] body;

    /**
     * The constructor taking initial values.
     * @param loc the location of this node
     * @param body body of the atomic statement.
     */
    public AtomicStatement(ILocation loc, Statement[] body) {
        super(loc);
        this.body = body;
        assert VALIDATOR == null || VALIDATOR.test(this) : "Invalid AtomicStatement: " + this;
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("AtomicStatement").append('[');
        if (body == null) {
            sb.append("null");
        } else {
            sb.append('[');
            for(int i1 = 0; i1 < body.length; i1++) {
                if (i1 > 0) sb.append(',');
                    sb.append(body[i1]);
            }
            sb.append(']');
        }
        return sb.append(']').toString();
    }

    /**
     * Gets body of the atomic statement.
     * @return body of the atomic statement.
     */
    public Statement[] getBody() {
        return body;
    }

    public List<BoogieASTNode> getOutgoingNodes() {
        List<BoogieASTNode> children = super.getOutgoingNodes();
        if(body!=null){
            children.addAll(Arrays.asList(body));
        }
        return children;
    }

    public void accept(GeneratedBoogieAstVisitor visitor) {
        if (visitor.visit((Statement)this)) {
            //visit parent types higher up if necessary
        } else {
            return;
        }
        if (visitor.visit(this)) {
            if(body!=null){
                for (Statement elem : body) {
                    elem.accept(visitor);
                }
            }
        }
    }

    public Statement accept(GeneratedBoogieAstTransformer visitor) {
        Statement node = visitor.transform(this);
        if(node != this){
            return node;
        }

        boolean isChanged=false;
            ArrayList<Statement> tmpListnewbody = new ArrayList<>();
        if(body != null){
            for(Statement elem : body){
                Statement newbody = (Statement)elem.accept(visitor);
                isChanged = isChanged || newbody != elem;
                tmpListnewbody.add(newbody);
            }
        }
        if(isChanged){
            return new AtomicStatement(loc, tmpListnewbody.toArray(new Statement[0]));
        }
        return this;
    }
}
