package de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.pathinvariants.internal;

import de.uni_freiburg.informatik.ultimate.logic.Term;
import de.uni_freiburg.informatik.ultimate.modelcheckerutils.boogie.TransFormula;

/**
 * A predicate formula representing a transition between two program points with
 * given invariant patterns.
 * 
 * If all InvariantTransitionPredicates of a program are fulfilled by an
 * assignment on variables within the invariant pattern, a valid invariant map
 * can be generated by inserting that particular assignment into the invariant
 * map.
 */
public class InvariantTransitionPredicate {
	private final Term invStart;
	private final Term invEnd;
	private final TransFormula transition;

	/**
	 * Creates a invariant transition predicate from two given invariant
	 * patterns and a connecting {@link TransFormula}.
	 * 
	 * Invariant patterns are represented as {@link Term}s containing both
	 * program variables and pattern variables. See TODO for details on naming
	 * conventions.
	 * 
	 * @param invStart
	 *            the invariant at the transition's start location
	 * @param invEnd
	 *            the invariant at the transition's end location
	 * @param transition
	 *            the TransFormula describing the transition's behavior
	 */
	public InvariantTransitionPredicate(final Term invStart, final Term invEnd,
			final TransFormula transition) {
		this.invStart = invStart;
		this.invEnd = invEnd;
		this.transition = transition;
	}

	/**
	 * Returns the invariant at the transition's start location.
	 * 
	 * @return invariant at the transition's start location
	 */
	public final Term getInvStart() {
		return invStart;
	}

	/**
	 * Returns the invariant at the transition's end location.
	 * 
	 * @return invariant at the transition's end location.
	 */
	public final Term getInvEnd() {
		return invEnd;
	}

	/**
	 * Returns the {@link TransFormula} describing the transition's behavior.
	 * 
	 * @return TransFormula describing the transition's behavior
	 */
	public final TransFormula getTransition() {
		return transition;
	}
}
