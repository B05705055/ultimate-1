/*
 * Copyright (C) 2015 Dirk Steinmetz
 * Copyright (C) 2015 University of Freiburg
 * 
 * This file is part of the ULTIMATE TraceAbstraction plug-in.
 * 
 * The ULTIMATE TraceAbstraction plug-in is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The ULTIMATE TraceAbstraction plug-in is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with the ULTIMATE TraceAbstraction plug-in. If not, see <http://www.gnu.org/licenses/>.
 * 
 * Additional permission under GNU GPL version 3 section 7:
 * If you modify the ULTIMATE TraceAbstraction plug-in, or any covered work, by linking
 * or combining it with Eclipse RCP (or a modified version of Eclipse RCP), 
 * containing parts covered by the terms of the Eclipse Public License, the 
 * licensors of the ULTIMATE TraceAbstraction plug-in grant you additional permission 
 * to convey the resulting work.
 */
package de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.pathinvariants.internal;

import de.uni_freiburg.informatik.ultimate.logic.ApplicationTerm;
import de.uni_freiburg.informatik.ultimate.logic.Term;
import de.uni_freiburg.informatik.ultimate.logic.TermTransformer;
import de.uni_freiburg.informatik.ultimate.logic.TermVariable;
import de.uni_freiburg.informatik.ultimate.modelcheckerutils.boogie.Boogie2SMT;
import de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.Substitution;
import de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript;
import de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singleTraceCheck.PredicateUnifier;

/**
 * Abstract base for {@link IInvariantPatternProcessor}s using SMT.
 * 
 * @param <IPT>
 *            Invariant Pattern Type: Type used for invariant patterns
 */
public abstract class AbstractSMTInvariantPatternProcessor<IPT> implements
		IInvariantPatternProcessor<IPT> {

	protected final PredicateUnifier predicateUnifier;
	protected final ManagedScript mScript;

	/**
	 * Creates a new pattern processor based on SMT.
	 * 
	 * @param predicateUnifier
	 *            predicate unifier to unify predicates with
	 * @param script
	 *            SMT manager to access {@link Boogie2SMT} through
	 */
	public AbstractSMTInvariantPatternProcessor(
			final PredicateUnifier predicateUnifier,
			final ManagedScript script) {
		this.predicateUnifier = predicateUnifier;
		this.mScript = script;
	}

	/**
	 * Converts an invariant pattern type to a {@link Term} containing both
	 * program variables ({@link TermVariable}s) and pattern variables ( for
	 * example {@link ApplicationTerm}s on new function symbols).
	 * 
	 * Names for pattern variables should be prefixed with an
	 * implementation-specific string and an underscore character to assert
	 * global uniqueness. See implementation for details on more specific naming
	 * conventions.
	 * 
	 * See {@link #getConfigurationTransformer()} on how pattern variables are
	 * handled.
	 * 
	 * @param pattern
	 *            pattern to convert
	 * @return converted term
	 */
	protected abstract Term getTermForPattern(IPT pattern);

	/**
	 * Provides access to a {@link TermTransformer} replacing pattern variables
	 * within a term according to the current valid configuration (
	 * {@link #hasValidConfiguration(java.util.Collection, int)}).
	 * 
	 * If there is no current valid configuration, the behavior of this method
	 * is undefined.
	 * 
	 * The transformer must be able to transform any pattern-term generated by
	 * {@link #getTermForPattern(Object)} into a {@link Term} representing the
	 * program states covered by the pattern under the given configuration.
	 * 
	 * @see Substitution
	 * @return transformer replacing pattern variables
	 * 
	 */
	protected abstract TermTransformer getConfigurationTransformer();

	/**
	 * {@inheritDoc}
	 */
//	@Override
//	public IPredicate applyConfiguration(IPT pattern) {
//		final TermTransformer transformer = getConfigurationTransformer();
//		final Term term = transformer.transform(getTermForPattern(pattern));
//		return predicateUnifier.getOrConstructPredicate(TermVarsProc
//				.computeTermVarsProc(term, csToolkit.getBoogie2Smt()));
//	}
}
