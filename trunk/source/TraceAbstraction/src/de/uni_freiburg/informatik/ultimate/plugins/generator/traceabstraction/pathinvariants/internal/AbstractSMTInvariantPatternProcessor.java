package de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.pathinvariants.internal;

import de.uni_freiburg.informatik.ultimate.logic.ApplicationTerm;
import de.uni_freiburg.informatik.ultimate.logic.Term;
import de.uni_freiburg.informatik.ultimate.logic.TermTransformer;
import de.uni_freiburg.informatik.ultimate.logic.TermVariable;
import de.uni_freiburg.informatik.ultimate.modelcheckerutils.boogie.Boogie2SMT;
import de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.SafeSubstitution;
import de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.predicates.IPredicate;
import de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.predicates.TermVarsProc;
import de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.predicates.SmtManager;
import de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singleTraceCheck.PredicateUnifier;

/**
 * Abstract base for {@link IInvariantPatternProcessor}s using SMT.
 * 
 * @param <IPT>
 *            Invariant Pattern Type: Type used for invariant patterns
 */
public abstract class AbstractSMTInvariantPatternProcessor<IPT> implements
		IInvariantPatternProcessor<IPT> {

	protected final PredicateUnifier predicateUnifier;
	protected final SmtManager smtManager;

	/**
	 * Creates a new pattern processor based on SMT.
	 * 
	 * @param predicateUnifier
	 *            predicate unifier to unify predicates with
	 * @param smtManager
	 *            SMT manager to access {@link Boogie2SMT} through
	 */
	public AbstractSMTInvariantPatternProcessor(
			final PredicateUnifier predicateUnifier,
			final SmtManager smtManager) {
		this.predicateUnifier = predicateUnifier;
		this.smtManager = smtManager;
	}

	/**
	 * Converts an invariant pattern type to a {@link Term} containing both
	 * program variables ({@link TermVariable}s) and pattern variables ( for
	 * example {@link ApplicationTerm}s on new function symbols).
	 * 
	 * Names for pattern variables should be prefixed with an
	 * implementation-specific string and an underscore character to assert
	 * global uniqueness. See implementation for details on more specific naming
	 * conventions.
	 * 
	 * See {@link #getConfigurationTransformer()} on how pattern variables are
	 * handled.
	 * 
	 * @param pattern
	 *            pattern to convert
	 * @return converted term
	 */
	protected abstract Term getTermForPattern(IPT pattern);

	/**
	 * Provides access to a {@link TermTransformer} replacing pattern variables
	 * within a term according to the current valid configuration (
	 * {@link #findValidConfiguration(java.util.Collection, int)}).
	 * 
	 * If there is no current valid configuration, the behavior of this method
	 * is undefined.
	 * 
	 * The transformer must be able to transform any pattern-term generated by
	 * {@link #getTermForPattern(Object)} into a {@link Term} representing the
	 * program states covered by the pattern under the given configuration.
	 * 
	 * @see SafeSubstitution
	 * @return transformer replacing pattern variables
	 * 
	 */
	protected abstract TermTransformer getConfigurationTransformer();

	/**
	 * {@inheritDoc}
	 */
	@Override
	public IPredicate applyConfiguration(IPT pattern) {
		final TermTransformer transformer = getConfigurationTransformer();
		final Term term = transformer.transform(getTermForPattern(pattern));
		return predicateUnifier.getOrConstructPredicate(TermVarsProc
				.computeTermVarsProc(term, smtManager.getBoogie2Smt()));
	}
}
