/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.uni_freiburg.informatik.ultimate.automata.parser.TestGrammar.analysis;

import java.util.*;
import de.uni_freiburg.informatik.ultimate.automata.parser.TestGrammar.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPTestFile().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inATestFile(ATestFile node)
    {
        defaultIn(node);
    }

    public void outATestFile(ATestFile node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATestFile(ATestFile node)
    {
        inATestFile(node);
        {
            List<PTestCase> copy = new ArrayList<PTestCase>(node.getTestCase());
            for(PTestCase e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAutomatonDefinition> copy = new ArrayList<PAutomatonDefinition>(node.getAutomatonDefinition());
            for(PAutomatonDefinition e : copy)
            {
                e.apply(this);
            }
        }
        outATestFile(node);
    }

    public void inANestedWordTestCase(ANestedWordTestCase node)
    {
        defaultIn(node);
    }

    public void outANestedWordTestCase(ANestedWordTestCase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedWordTestCase(ANestedWordTestCase node)
    {
        inANestedWordTestCase(node);
        if(node.getTestOperation() != null)
        {
            node.getTestOperation().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getNestedWord() != null)
        {
            node.getNestedWord().apply(this);
        }
        outANestedWordTestCase(node);
    }

    public void inANestedLassoWordTestCase(ANestedLassoWordTestCase node)
    {
        defaultIn(node);
    }

    public void outANestedLassoWordTestCase(ANestedLassoWordTestCase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedLassoWordTestCase(ANestedLassoWordTestCase node)
    {
        inANestedLassoWordTestCase(node);
        if(node.getTestOperation() != null)
        {
            node.getTestOperation().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getStem() != null)
        {
            node.getStem().apply(this);
        }
        if(node.getLoop() != null)
        {
            node.getLoop().apply(this);
        }
        outANestedLassoWordTestCase(node);
    }

    public void inANoWordTestCase(ANoWordTestCase node)
    {
        defaultIn(node);
    }

    public void outANoWordTestCase(ANoWordTestCase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoWordTestCase(ANoWordTestCase node)
    {
        inANoWordTestCase(node);
        if(node.getTestOperation() != null)
        {
            node.getTestOperation().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANoWordTestCase(node);
    }

    public void inAOperationExpression(AOperationExpression node)
    {
        defaultIn(node);
    }

    public void outAOperationExpression(AOperationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperationExpression(AOperationExpression node)
    {
        inAOperationExpression(node);
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getExpressions());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAOperationExpression(node);
    }

    public void inAAutomatonNameExpression(AAutomatonNameExpression node)
    {
        defaultIn(node);
    }

    public void outAAutomatonNameExpression(AAutomatonNameExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAutomatonNameExpression(AAutomatonNameExpression node)
    {
        inAAutomatonNameExpression(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAAutomatonNameExpression(node);
    }

    public void inACallTaggedSymbol(ACallTaggedSymbol node)
    {
        defaultIn(node);
    }

    public void outACallTaggedSymbol(ACallTaggedSymbol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallTaggedSymbol(ACallTaggedSymbol node)
    {
        inACallTaggedSymbol(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        outACallTaggedSymbol(node);
    }

    public void inAInternalTaggedSymbol(AInternalTaggedSymbol node)
    {
        defaultIn(node);
    }

    public void outAInternalTaggedSymbol(AInternalTaggedSymbol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInternalTaggedSymbol(AInternalTaggedSymbol node)
    {
        inAInternalTaggedSymbol(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        outAInternalTaggedSymbol(node);
    }

    public void inAReturnTaggedSymbol(AReturnTaggedSymbol node)
    {
        defaultIn(node);
    }

    public void outAReturnTaggedSymbol(AReturnTaggedSymbol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnTaggedSymbol(AReturnTaggedSymbol node)
    {
        inAReturnTaggedSymbol(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        outAReturnTaggedSymbol(node);
    }

    public void inANestedWord(ANestedWord node)
    {
        defaultIn(node);
    }

    public void outANestedWord(ANestedWord node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedWord(ANestedWord node)
    {
        inANestedWord(node);
        {
            List<PTaggedSymbol> copy = new ArrayList<PTaggedSymbol>(node.getNestedWord());
            for(PTaggedSymbol e : copy)
            {
                e.apply(this);
            }
        }
        outANestedWord(node);
    }

    public void inACallTransition(ACallTransition node)
    {
        defaultIn(node);
    }

    public void outACallTransition(ACallTransition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallTransition(ACallTransition node)
    {
        inACallTransition(node);
        if(node.getPredecessor() != null)
        {
            node.getPredecessor().apply(this);
        }
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        if(node.getSuccessor() != null)
        {
            node.getSuccessor().apply(this);
        }
        outACallTransition(node);
    }

    public void inAInternalTransition(AInternalTransition node)
    {
        defaultIn(node);
    }

    public void outAInternalTransition(AInternalTransition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInternalTransition(AInternalTransition node)
    {
        inAInternalTransition(node);
        if(node.getPredecessor() != null)
        {
            node.getPredecessor().apply(this);
        }
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        if(node.getSuccessor() != null)
        {
            node.getSuccessor().apply(this);
        }
        outAInternalTransition(node);
    }

    public void inAReturnTransition(AReturnTransition node)
    {
        defaultIn(node);
    }

    public void outAReturnTransition(AReturnTransition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnTransition(AReturnTransition node)
    {
        inAReturnTransition(node);
        if(node.getPredecessor() != null)
        {
            node.getPredecessor().apply(this);
        }
        if(node.getLinearPredecessor() != null)
        {
            node.getLinearPredecessor().apply(this);
        }
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        if(node.getSuccessor() != null)
        {
            node.getSuccessor().apply(this);
        }
        outAReturnTransition(node);
    }

    public void inANetTransition(ANetTransition node)
    {
        defaultIn(node);
    }

    public void outANetTransition(ANetTransition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANetTransition(ANetTransition node)
    {
        inANetTransition(node);
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getPredecessors());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getSuccessors());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outANetTransition(node);
    }

    public void inAMarking(AMarking node)
    {
        defaultIn(node);
    }

    public void outAMarking(AMarking node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarking(AMarking node)
    {
        inAMarking(node);
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getPlaces());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAMarking(node);
    }

    public void inANwaAutomatonDefinition(ANwaAutomatonDefinition node)
    {
        defaultIn(node);
    }

    public void outANwaAutomatonDefinition(ANwaAutomatonDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANwaAutomatonDefinition(ANwaAutomatonDefinition node)
    {
        inANwaAutomatonDefinition(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getCallAlphabet());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getInternalAlphabet());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getReturnAlphabet());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getStates());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getInitialStates());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getFinalStates());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PCallTransition> copy = new ArrayList<PCallTransition>(node.getCallTransitions());
            for(PCallTransition e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PInternalTransition> copy = new ArrayList<PInternalTransition>(node.getInternalTransitions());
            for(PInternalTransition e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PReturnTransition> copy = new ArrayList<PReturnTransition>(node.getReturnTransitions());
            for(PReturnTransition e : copy)
            {
                e.apply(this);
            }
        }
        outANwaAutomatonDefinition(node);
    }

    public void inANetjanAutomatonDefinition(ANetjanAutomatonDefinition node)
    {
        defaultIn(node);
    }

    public void outANetjanAutomatonDefinition(ANetjanAutomatonDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANetjanAutomatonDefinition(ANetjanAutomatonDefinition node)
    {
        inANetjanAutomatonDefinition(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getAlphabet());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getPlaces());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PNetTransition> copy = new ArrayList<PNetTransition>(node.getTransitions());
            for(PNetTransition e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInitialMarking() != null)
        {
            node.getInitialMarking().apply(this);
        }
        {
            List<PMarking> copy = new ArrayList<PMarking>(node.getAcceptingMarkings());
            for(PMarking e : copy)
            {
                e.apply(this);
            }
        }
        outANetjanAutomatonDefinition(node);
    }

    public void inANetjulianAutomatonDefinition(ANetjulianAutomatonDefinition node)
    {
        defaultIn(node);
    }

    public void outANetjulianAutomatonDefinition(ANetjulianAutomatonDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANetjulianAutomatonDefinition(ANetjulianAutomatonDefinition node)
    {
        inANetjulianAutomatonDefinition(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getAlphabet());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getPlaces());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PNetTransition> copy = new ArrayList<PNetTransition>(node.getTransitions());
            for(PNetTransition e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInitialMarking() != null)
        {
            node.getInitialMarking().apply(this);
        }
        {
            List<PIdentifier> copy = new ArrayList<PIdentifier>(node.getAcceptingPlaces());
            for(PIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outANetjulianAutomatonDefinition(node);
    }

    public void inAUnquotedIdentifier(AUnquotedIdentifier node)
    {
        defaultIn(node);
    }

    public void outAUnquotedIdentifier(AUnquotedIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnquotedIdentifier(AUnquotedIdentifier node)
    {
        inAUnquotedIdentifier(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAUnquotedIdentifier(node);
    }

    public void inAQuotedIdentifier(AQuotedIdentifier node)
    {
        defaultIn(node);
    }

    public void outAQuotedIdentifier(AQuotedIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuotedIdentifier(AQuotedIdentifier node)
    {
        inAQuotedIdentifier(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAQuotedIdentifier(node);
    }
}
