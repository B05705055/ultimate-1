/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.uni_freiburg.informatik.ultimate.automata.parser.TestGrammar.node;

import java.util.*;
import de.uni_freiburg.informatik.ultimate.automata.parser.TestGrammar.analysis.*;

@SuppressWarnings("nls")
public final class AOperationExpression extends PExpression
{
    private TIdUnquoted _operation_;
    private final LinkedList<PExpression> _expressions_ = new LinkedList<PExpression>();

    public AOperationExpression()
    {
        // Constructor
    }

    public AOperationExpression(
        @SuppressWarnings("hiding") TIdUnquoted _operation_,
        @SuppressWarnings("hiding") List<PExpression> _expressions_)
    {
        // Constructor
        setOperation(_operation_);

        setExpressions(_expressions_);

    }

    @Override
    public Object clone()
    {
        return new AOperationExpression(
            cloneNode(this._operation_),
            cloneList(this._expressions_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOperationExpression(this);
    }

    public TIdUnquoted getOperation()
    {
        return this._operation_;
    }

    public void setOperation(TIdUnquoted node)
    {
        if(this._operation_ != null)
        {
            this._operation_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._operation_ = node;
    }

    public LinkedList<PExpression> getExpressions()
    {
        return this._expressions_;
    }

    public void setExpressions(List<PExpression> list)
    {
        this._expressions_.clear();
        this._expressions_.addAll(list);
        for(PExpression e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._operation_)
            + toString(this._expressions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._operation_ == child)
        {
            this._operation_ = null;
            return;
        }

        if(this._expressions_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._operation_ == oldChild)
        {
            setOperation((TIdUnquoted) newChild);
            return;
        }

        for(ListIterator<PExpression> i = this._expressions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpression) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
