/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.uni_freiburg.informatik.ultimate.automata.parser.TestGrammar.lexer;

import java.io.*;
import de.uni_freiburg.informatik.ultimate.automata.parser.TestGrammar.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhiteSpace(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComment(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEqual(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLParen(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRParen(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBrace(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBrace(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBrak(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBrak(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new THash(line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdUnquoted(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdQuoted(text, line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCallTag(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TReturnTag(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNwa(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNet(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCallAlphabet(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInternalAlphabet(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TReturnAlphabet(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStates(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInitialStates(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFinalStates(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCallTransitions(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInternalTransitions(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TReturnTransitions(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAlphabet(line, pos); }
    Token new27(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPlaces(line, pos); }
    Token new28(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNetTransitions(line, pos); }
    Token new29(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInitialMarking(line, pos); }
    Token new30(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAcceptingMarkings(line, pos); }
    Token new31(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAcceptingPlaces(line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {34, 34, 5}, {35, 35, 6}, {40, 40, 7}, {41, 41, 8}, {44, 44, 9}, {47, 47, 10}, {48, 57, 11}, {58, 58, 12}, {60, 60, 13}, {62, 62, 14}, {65, 90, 15}, {91, 91, 16}, {93, 93, 17}, {95, 95, 18}, {97, 122, 19}, {123, 123, 20}, {125, 125, 21}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 22}, {13, 32, -2}, },
            {{9, 32, -2}, },
            {{32, 32, 23}, {33, 33, 24}, {35, 35, 25}, {36, 36, 26}, {38, 38, 27}, {39, 39, 28}, {40, 40, 29}, {41, 41, 30}, {42, 42, 31}, {43, 43, 32}, {44, 44, 33}, {45, 45, 34}, {46, 46, 35}, {47, 47, 36}, {48, 57, 37}, {58, 58, 38}, {59, 59, 39}, {60, 60, 40}, {61, 61, 41}, {62, 62, 42}, {65, 90, 43}, {91, 91, 44}, {93, 93, 45}, {95, 95, 46}, {97, 122, 47}, {123, 123, 48}, {124, 124, 49}, {125, 125, 50}, {126, 126, 51}, {8364, 8364, 52}, },
            {{97, 97, 53}, {99, 99, 54}, {102, 102, 55}, {105, 105, 56}, {110, 110, 57}, {112, 112, 58}, {114, 114, 59}, {115, 115, 60}, {116, 116, 61}, },
            {},
            {},
            {},
            {{47, 47, 62}, },
            {{48, 57, 11}, {65, 90, 15}, {95, 122, -2}, },
            {{61, 61, 63}, },
            {},
            {},
            {{48, 122, -13}, },
            {},
            {},
            {{48, 122, -13}, },
            {{48, 122, -13}, },
            {},
            {},
            {{9, 32, -2}, },
            {{32, 33, -7}, {34, 34, 64}, {35, 8364, -7}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{32, 8364, -25}, },
            {{99, 99, 65}, {108, 108, 66}, },
            {{97, 97, 67}, },
            {{105, 105, 68}, },
            {{110, 110, 69}, },
            {{101, 101, 70}, {119, 119, 71}, },
            {{108, 108, 72}, },
            {{101, 101, 73}, },
            {{116, 116, 74}, },
            {{114, 114, 75}, },
            {{0, 9, 76}, {10, 10, 77}, {11, 12, 76}, {13, 13, 78}, {14, 65535, 76}, },
            {},
            {},
            {{99, 99, 79}, },
            {{112, 112, 80}, },
            {{108, 108, 81}, },
            {{110, 110, 82}, },
            {{105, 105, 83}, {116, 116, 84}, },
            {{116, 116, 85}, },
            {{97, 97, 86}, },
            {{97, 97, 87}, },
            {{116, 116, 88}, },
            {{97, 97, 89}, },
            {{97, 97, 90}, },
            {{0, 65535, -64}, },
            {},
            {{10, 10, 91}, },
            {{101, 101, 92}, },
            {{104, 104, 93}, },
            {{108, 108, 94}, },
            {{97, 97, 95}, },
            {{116, 116, 96}, },
            {{101, 101, 97}, },
            {},
            {},
            {{99, 99, 98}, },
            {{117, 117, 99}, },
            {{116, 116, 100}, },
            {{110, 110, 101}, },
            {},
            {{112, 112, 102}, },
            {{97, 97, 103}, },
            {{65, 65, 104}, {84, 84, 105}, },
            {{108, 108, 106}, },
            {{105, 105, 107}, },
            {{114, 114, 108}, },
            {{101, 101, 109}, },
            {{114, 114, 110}, },
            {{101, 101, 111}, },
            {{115, 115, 112}, },
            {{116, 116, 113}, },
            {{98, 98, 114}, },
            {{108, 108, 115}, },
            {{114, 114, 116}, },
            {{83, 83, 117}, },
            {{97, 97, 118}, },
            {{110, 110, 119}, },
            {{115, 115, 120}, },
            {{110, 110, 121}, },
            {{115, 115, 122}, },
            {{105, 105, 123}, },
            {{105, 105, 124}, },
            {{101, 101, 125}, },
            {{112, 112, 126}, },
            {{97, 97, 127}, },
            {{116, 116, 128}, },
            {{108, 108, 129}, },
            {{97, 97, 130}, },
            {},
            {{65, 65, 131}, {84, 84, 132}, },
            {},
            {{116, 116, 133}, },
            {{110, 110, 134}, },
            {{116, 116, 135}, },
            {{104, 104, 136}, },
            {{110, 110, 137}, },
            {{97, 97, 138}, },
            {{77, 77, 139}, {83, 83, 140}, },
            {{108, 108, 141}, },
            {{108, 108, 142}, },
            {{114, 114, 143}, },
            {{105, 105, 144}, },
            {{103, 103, 145}, },
            {},
            {{97, 97, 146}, },
            {{115, 115, 147}, },
            {{116, 116, 148}, },
            {{97, 97, 149}, },
            {{116, 116, 150}, },
            {{65, 65, 151}, {84, 84, 152}, },
            {{112, 112, 153}, },
            {{97, 97, 154}, },
            {{111, 111, 155}, },
            {{77, 77, 156}, {80, 80, 157}, },
            {{98, 98, 158}, },
            {{105, 105, 159}, },
            {{101, 101, 160}, },
            {{114, 114, 161}, },
            {{97, 97, 162}, },
            {{108, 108, 163}, },
            {{114, 114, 164}, },
            {{104, 104, 165}, },
            {{110, 110, 166}, },
            {{110, 110, 167}, },
            {{97, 97, 168}, },
            {{108, 108, 169}, },
            {{101, 101, 170}, },
            {{116, 116, 171}, },
            {{115, 115, 172}, },
            {{107, 107, 173}, },
            {{116, 116, 174}, },
            {{112, 112, 175}, },
            {{97, 97, 176}, },
            {{97, 97, 177}, },
            {{115, 115, 178}, },
            {{115, 115, 179}, },
            {{114, 114, 180}, },
            {{97, 97, 181}, },
            {{116, 116, 182}, },
            {{105, 105, 183}, },
            {},
            {{105, 105, 184}, },
            {{101, 101, 185}, },
            {{104, 104, 186}, },
            {{110, 110, 187}, },
            {{98, 98, 188}, },
            {{105, 105, 189}, },
            {},
            {{107, 107, 190}, },
            {{99, 99, 191}, },
            {},
            {{111, 111, 192}, },
            {{110, 110, 193}, },
            {{115, 115, 194}, },
            {{97, 97, 195}, },
            {{115, 115, 196}, },
            {{101, 101, 197}, },
            {{116, 116, 198}, },
            {{105, 105, 199}, },
            {{101, 101, 200}, },
            {{110, 110, 201}, },
            {{103, 103, 202}, },
            {},
            {{98, 98, 203}, },
            {{105, 105, 204}, },
            {{116, 116, 205}, },
            {{105, 105, 206}, },
            {{110, 110, 207}, },
            {{115, 115, 208}, },
            {{115, 115, 209}, },
            {},
            {{101, 101, 210}, },
            {{116, 116, 211}, },
            {},
            {{111, 111, 212}, },
            {{103, 103, 213}, },
            {},
            {},
            {{116, 116, 214}, },
            {{105, 105, 215}, },
            {{110, 110, 216}, },
            {{115, 115, 217}, },
            {},
            {{111, 111, 218}, },
            {{115, 115, 219}, },
            {},
            {{110, 110, 220}, },
            {},
            {{115, 115, 221}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 0, 0, 0, 0, -1, 10, 3, 4, 9, -1, 11, -1, 13, 14, 11, 7, 8, 11, 11, 5, 6, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 16, 15, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, 28, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, 19, -1, -1, 31, 23, -1, -1, -1, -1, 18, -1, -1, 30, -1, 25, -1, 24, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
