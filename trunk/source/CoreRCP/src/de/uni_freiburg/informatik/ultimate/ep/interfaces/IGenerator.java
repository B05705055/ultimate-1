package de.uni_freiburg.informatik.ultimate.ep.interfaces;

import de.uni_freiburg.informatik.ultimate.model.IElement;

/**
 * An {@link IGenerator} plugin creates a new model, typically from some input
 * provided by an {@link ISource} plugin.
 * 
 * @author dietsch
 * 
 */
public interface IGenerator extends IModifyingTool {

	/**
	 * The root node of the model the plugin generated. Will be called by
	 * Ultimate after {@link #getObservers()} was called and all observers have
	 * been run on the current model. May be null for some models.  
	 */
	IElement getModel();

	/**
	 * Each {@link IGenerator} plugin has to supply a {@link ITranslator} object
	 * that allows the core to translate from the model generated by this plugin
	 * and supplied by {@link #getModel()} back to the model this plugin
	 * received as input.
	 * 
	 * @see {@link ITranslator}, {@link IBacktranslationService}
	 * 
	 */
//	ITranslator<?, ?, ?, ?> getBacktranslator();
}
