/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.TestGrammar.node;

import java.util.*;
import local.TestGrammar.analysis.*;

@SuppressWarnings("nls")
public final class ANetTransition extends PNetTransition
{
    private final LinkedList<TId> _predecessors_ = new LinkedList<TId>();
    private TId _symbol_;
    private final LinkedList<TId> _successors_ = new LinkedList<TId>();

    public ANetTransition()
    {
        // Constructor
    }

    public ANetTransition(
        @SuppressWarnings("hiding") List<TId> _predecessors_,
        @SuppressWarnings("hiding") TId _symbol_,
        @SuppressWarnings("hiding") List<TId> _successors_)
    {
        // Constructor
        setPredecessors(_predecessors_);

        setSymbol(_symbol_);

        setSuccessors(_successors_);

    }

    @Override
    public Object clone()
    {
        return new ANetTransition(
            cloneList(this._predecessors_),
            cloneNode(this._symbol_),
            cloneList(this._successors_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANetTransition(this);
    }

    public LinkedList<TId> getPredecessors()
    {
        return this._predecessors_;
    }

    public void setPredecessors(List<TId> list)
    {
        this._predecessors_.clear();
        this._predecessors_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TId getSymbol()
    {
        return this._symbol_;
    }

    public void setSymbol(TId node)
    {
        if(this._symbol_ != null)
        {
            this._symbol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._symbol_ = node;
    }

    public LinkedList<TId> getSuccessors()
    {
        return this._successors_;
    }

    public void setSuccessors(List<TId> list)
    {
        this._successors_.clear();
        this._successors_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._predecessors_)
            + toString(this._symbol_)
            + toString(this._successors_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._predecessors_.remove(child))
        {
            return;
        }

        if(this._symbol_ == child)
        {
            this._symbol_ = null;
            return;
        }

        if(this._successors_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TId> i = this._predecessors_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._symbol_ == oldChild)
        {
            setSymbol((TId) newChild);
            return;
        }

        for(ListIterator<TId> i = this._successors_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
