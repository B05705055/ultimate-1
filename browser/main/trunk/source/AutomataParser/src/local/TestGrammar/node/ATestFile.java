/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.TestGrammar.node;

import java.util.*;
import local.TestGrammar.analysis.*;

@SuppressWarnings("nls")
public final class ATestFile extends PTestFile
{
    private final LinkedList<PTestCase> _testCase_ = new LinkedList<PTestCase>();
    private final LinkedList<PAutomatonDefinition> _automatonDefinition_ = new LinkedList<PAutomatonDefinition>();

    public ATestFile()
    {
        // Constructor
    }

    public ATestFile(
        @SuppressWarnings("hiding") List<PTestCase> _testCase_,
        @SuppressWarnings("hiding") List<PAutomatonDefinition> _automatonDefinition_)
    {
        // Constructor
        setTestCase(_testCase_);

        setAutomatonDefinition(_automatonDefinition_);

    }

    @Override
    public Object clone()
    {
        return new ATestFile(
            cloneList(this._testCase_),
            cloneList(this._automatonDefinition_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATestFile(this);
    }

    public LinkedList<PTestCase> getTestCase()
    {
        return this._testCase_;
    }

    public void setTestCase(List<PTestCase> list)
    {
        this._testCase_.clear();
        this._testCase_.addAll(list);
        for(PTestCase e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PAutomatonDefinition> getAutomatonDefinition()
    {
        return this._automatonDefinition_;
    }

    public void setAutomatonDefinition(List<PAutomatonDefinition> list)
    {
        this._automatonDefinition_.clear();
        this._automatonDefinition_.addAll(list);
        for(PAutomatonDefinition e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._testCase_)
            + toString(this._automatonDefinition_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._testCase_.remove(child))
        {
            return;
        }

        if(this._automatonDefinition_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PTestCase> i = this._testCase_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTestCase) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PAutomatonDefinition> i = this._automatonDefinition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAutomatonDefinition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
