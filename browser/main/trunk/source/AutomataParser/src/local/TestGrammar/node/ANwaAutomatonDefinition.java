/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.TestGrammar.node;

import java.util.*;
import local.TestGrammar.analysis.*;

@SuppressWarnings("nls")
public final class ANwaAutomatonDefinition extends PAutomatonDefinition
{
    private TId _name_;
    private final LinkedList<TId> _callAlphabet_ = new LinkedList<TId>();
    private final LinkedList<TId> _internalAlphabet_ = new LinkedList<TId>();
    private final LinkedList<TId> _returnAlphabet_ = new LinkedList<TId>();
    private final LinkedList<TId> _states_ = new LinkedList<TId>();
    private final LinkedList<TId> _initialStates_ = new LinkedList<TId>();
    private final LinkedList<TId> _finalStates_ = new LinkedList<TId>();
    private final LinkedList<PCallTransition> _callTransitions_ = new LinkedList<PCallTransition>();
    private final LinkedList<PInternalTransition> _internalTransitions_ = new LinkedList<PInternalTransition>();
    private final LinkedList<PReturnTransition> _returnTransitions_ = new LinkedList<PReturnTransition>();

    public ANwaAutomatonDefinition()
    {
        // Constructor
    }

    public ANwaAutomatonDefinition(
        @SuppressWarnings("hiding") TId _name_,
        @SuppressWarnings("hiding") List<TId> _callAlphabet_,
        @SuppressWarnings("hiding") List<TId> _internalAlphabet_,
        @SuppressWarnings("hiding") List<TId> _returnAlphabet_,
        @SuppressWarnings("hiding") List<TId> _states_,
        @SuppressWarnings("hiding") List<TId> _initialStates_,
        @SuppressWarnings("hiding") List<TId> _finalStates_,
        @SuppressWarnings("hiding") List<PCallTransition> _callTransitions_,
        @SuppressWarnings("hiding") List<PInternalTransition> _internalTransitions_,
        @SuppressWarnings("hiding") List<PReturnTransition> _returnTransitions_)
    {
        // Constructor
        setName(_name_);

        setCallAlphabet(_callAlphabet_);

        setInternalAlphabet(_internalAlphabet_);

        setReturnAlphabet(_returnAlphabet_);

        setStates(_states_);

        setInitialStates(_initialStates_);

        setFinalStates(_finalStates_);

        setCallTransitions(_callTransitions_);

        setInternalTransitions(_internalTransitions_);

        setReturnTransitions(_returnTransitions_);

    }

    @Override
    public Object clone()
    {
        return new ANwaAutomatonDefinition(
            cloneNode(this._name_),
            cloneList(this._callAlphabet_),
            cloneList(this._internalAlphabet_),
            cloneList(this._returnAlphabet_),
            cloneList(this._states_),
            cloneList(this._initialStates_),
            cloneList(this._finalStates_),
            cloneList(this._callTransitions_),
            cloneList(this._internalTransitions_),
            cloneList(this._returnTransitions_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANwaAutomatonDefinition(this);
    }

    public TId getName()
    {
        return this._name_;
    }

    public void setName(TId node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public LinkedList<TId> getCallAlphabet()
    {
        return this._callAlphabet_;
    }

    public void setCallAlphabet(List<TId> list)
    {
        this._callAlphabet_.clear();
        this._callAlphabet_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TId> getInternalAlphabet()
    {
        return this._internalAlphabet_;
    }

    public void setInternalAlphabet(List<TId> list)
    {
        this._internalAlphabet_.clear();
        this._internalAlphabet_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TId> getReturnAlphabet()
    {
        return this._returnAlphabet_;
    }

    public void setReturnAlphabet(List<TId> list)
    {
        this._returnAlphabet_.clear();
        this._returnAlphabet_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TId> getStates()
    {
        return this._states_;
    }

    public void setStates(List<TId> list)
    {
        this._states_.clear();
        this._states_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TId> getInitialStates()
    {
        return this._initialStates_;
    }

    public void setInitialStates(List<TId> list)
    {
        this._initialStates_.clear();
        this._initialStates_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TId> getFinalStates()
    {
        return this._finalStates_;
    }

    public void setFinalStates(List<TId> list)
    {
        this._finalStates_.clear();
        this._finalStates_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PCallTransition> getCallTransitions()
    {
        return this._callTransitions_;
    }

    public void setCallTransitions(List<PCallTransition> list)
    {
        this._callTransitions_.clear();
        this._callTransitions_.addAll(list);
        for(PCallTransition e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PInternalTransition> getInternalTransitions()
    {
        return this._internalTransitions_;
    }

    public void setInternalTransitions(List<PInternalTransition> list)
    {
        this._internalTransitions_.clear();
        this._internalTransitions_.addAll(list);
        for(PInternalTransition e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PReturnTransition> getReturnTransitions()
    {
        return this._returnTransitions_;
    }

    public void setReturnTransitions(List<PReturnTransition> list)
    {
        this._returnTransitions_.clear();
        this._returnTransitions_.addAll(list);
        for(PReturnTransition e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._callAlphabet_)
            + toString(this._internalAlphabet_)
            + toString(this._returnAlphabet_)
            + toString(this._states_)
            + toString(this._initialStates_)
            + toString(this._finalStates_)
            + toString(this._callTransitions_)
            + toString(this._internalTransitions_)
            + toString(this._returnTransitions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._callAlphabet_.remove(child))
        {
            return;
        }

        if(this._internalAlphabet_.remove(child))
        {
            return;
        }

        if(this._returnAlphabet_.remove(child))
        {
            return;
        }

        if(this._states_.remove(child))
        {
            return;
        }

        if(this._initialStates_.remove(child))
        {
            return;
        }

        if(this._finalStates_.remove(child))
        {
            return;
        }

        if(this._callTransitions_.remove(child))
        {
            return;
        }

        if(this._internalTransitions_.remove(child))
        {
            return;
        }

        if(this._returnTransitions_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TId) newChild);
            return;
        }

        for(ListIterator<TId> i = this._callAlphabet_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TId> i = this._internalAlphabet_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TId> i = this._returnAlphabet_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TId> i = this._states_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TId> i = this._initialStates_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TId> i = this._finalStates_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PCallTransition> i = this._callTransitions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCallTransition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PInternalTransition> i = this._internalTransitions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PInternalTransition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PReturnTransition> i = this._returnTransitions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PReturnTransition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
