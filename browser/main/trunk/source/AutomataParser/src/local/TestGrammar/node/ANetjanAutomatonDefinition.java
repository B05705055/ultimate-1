/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.TestGrammar.node;

import java.util.*;
import local.TestGrammar.analysis.*;

@SuppressWarnings("nls")
public final class ANetjanAutomatonDefinition extends PAutomatonDefinition
{
    private TId _name_;
    private final LinkedList<TId> _alphabet_ = new LinkedList<TId>();
    private final LinkedList<TId> _places_ = new LinkedList<TId>();
    private final LinkedList<PNetTransition> _transitions_ = new LinkedList<PNetTransition>();
    private PMarking _initialMarking_;
    private final LinkedList<PMarking> _acceptingMarkings_ = new LinkedList<PMarking>();

    public ANetjanAutomatonDefinition()
    {
        // Constructor
    }

    public ANetjanAutomatonDefinition(
        @SuppressWarnings("hiding") TId _name_,
        @SuppressWarnings("hiding") List<TId> _alphabet_,
        @SuppressWarnings("hiding") List<TId> _places_,
        @SuppressWarnings("hiding") List<PNetTransition> _transitions_,
        @SuppressWarnings("hiding") PMarking _initialMarking_,
        @SuppressWarnings("hiding") List<PMarking> _acceptingMarkings_)
    {
        // Constructor
        setName(_name_);

        setAlphabet(_alphabet_);

        setPlaces(_places_);

        setTransitions(_transitions_);

        setInitialMarking(_initialMarking_);

        setAcceptingMarkings(_acceptingMarkings_);

    }

    @Override
    public Object clone()
    {
        return new ANetjanAutomatonDefinition(
            cloneNode(this._name_),
            cloneList(this._alphabet_),
            cloneList(this._places_),
            cloneList(this._transitions_),
            cloneNode(this._initialMarking_),
            cloneList(this._acceptingMarkings_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANetjanAutomatonDefinition(this);
    }

    public TId getName()
    {
        return this._name_;
    }

    public void setName(TId node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public LinkedList<TId> getAlphabet()
    {
        return this._alphabet_;
    }

    public void setAlphabet(List<TId> list)
    {
        this._alphabet_.clear();
        this._alphabet_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TId> getPlaces()
    {
        return this._places_;
    }

    public void setPlaces(List<TId> list)
    {
        this._places_.clear();
        this._places_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PNetTransition> getTransitions()
    {
        return this._transitions_;
    }

    public void setTransitions(List<PNetTransition> list)
    {
        this._transitions_.clear();
        this._transitions_.addAll(list);
        for(PNetTransition e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PMarking getInitialMarking()
    {
        return this._initialMarking_;
    }

    public void setInitialMarking(PMarking node)
    {
        if(this._initialMarking_ != null)
        {
            this._initialMarking_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._initialMarking_ = node;
    }

    public LinkedList<PMarking> getAcceptingMarkings()
    {
        return this._acceptingMarkings_;
    }

    public void setAcceptingMarkings(List<PMarking> list)
    {
        this._acceptingMarkings_.clear();
        this._acceptingMarkings_.addAll(list);
        for(PMarking e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._alphabet_)
            + toString(this._places_)
            + toString(this._transitions_)
            + toString(this._initialMarking_)
            + toString(this._acceptingMarkings_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._alphabet_.remove(child))
        {
            return;
        }

        if(this._places_.remove(child))
        {
            return;
        }

        if(this._transitions_.remove(child))
        {
            return;
        }

        if(this._initialMarking_ == child)
        {
            this._initialMarking_ = null;
            return;
        }

        if(this._acceptingMarkings_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TId) newChild);
            return;
        }

        for(ListIterator<TId> i = this._alphabet_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TId> i = this._places_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PNetTransition> i = this._transitions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PNetTransition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._initialMarking_ == oldChild)
        {
            setInitialMarking((PMarking) newChild);
            return;
        }

        for(ListIterator<PMarking> i = this._acceptingMarkings_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMarking) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
