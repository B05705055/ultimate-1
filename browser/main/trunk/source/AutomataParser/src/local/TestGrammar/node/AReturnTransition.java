/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.TestGrammar.node;

import local.TestGrammar.analysis.*;

@SuppressWarnings("nls")
public final class AReturnTransition extends PReturnTransition
{
    private TId _predecessor_;
    private TId _linearPredecessor_;
    private TId _symbol_;
    private TId _successor_;

    public AReturnTransition()
    {
        // Constructor
    }

    public AReturnTransition(
        @SuppressWarnings("hiding") TId _predecessor_,
        @SuppressWarnings("hiding") TId _linearPredecessor_,
        @SuppressWarnings("hiding") TId _symbol_,
        @SuppressWarnings("hiding") TId _successor_)
    {
        // Constructor
        setPredecessor(_predecessor_);

        setLinearPredecessor(_linearPredecessor_);

        setSymbol(_symbol_);

        setSuccessor(_successor_);

    }

    @Override
    public Object clone()
    {
        return new AReturnTransition(
            cloneNode(this._predecessor_),
            cloneNode(this._linearPredecessor_),
            cloneNode(this._symbol_),
            cloneNode(this._successor_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAReturnTransition(this);
    }

    public TId getPredecessor()
    {
        return this._predecessor_;
    }

    public void setPredecessor(TId node)
    {
        if(this._predecessor_ != null)
        {
            this._predecessor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._predecessor_ = node;
    }

    public TId getLinearPredecessor()
    {
        return this._linearPredecessor_;
    }

    public void setLinearPredecessor(TId node)
    {
        if(this._linearPredecessor_ != null)
        {
            this._linearPredecessor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._linearPredecessor_ = node;
    }

    public TId getSymbol()
    {
        return this._symbol_;
    }

    public void setSymbol(TId node)
    {
        if(this._symbol_ != null)
        {
            this._symbol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._symbol_ = node;
    }

    public TId getSuccessor()
    {
        return this._successor_;
    }

    public void setSuccessor(TId node)
    {
        if(this._successor_ != null)
        {
            this._successor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._successor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._predecessor_)
            + toString(this._linearPredecessor_)
            + toString(this._symbol_)
            + toString(this._successor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._predecessor_ == child)
        {
            this._predecessor_ = null;
            return;
        }

        if(this._linearPredecessor_ == child)
        {
            this._linearPredecessor_ = null;
            return;
        }

        if(this._symbol_ == child)
        {
            this._symbol_ = null;
            return;
        }

        if(this._successor_ == child)
        {
            this._successor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._predecessor_ == oldChild)
        {
            setPredecessor((TId) newChild);
            return;
        }

        if(this._linearPredecessor_ == oldChild)
        {
            setLinearPredecessor((TId) newChild);
            return;
        }

        if(this._symbol_ == oldChild)
        {
            setSymbol((TId) newChild);
            return;
        }

        if(this._successor_ == oldChild)
        {
            setSuccessor((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
