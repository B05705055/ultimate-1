/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.TestGrammar.analysis;

import local.TestGrammar.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseATestFile(ATestFile node);
    void caseANestedWordTestCase(ANestedWordTestCase node);
    void caseANestedLassoWordTestCase(ANestedLassoWordTestCase node);
    void caseANoWordTestCase(ANoWordTestCase node);
    void caseAOperationExpression(AOperationExpression node);
    void caseAAutomatonNameExpression(AAutomatonNameExpression node);
    void caseACallTaggedSymbol(ACallTaggedSymbol node);
    void caseAInternalTaggedSymbol(AInternalTaggedSymbol node);
    void caseAReturnTaggedSymbol(AReturnTaggedSymbol node);
    void caseANestedWord(ANestedWord node);
    void caseACallTransition(ACallTransition node);
    void caseAInternalTransition(AInternalTransition node);
    void caseAReturnTransition(AReturnTransition node);
    void caseANetTransition(ANetTransition node);
    void caseAMarking(AMarking node);
    void caseANwaAutomatonDefinition(ANwaAutomatonDefinition node);
    void caseANetjanAutomatonDefinition(ANetjanAutomatonDefinition node);
    void caseANetjulianAutomatonDefinition(ANetjulianAutomatonDefinition node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTComment(TComment node);
    void caseTEqual(TEqual node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBrak(TLBrak node);
    void caseTRBrak(TRBrak node);
    void caseTComma(TComma node);
    void caseTHash(THash node);
    void caseTId(TId node);
    void caseTCallTag(TCallTag node);
    void caseTReturnTag(TReturnTag node);
    void caseTNwa(TNwa node);
    void caseTNet(TNet node);
    void caseTCallAlphabet(TCallAlphabet node);
    void caseTInternalAlphabet(TInternalAlphabet node);
    void caseTReturnAlphabet(TReturnAlphabet node);
    void caseTStates(TStates node);
    void caseTInitialStates(TInitialStates node);
    void caseTFinalStates(TFinalStates node);
    void caseTCallTransitions(TCallTransitions node);
    void caseTInternalTransitions(TInternalTransitions node);
    void caseTReturnTransitions(TReturnTransitions node);
    void caseTAlphabet(TAlphabet node);
    void caseTPlaces(TPlaces node);
    void caseTNetTransitions(TNetTransitions node);
    void caseTInitialMarking(TInitialMarking node);
    void caseTAcceptingMarkings(TAcceptingMarkings node);
    void caseTAcceptingPlaces(TAcceptingPlaces node);
    void caseEOF(EOF node);
}
