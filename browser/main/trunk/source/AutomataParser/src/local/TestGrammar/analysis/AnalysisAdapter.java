/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.TestGrammar.analysis;

import java.util.*;
import local.TestGrammar.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseATestFile(ATestFile node)
    {
        defaultCase(node);
    }

    public void caseANestedWordTestCase(ANestedWordTestCase node)
    {
        defaultCase(node);
    }

    public void caseANestedLassoWordTestCase(ANestedLassoWordTestCase node)
    {
        defaultCase(node);
    }

    public void caseANoWordTestCase(ANoWordTestCase node)
    {
        defaultCase(node);
    }

    public void caseAOperationExpression(AOperationExpression node)
    {
        defaultCase(node);
    }

    public void caseAAutomatonNameExpression(AAutomatonNameExpression node)
    {
        defaultCase(node);
    }

    public void caseACallTaggedSymbol(ACallTaggedSymbol node)
    {
        defaultCase(node);
    }

    public void caseAInternalTaggedSymbol(AInternalTaggedSymbol node)
    {
        defaultCase(node);
    }

    public void caseAReturnTaggedSymbol(AReturnTaggedSymbol node)
    {
        defaultCase(node);
    }

    public void caseANestedWord(ANestedWord node)
    {
        defaultCase(node);
    }

    public void caseACallTransition(ACallTransition node)
    {
        defaultCase(node);
    }

    public void caseAInternalTransition(AInternalTransition node)
    {
        defaultCase(node);
    }

    public void caseAReturnTransition(AReturnTransition node)
    {
        defaultCase(node);
    }

    public void caseANetTransition(ANetTransition node)
    {
        defaultCase(node);
    }

    public void caseAMarking(AMarking node)
    {
        defaultCase(node);
    }

    public void caseANwaAutomatonDefinition(ANwaAutomatonDefinition node)
    {
        defaultCase(node);
    }

    public void caseANetjanAutomatonDefinition(ANetjanAutomatonDefinition node)
    {
        defaultCase(node);
    }

    public void caseANetjulianAutomatonDefinition(ANetjulianAutomatonDefinition node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    public void caseTLParen(TLParen node)
    {
        defaultCase(node);
    }

    public void caseTRParen(TRParen node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTLBrak(TLBrak node)
    {
        defaultCase(node);
    }

    public void caseTRBrak(TRBrak node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTHash(THash node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTCallTag(TCallTag node)
    {
        defaultCase(node);
    }

    public void caseTReturnTag(TReturnTag node)
    {
        defaultCase(node);
    }

    public void caseTNwa(TNwa node)
    {
        defaultCase(node);
    }

    public void caseTNet(TNet node)
    {
        defaultCase(node);
    }

    public void caseTCallAlphabet(TCallAlphabet node)
    {
        defaultCase(node);
    }

    public void caseTInternalAlphabet(TInternalAlphabet node)
    {
        defaultCase(node);
    }

    public void caseTReturnAlphabet(TReturnAlphabet node)
    {
        defaultCase(node);
    }

    public void caseTStates(TStates node)
    {
        defaultCase(node);
    }

    public void caseTInitialStates(TInitialStates node)
    {
        defaultCase(node);
    }

    public void caseTFinalStates(TFinalStates node)
    {
        defaultCase(node);
    }

    public void caseTCallTransitions(TCallTransitions node)
    {
        defaultCase(node);
    }

    public void caseTInternalTransitions(TInternalTransitions node)
    {
        defaultCase(node);
    }

    public void caseTReturnTransitions(TReturnTransitions node)
    {
        defaultCase(node);
    }

    public void caseTAlphabet(TAlphabet node)
    {
        defaultCase(node);
    }

    public void caseTPlaces(TPlaces node)
    {
        defaultCase(node);
    }

    public void caseTNetTransitions(TNetTransitions node)
    {
        defaultCase(node);
    }

    public void caseTInitialMarking(TInitialMarking node)
    {
        defaultCase(node);
    }

    public void caseTAcceptingMarkings(TAcceptingMarkings node)
    {
        defaultCase(node);
    }

    public void caseTAcceptingPlaces(TAcceptingPlaces node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
