/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.stalin.automata.parser.TestGrammar.node;

import java.util.*;
import local.stalin.automata.parser.TestGrammar.analysis.*;

@SuppressWarnings("nls")
public final class AAbstractautomaton extends PAbstractautomaton
{
    private TId _name_;
    private final LinkedList<TId> _internalalphabet_ = new LinkedList<TId>();
    private final LinkedList<TId> _callalphabet_ = new LinkedList<TId>();
    private final LinkedList<TId> _returnalphabet_ = new LinkedList<TId>();
    private final LinkedList<TId> _initial_ = new LinkedList<TId>();
    private final LinkedList<TId> _states_ = new LinkedList<TId>();
    private final LinkedList<TId> _final_ = new LinkedList<TId>();
    private final LinkedList<PAbstractcall> _calltransitions_ = new LinkedList<PAbstractcall>();
    private final LinkedList<PAbstractinternal> _internaltransitions_ = new LinkedList<PAbstractinternal>();
    private final LinkedList<PAbstractreturn> _returntransitions_ = new LinkedList<PAbstractreturn>();

    public AAbstractautomaton()
    {
        // Constructor
    }

    public AAbstractautomaton(
        @SuppressWarnings("hiding") TId _name_,
        @SuppressWarnings("hiding") List<TId> _internalalphabet_,
        @SuppressWarnings("hiding") List<TId> _callalphabet_,
        @SuppressWarnings("hiding") List<TId> _returnalphabet_,
        @SuppressWarnings("hiding") List<TId> _initial_,
        @SuppressWarnings("hiding") List<TId> _states_,
        @SuppressWarnings("hiding") List<TId> _final_,
        @SuppressWarnings("hiding") List<PAbstractcall> _calltransitions_,
        @SuppressWarnings("hiding") List<PAbstractinternal> _internaltransitions_,
        @SuppressWarnings("hiding") List<PAbstractreturn> _returntransitions_)
    {
        // Constructor
        setName(_name_);

        setInternalalphabet(_internalalphabet_);

        setCallalphabet(_callalphabet_);

        setReturnalphabet(_returnalphabet_);

        setInitial(_initial_);

        setStates(_states_);

        setFinal(_final_);

        setCalltransitions(_calltransitions_);

        setInternaltransitions(_internaltransitions_);

        setReturntransitions(_returntransitions_);

    }

    @Override
    public Object clone()
    {
        return new AAbstractautomaton(
            cloneNode(this._name_),
            cloneList(this._internalalphabet_),
            cloneList(this._callalphabet_),
            cloneList(this._returnalphabet_),
            cloneList(this._initial_),
            cloneList(this._states_),
            cloneList(this._final_),
            cloneList(this._calltransitions_),
            cloneList(this._internaltransitions_),
            cloneList(this._returntransitions_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAbstractautomaton(this);
    }

    public TId getName()
    {
        return this._name_;
    }

    public void setName(TId node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public LinkedList<TId> getInternalalphabet()
    {
        return this._internalalphabet_;
    }

    public void setInternalalphabet(List<TId> list)
    {
        this._internalalphabet_.clear();
        this._internalalphabet_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TId> getCallalphabet()
    {
        return this._callalphabet_;
    }

    public void setCallalphabet(List<TId> list)
    {
        this._callalphabet_.clear();
        this._callalphabet_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TId> getReturnalphabet()
    {
        return this._returnalphabet_;
    }

    public void setReturnalphabet(List<TId> list)
    {
        this._returnalphabet_.clear();
        this._returnalphabet_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TId> getInitial()
    {
        return this._initial_;
    }

    public void setInitial(List<TId> list)
    {
        this._initial_.clear();
        this._initial_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TId> getStates()
    {
        return this._states_;
    }

    public void setStates(List<TId> list)
    {
        this._states_.clear();
        this._states_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TId> getFinal()
    {
        return this._final_;
    }

    public void setFinal(List<TId> list)
    {
        this._final_.clear();
        this._final_.addAll(list);
        for(TId e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PAbstractcall> getCalltransitions()
    {
        return this._calltransitions_;
    }

    public void setCalltransitions(List<PAbstractcall> list)
    {
        this._calltransitions_.clear();
        this._calltransitions_.addAll(list);
        for(PAbstractcall e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PAbstractinternal> getInternaltransitions()
    {
        return this._internaltransitions_;
    }

    public void setInternaltransitions(List<PAbstractinternal> list)
    {
        this._internaltransitions_.clear();
        this._internaltransitions_.addAll(list);
        for(PAbstractinternal e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PAbstractreturn> getReturntransitions()
    {
        return this._returntransitions_;
    }

    public void setReturntransitions(List<PAbstractreturn> list)
    {
        this._returntransitions_.clear();
        this._returntransitions_.addAll(list);
        for(PAbstractreturn e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._internalalphabet_)
            + toString(this._callalphabet_)
            + toString(this._returnalphabet_)
            + toString(this._initial_)
            + toString(this._states_)
            + toString(this._final_)
            + toString(this._calltransitions_)
            + toString(this._internaltransitions_)
            + toString(this._returntransitions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._internalalphabet_.remove(child))
        {
            return;
        }

        if(this._callalphabet_.remove(child))
        {
            return;
        }

        if(this._returnalphabet_.remove(child))
        {
            return;
        }

        if(this._initial_.remove(child))
        {
            return;
        }

        if(this._states_.remove(child))
        {
            return;
        }

        if(this._final_.remove(child))
        {
            return;
        }

        if(this._calltransitions_.remove(child))
        {
            return;
        }

        if(this._internaltransitions_.remove(child))
        {
            return;
        }

        if(this._returntransitions_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TId) newChild);
            return;
        }

        for(ListIterator<TId> i = this._internalalphabet_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TId> i = this._callalphabet_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TId> i = this._returnalphabet_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TId> i = this._initial_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TId> i = this._states_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TId> i = this._final_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TId) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PAbstractcall> i = this._calltransitions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAbstractcall) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PAbstractinternal> i = this._internaltransitions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAbstractinternal) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PAbstractreturn> i = this._returntransitions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAbstractreturn) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
