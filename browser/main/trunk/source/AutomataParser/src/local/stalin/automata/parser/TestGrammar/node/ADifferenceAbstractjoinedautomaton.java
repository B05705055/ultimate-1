/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.stalin.automata.parser.TestGrammar.node;

import local.stalin.automata.parser.TestGrammar.analysis.*;

@SuppressWarnings("nls")
public final class ADifferenceAbstractjoinedautomaton extends PAbstractjoinedautomaton
{
    private PAbstractjoinedautomaton _auto1_;
    private PAbstractjoinedautomaton _auto2_;

    public ADifferenceAbstractjoinedautomaton()
    {
        // Constructor
    }

    public ADifferenceAbstractjoinedautomaton(
        @SuppressWarnings("hiding") PAbstractjoinedautomaton _auto1_,
        @SuppressWarnings("hiding") PAbstractjoinedautomaton _auto2_)
    {
        // Constructor
        setAuto1(_auto1_);

        setAuto2(_auto2_);

    }

    @Override
    public Object clone()
    {
        return new ADifferenceAbstractjoinedautomaton(
            cloneNode(this._auto1_),
            cloneNode(this._auto2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADifferenceAbstractjoinedautomaton(this);
    }

    public PAbstractjoinedautomaton getAuto1()
    {
        return this._auto1_;
    }

    public void setAuto1(PAbstractjoinedautomaton node)
    {
        if(this._auto1_ != null)
        {
            this._auto1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._auto1_ = node;
    }

    public PAbstractjoinedautomaton getAuto2()
    {
        return this._auto2_;
    }

    public void setAuto2(PAbstractjoinedautomaton node)
    {
        if(this._auto2_ != null)
        {
            this._auto2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._auto2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._auto1_)
            + toString(this._auto2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._auto1_ == child)
        {
            this._auto1_ = null;
            return;
        }

        if(this._auto2_ == child)
        {
            this._auto2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._auto1_ == oldChild)
        {
            setAuto1((PAbstractjoinedautomaton) newChild);
            return;
        }

        if(this._auto2_ == oldChild)
        {
            setAuto2((PAbstractjoinedautomaton) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
