/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.stalin.automata.parser.TestGrammar.node;

import java.util.*;
import local.stalin.automata.parser.TestGrammar.analysis.*;

@SuppressWarnings("nls")
public final class AAcceptAbstracttestcase extends PAbstracttestcase
{
    private final LinkedList<PAbstracttaggedsymbol> _abstracttaggedsymbol_ = new LinkedList<PAbstracttaggedsymbol>();
    private PAbstractjoinedautomaton _abstractjoinedautomaton_;

    public AAcceptAbstracttestcase()
    {
        // Constructor
    }

    public AAcceptAbstracttestcase(
        @SuppressWarnings("hiding") List<PAbstracttaggedsymbol> _abstracttaggedsymbol_,
        @SuppressWarnings("hiding") PAbstractjoinedautomaton _abstractjoinedautomaton_)
    {
        // Constructor
        setAbstracttaggedsymbol(_abstracttaggedsymbol_);

        setAbstractjoinedautomaton(_abstractjoinedautomaton_);

    }

    @Override
    public Object clone()
    {
        return new AAcceptAbstracttestcase(
            cloneList(this._abstracttaggedsymbol_),
            cloneNode(this._abstractjoinedautomaton_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAcceptAbstracttestcase(this);
    }

    public LinkedList<PAbstracttaggedsymbol> getAbstracttaggedsymbol()
    {
        return this._abstracttaggedsymbol_;
    }

    public void setAbstracttaggedsymbol(List<PAbstracttaggedsymbol> list)
    {
        this._abstracttaggedsymbol_.clear();
        this._abstracttaggedsymbol_.addAll(list);
        for(PAbstracttaggedsymbol e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PAbstractjoinedautomaton getAbstractjoinedautomaton()
    {
        return this._abstractjoinedautomaton_;
    }

    public void setAbstractjoinedautomaton(PAbstractjoinedautomaton node)
    {
        if(this._abstractjoinedautomaton_ != null)
        {
            this._abstractjoinedautomaton_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._abstractjoinedautomaton_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._abstracttaggedsymbol_)
            + toString(this._abstractjoinedautomaton_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._abstracttaggedsymbol_.remove(child))
        {
            return;
        }

        if(this._abstractjoinedautomaton_ == child)
        {
            this._abstractjoinedautomaton_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PAbstracttaggedsymbol> i = this._abstracttaggedsymbol_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAbstracttaggedsymbol) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._abstractjoinedautomaton_ == oldChild)
        {
            setAbstractjoinedautomaton((PAbstractjoinedautomaton) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
