/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.stalin.automata.parser.TestGrammar.analysis;

import java.util.*;
import local.stalin.automata.parser.TestGrammar.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAAbstracttest(AAbstracttest node)
    {
        defaultCase(node);
    }

    public void caseAAbstractprint(AAbstractprint node)
    {
        defaultCase(node);
    }

    public void caseAAbstractcall(AAbstractcall node)
    {
        defaultCase(node);
    }

    public void caseAAbstractreturn(AAbstractreturn node)
    {
        defaultCase(node);
    }

    public void caseAAbstractinternal(AAbstractinternal node)
    {
        defaultCase(node);
    }

    public void caseACallAbstracttaggedsymbol(ACallAbstracttaggedsymbol node)
    {
        defaultCase(node);
    }

    public void caseAInternalAbstracttaggedsymbol(AInternalAbstracttaggedsymbol node)
    {
        defaultCase(node);
    }

    public void caseAReturnAbstracttaggedsymbol(AReturnAbstracttaggedsymbol node)
    {
        defaultCase(node);
    }

    public void caseAAbstractautomaton(AAbstractautomaton node)
    {
        defaultCase(node);
    }

    public void caseAAcceptAbstracttestcase(AAcceptAbstracttestcase node)
    {
        defaultCase(node);
    }

    public void caseAIsemptyAbstracttestcase(AIsemptyAbstracttestcase node)
    {
        defaultCase(node);
    }

    public void caseAIntersectAbstractjoinedautomaton(AIntersectAbstractjoinedautomaton node)
    {
        defaultCase(node);
    }

    public void caseADifferenceAbstractjoinedautomaton(ADifferenceAbstractjoinedautomaton node)
    {
        defaultCase(node);
    }

    public void caseANegateAbstractjoinedautomaton(ANegateAbstractjoinedautomaton node)
    {
        defaultCase(node);
    }

    public void caseADeterminizeAbstractjoinedautomaton(ADeterminizeAbstractjoinedautomaton node)
    {
        defaultCase(node);
    }

    public void caseANormalAbstractjoinedautomaton(ANormalAbstractjoinedautomaton node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseTCommentT(TCommentT node)
    {
        defaultCase(node);
    }

    public void caseTTestcasestoken(TTestcasestoken node)
    {
        defaultCase(node);
    }

    public void caseTNametoken(TNametoken node)
    {
        defaultCase(node);
    }

    public void caseTAutomatatoken(TAutomatatoken node)
    {
        defaultCase(node);
    }

    public void caseTInternaltoken(TInternaltoken node)
    {
        defaultCase(node);
    }

    public void caseTCalltoken(TCalltoken node)
    {
        defaultCase(node);
    }

    public void caseTReturntoken(TReturntoken node)
    {
        defaultCase(node);
    }

    public void caseTInitialtoken(TInitialtoken node)
    {
        defaultCase(node);
    }

    public void caseTStatestoken(TStatestoken node)
    {
        defaultCase(node);
    }

    public void caseTFinaltoken(TFinaltoken node)
    {
        defaultCase(node);
    }

    public void caseTTransitionstoken(TTransitionstoken node)
    {
        defaultCase(node);
    }

    public void caseTAcceptstoken(TAcceptstoken node)
    {
        defaultCase(node);
    }

    public void caseTIsemptytoken(TIsemptytoken node)
    {
        defaultCase(node);
    }

    public void caseTIntersectiontoken(TIntersectiontoken node)
    {
        defaultCase(node);
    }

    public void caseTDifferencetoken(TDifferencetoken node)
    {
        defaultCase(node);
    }

    public void caseTDeterminizetoken(TDeterminizetoken node)
    {
        defaultCase(node);
    }

    public void caseTNegationtoken(TNegationtoken node)
    {
        defaultCase(node);
    }

    public void caseTPrinttoken(TPrinttoken node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTLparen(TLparen node)
    {
        defaultCase(node);
    }

    public void caseTRparen(TRparen node)
    {
        defaultCase(node);
    }

    public void caseTLbrace(TLbrace node)
    {
        defaultCase(node);
    }

    public void caseTRbrace(TRbrace node)
    {
        defaultCase(node);
    }

    public void caseTNestingcall(TNestingcall node)
    {
        defaultCase(node);
    }

    public void caseTNestingreturn(TNestingreturn node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
