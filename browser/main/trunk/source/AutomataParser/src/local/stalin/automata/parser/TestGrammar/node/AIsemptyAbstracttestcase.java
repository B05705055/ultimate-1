/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.stalin.automata.parser.TestGrammar.node;

import local.stalin.automata.parser.TestGrammar.analysis.*;

@SuppressWarnings("nls")
public final class AIsemptyAbstracttestcase extends PAbstracttestcase
{
    private PAbstractjoinedautomaton _abstractjoinedautomaton_;

    public AIsemptyAbstracttestcase()
    {
        // Constructor
    }

    public AIsemptyAbstracttestcase(
        @SuppressWarnings("hiding") PAbstractjoinedautomaton _abstractjoinedautomaton_)
    {
        // Constructor
        setAbstractjoinedautomaton(_abstractjoinedautomaton_);

    }

    @Override
    public Object clone()
    {
        return new AIsemptyAbstracttestcase(
            cloneNode(this._abstractjoinedautomaton_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIsemptyAbstracttestcase(this);
    }

    public PAbstractjoinedautomaton getAbstractjoinedautomaton()
    {
        return this._abstractjoinedautomaton_;
    }

    public void setAbstractjoinedautomaton(PAbstractjoinedautomaton node)
    {
        if(this._abstractjoinedautomaton_ != null)
        {
            this._abstractjoinedautomaton_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._abstractjoinedautomaton_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._abstractjoinedautomaton_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._abstractjoinedautomaton_ == child)
        {
            this._abstractjoinedautomaton_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._abstractjoinedautomaton_ == oldChild)
        {
            setAbstractjoinedautomaton((PAbstractjoinedautomaton) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
