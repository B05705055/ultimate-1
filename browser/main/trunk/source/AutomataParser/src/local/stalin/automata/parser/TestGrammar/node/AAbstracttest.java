/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.stalin.automata.parser.TestGrammar.node;

import java.util.*;
import local.stalin.automata.parser.TestGrammar.analysis.*;

@SuppressWarnings("nls")
public final class AAbstracttest extends PAbstracttest
{
    private final LinkedList<PAbstracttestcase> _testcase_ = new LinkedList<PAbstracttestcase>();
    private PAbstractprint _print_;
    private final LinkedList<PAbstractautomaton> _automata_ = new LinkedList<PAbstractautomaton>();

    public AAbstracttest()
    {
        // Constructor
    }

    public AAbstracttest(
        @SuppressWarnings("hiding") List<PAbstracttestcase> _testcase_,
        @SuppressWarnings("hiding") PAbstractprint _print_,
        @SuppressWarnings("hiding") List<PAbstractautomaton> _automata_)
    {
        // Constructor
        setTestcase(_testcase_);

        setPrint(_print_);

        setAutomata(_automata_);

    }

    @Override
    public Object clone()
    {
        return new AAbstracttest(
            cloneList(this._testcase_),
            cloneNode(this._print_),
            cloneList(this._automata_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAbstracttest(this);
    }

    public LinkedList<PAbstracttestcase> getTestcase()
    {
        return this._testcase_;
    }

    public void setTestcase(List<PAbstracttestcase> list)
    {
        this._testcase_.clear();
        this._testcase_.addAll(list);
        for(PAbstracttestcase e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PAbstractprint getPrint()
    {
        return this._print_;
    }

    public void setPrint(PAbstractprint node)
    {
        if(this._print_ != null)
        {
            this._print_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._print_ = node;
    }

    public LinkedList<PAbstractautomaton> getAutomata()
    {
        return this._automata_;
    }

    public void setAutomata(List<PAbstractautomaton> list)
    {
        this._automata_.clear();
        this._automata_.addAll(list);
        for(PAbstractautomaton e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._testcase_)
            + toString(this._print_)
            + toString(this._automata_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._testcase_.remove(child))
        {
            return;
        }

        if(this._print_ == child)
        {
            this._print_ = null;
            return;
        }

        if(this._automata_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PAbstracttestcase> i = this._testcase_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAbstracttestcase) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._print_ == oldChild)
        {
            setPrint((PAbstractprint) newChild);
            return;
        }

        for(ListIterator<PAbstractautomaton> i = this._automata_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAbstractautomaton) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
