/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.stalin.automata.parser.TestGrammar.analysis;

import java.util.*;
import local.stalin.automata.parser.TestGrammar.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPAbstracttest().apply(this);
        outStart(node);
    }

    public void inAAbstracttest(AAbstracttest node)
    {
        defaultIn(node);
    }

    public void outAAbstracttest(AAbstracttest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstracttest(AAbstracttest node)
    {
        inAAbstracttest(node);
        {
            List<PAbstractautomaton> copy = new ArrayList<PAbstractautomaton>(node.getAutomata());
            Collections.reverse(copy);
            for(PAbstractautomaton e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        {
            List<PAbstracttestcase> copy = new ArrayList<PAbstracttestcase>(node.getTestcase());
            Collections.reverse(copy);
            for(PAbstracttestcase e : copy)
            {
                e.apply(this);
            }
        }
        outAAbstracttest(node);
    }

    public void inAAbstractprint(AAbstractprint node)
    {
        defaultIn(node);
    }

    public void outAAbstractprint(AAbstractprint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractprint(AAbstractprint node)
    {
        inAAbstractprint(node);
        if(node.getAutomaton() != null)
        {
            node.getAutomaton().apply(this);
        }
        outAAbstractprint(node);
    }

    public void inAAbstractcall(AAbstractcall node)
    {
        defaultIn(node);
    }

    public void outAAbstractcall(AAbstractcall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractcall(AAbstractcall node)
    {
        inAAbstractcall(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        outAAbstractcall(node);
    }

    public void inAAbstractreturn(AAbstractreturn node)
    {
        defaultIn(node);
    }

    public void outAAbstractreturn(AAbstractreturn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractreturn(AAbstractreturn node)
    {
        inAAbstractreturn(node);
        if(node.getCallfrom() != null)
        {
            node.getCallfrom().apply(this);
        }
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        outAAbstractreturn(node);
    }

    public void inAAbstractinternal(AAbstractinternal node)
    {
        defaultIn(node);
    }

    public void outAAbstractinternal(AAbstractinternal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractinternal(AAbstractinternal node)
    {
        inAAbstractinternal(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        outAAbstractinternal(node);
    }

    public void inACallAbstracttaggedsymbol(ACallAbstracttaggedsymbol node)
    {
        defaultIn(node);
    }

    public void outACallAbstracttaggedsymbol(ACallAbstracttaggedsymbol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallAbstracttaggedsymbol(ACallAbstracttaggedsymbol node)
    {
        inACallAbstracttaggedsymbol(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outACallAbstracttaggedsymbol(node);
    }

    public void inAInternalAbstracttaggedsymbol(AInternalAbstracttaggedsymbol node)
    {
        defaultIn(node);
    }

    public void outAInternalAbstracttaggedsymbol(AInternalAbstracttaggedsymbol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInternalAbstracttaggedsymbol(AInternalAbstracttaggedsymbol node)
    {
        inAInternalAbstracttaggedsymbol(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAInternalAbstracttaggedsymbol(node);
    }

    public void inAReturnAbstracttaggedsymbol(AReturnAbstracttaggedsymbol node)
    {
        defaultIn(node);
    }

    public void outAReturnAbstracttaggedsymbol(AReturnAbstracttaggedsymbol node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnAbstracttaggedsymbol(AReturnAbstracttaggedsymbol node)
    {
        inAReturnAbstracttaggedsymbol(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAReturnAbstracttaggedsymbol(node);
    }

    public void inAAbstractautomaton(AAbstractautomaton node)
    {
        defaultIn(node);
    }

    public void outAAbstractautomaton(AAbstractautomaton node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractautomaton(AAbstractautomaton node)
    {
        inAAbstractautomaton(node);
        {
            List<PAbstractreturn> copy = new ArrayList<PAbstractreturn>(node.getReturntransitions());
            Collections.reverse(copy);
            for(PAbstractreturn e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAbstractinternal> copy = new ArrayList<PAbstractinternal>(node.getInternaltransitions());
            Collections.reverse(copy);
            for(PAbstractinternal e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAbstractcall> copy = new ArrayList<PAbstractcall>(node.getCalltransitions());
            Collections.reverse(copy);
            for(PAbstractcall e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getFinal());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getStates());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getInitial());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getReturnalphabet());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getCallalphabet());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getInternalalphabet());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAAbstractautomaton(node);
    }

    public void inAAcceptAbstracttestcase(AAcceptAbstracttestcase node)
    {
        defaultIn(node);
    }

    public void outAAcceptAbstracttestcase(AAcceptAbstracttestcase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAcceptAbstracttestcase(AAcceptAbstracttestcase node)
    {
        inAAcceptAbstracttestcase(node);
        if(node.getAbstractjoinedautomaton() != null)
        {
            node.getAbstractjoinedautomaton().apply(this);
        }
        {
            List<PAbstracttaggedsymbol> copy = new ArrayList<PAbstracttaggedsymbol>(node.getAbstracttaggedsymbol());
            Collections.reverse(copy);
            for(PAbstracttaggedsymbol e : copy)
            {
                e.apply(this);
            }
        }
        outAAcceptAbstracttestcase(node);
    }

    public void inAIsemptyAbstracttestcase(AIsemptyAbstracttestcase node)
    {
        defaultIn(node);
    }

    public void outAIsemptyAbstracttestcase(AIsemptyAbstracttestcase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIsemptyAbstracttestcase(AIsemptyAbstracttestcase node)
    {
        inAIsemptyAbstracttestcase(node);
        if(node.getAbstractjoinedautomaton() != null)
        {
            node.getAbstractjoinedautomaton().apply(this);
        }
        outAIsemptyAbstracttestcase(node);
    }

    public void inAIntersectAbstractjoinedautomaton(AIntersectAbstractjoinedautomaton node)
    {
        defaultIn(node);
    }

    public void outAIntersectAbstractjoinedautomaton(AIntersectAbstractjoinedautomaton node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntersectAbstractjoinedautomaton(AIntersectAbstractjoinedautomaton node)
    {
        inAIntersectAbstractjoinedautomaton(node);
        if(node.getAuto2() != null)
        {
            node.getAuto2().apply(this);
        }
        if(node.getAuto1() != null)
        {
            node.getAuto1().apply(this);
        }
        outAIntersectAbstractjoinedautomaton(node);
    }

    public void inADifferenceAbstractjoinedautomaton(ADifferenceAbstractjoinedautomaton node)
    {
        defaultIn(node);
    }

    public void outADifferenceAbstractjoinedautomaton(ADifferenceAbstractjoinedautomaton node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifferenceAbstractjoinedautomaton(ADifferenceAbstractjoinedautomaton node)
    {
        inADifferenceAbstractjoinedautomaton(node);
        if(node.getAuto2() != null)
        {
            node.getAuto2().apply(this);
        }
        if(node.getAuto1() != null)
        {
            node.getAuto1().apply(this);
        }
        outADifferenceAbstractjoinedautomaton(node);
    }

    public void inANegateAbstractjoinedautomaton(ANegateAbstractjoinedautomaton node)
    {
        defaultIn(node);
    }

    public void outANegateAbstractjoinedautomaton(ANegateAbstractjoinedautomaton node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegateAbstractjoinedautomaton(ANegateAbstractjoinedautomaton node)
    {
        inANegateAbstractjoinedautomaton(node);
        if(node.getAbstractjoinedautomaton() != null)
        {
            node.getAbstractjoinedautomaton().apply(this);
        }
        outANegateAbstractjoinedautomaton(node);
    }

    public void inADeterminizeAbstractjoinedautomaton(ADeterminizeAbstractjoinedautomaton node)
    {
        defaultIn(node);
    }

    public void outADeterminizeAbstractjoinedautomaton(ADeterminizeAbstractjoinedautomaton node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeterminizeAbstractjoinedautomaton(ADeterminizeAbstractjoinedautomaton node)
    {
        inADeterminizeAbstractjoinedautomaton(node);
        if(node.getAbstractjoinedautomaton() != null)
        {
            node.getAbstractjoinedautomaton().apply(this);
        }
        outADeterminizeAbstractjoinedautomaton(node);
    }

    public void inANormalAbstractjoinedautomaton(ANormalAbstractjoinedautomaton node)
    {
        defaultIn(node);
    }

    public void outANormalAbstractjoinedautomaton(ANormalAbstractjoinedautomaton node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalAbstractjoinedautomaton(ANormalAbstractjoinedautomaton node)
    {
        inANormalAbstractjoinedautomaton(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outANormalAbstractjoinedautomaton(node);
    }
}
