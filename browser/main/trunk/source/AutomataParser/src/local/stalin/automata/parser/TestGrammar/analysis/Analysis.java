/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.stalin.automata.parser.TestGrammar.analysis;

import local.stalin.automata.parser.TestGrammar.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAAbstracttest(AAbstracttest node);
    void caseAAbstractprint(AAbstractprint node);
    void caseAAbstractcall(AAbstractcall node);
    void caseAAbstractreturn(AAbstractreturn node);
    void caseAAbstractinternal(AAbstractinternal node);
    void caseACallAbstracttaggedsymbol(ACallAbstracttaggedsymbol node);
    void caseAInternalAbstracttaggedsymbol(AInternalAbstracttaggedsymbol node);
    void caseAReturnAbstracttaggedsymbol(AReturnAbstracttaggedsymbol node);
    void caseAAbstractautomaton(AAbstractautomaton node);
    void caseAAcceptAbstracttestcase(AAcceptAbstracttestcase node);
    void caseAIsemptyAbstracttestcase(AIsemptyAbstracttestcase node);
    void caseAIntersectAbstractjoinedautomaton(AIntersectAbstractjoinedautomaton node);
    void caseADifferenceAbstractjoinedautomaton(ADifferenceAbstractjoinedautomaton node);
    void caseANegateAbstractjoinedautomaton(ANegateAbstractjoinedautomaton node);
    void caseADeterminizeAbstractjoinedautomaton(ADeterminizeAbstractjoinedautomaton node);
    void caseANormalAbstractjoinedautomaton(ANormalAbstractjoinedautomaton node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTCommentT(TCommentT node);
    void caseTTestcasestoken(TTestcasestoken node);
    void caseTNametoken(TNametoken node);
    void caseTAutomatatoken(TAutomatatoken node);
    void caseTInternaltoken(TInternaltoken node);
    void caseTCalltoken(TCalltoken node);
    void caseTReturntoken(TReturntoken node);
    void caseTInitialtoken(TInitialtoken node);
    void caseTStatestoken(TStatestoken node);
    void caseTFinaltoken(TFinaltoken node);
    void caseTTransitionstoken(TTransitionstoken node);
    void caseTAcceptstoken(TAcceptstoken node);
    void caseTIsemptytoken(TIsemptytoken node);
    void caseTIntersectiontoken(TIntersectiontoken node);
    void caseTDifferencetoken(TDifferencetoken node);
    void caseTDeterminizetoken(TDeterminizetoken node);
    void caseTNegationtoken(TNegationtoken node);
    void caseTPrinttoken(TPrinttoken node);
    void caseTId(TId node);
    void caseTLparen(TLparen node);
    void caseTRparen(TRparen node);
    void caseTLbrace(TLbrace node);
    void caseTRbrace(TRbrace node);
    void caseTNestingcall(TNestingcall node);
    void caseTNestingreturn(TNestingreturn node);
    void caseEOF(EOF node);
}
