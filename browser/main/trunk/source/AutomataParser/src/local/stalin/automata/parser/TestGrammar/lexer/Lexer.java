/* This file was generated by SableCC (http://www.sablecc.org/). */

package local.stalin.automata.parser.TestGrammar.lexer;

import java.io.*;
import local.stalin.automata.parser.TestGrammar.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhiteSpace(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCommentT(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTestcasestoken(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNametoken(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAutomatatoken(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInternaltoken(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCalltoken(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TReturntoken(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInitialtoken(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStatestoken(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFinaltoken(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTransitionstoken(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAcceptstoken(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIsemptytoken(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIntersectiontoken(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDifferencetoken(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDeterminizetoken(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNegationtoken(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPrinttoken(line, pos); }
    Token new19(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TId(text, line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLparen(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRparen(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLbrace(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRbrace(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNestingcall(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNestingreturn(line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {35, 35, 5}, {40, 40, 6}, {41, 41, 7}, {47, 47, 8}, {48, 57, 9}, {60, 60, 10}, {62, 62, 11}, {65, 65, 12}, {66, 67, 13}, {68, 68, 14}, {69, 72, 13}, {73, 73, 15}, {74, 77, 13}, {78, 78, 16}, {79, 90, 13}, {97, 122, 17}, {123, 123, 18}, {125, 125, 19}, },
            {},
            {},
            {{10, 10, 20}, },
            {},
            {{97, 97, 21}, {99, 99, 22}, {102, 102, 23}, {105, 105, 24}, {110, 110, 25}, {112, 112, 26}, {114, 114, 27}, {115, 115, 28}, {116, 116, 29}, },
            {},
            {},
            {{47, 47, 30}, },
            {{48, 57, 9}, {65, 90, 13}, {97, 122, 17}, },
            {},
            {},
            {{48, 57, 9}, {65, 66, 13}, {67, 67, 31}, {68, 90, 13}, {97, 122, 17}, },
            {{48, 122, -11}, },
            {{48, 57, 9}, {65, 68, 13}, {69, 69, 32}, {70, 72, 13}, {73, 73, 33}, {74, 90, 13}, {97, 122, 17}, },
            {{48, 57, 9}, {65, 77, 13}, {78, 78, 34}, {79, 82, 13}, {83, 83, 35}, {84, 90, 13}, {97, 122, 17}, },
            {{48, 68, -16}, {69, 69, 36}, {70, 90, 13}, {97, 122, 17}, },
            {{48, 122, -11}, },
            {},
            {},
            {},
            {{117, 117, 37}, },
            {{97, 97, 38}, },
            {{105, 105, 39}, },
            {{110, 110, 40}, },
            {{97, 97, 41}, },
            {{114, 114, 42}, },
            {{101, 101, 43}, },
            {{116, 116, 44}, },
            {{101, 101, 45}, {114, 114, 46}, },
            {{0, 9, 47}, {10, 10, 48}, {11, 65535, 49}, },
            {{48, 66, -14}, {67, 67, 50}, {68, 122, -14}, },
            {{48, 57, 9}, {65, 83, 13}, {84, 84, 51}, {85, 90, 13}, {97, 122, 17}, },
            {{48, 57, 9}, {65, 69, 13}, {70, 70, 52}, {71, 90, 13}, {97, 122, 17}, },
            {{48, 83, -34}, {84, 84, 53}, {85, 122, -34}, },
            {{48, 68, -16}, {69, 69, 54}, {70, 122, -18}, },
            {{48, 57, 9}, {65, 70, 13}, {71, 71, 55}, {72, 90, 13}, {97, 122, 17}, },
            {{116, 116, 56}, },
            {{108, 108, 57}, },
            {{110, 110, 58}, },
            {{105, 105, 59}, {116, 116, 60}, },
            {{109, 109, 61}, },
            {{105, 105, 62}, },
            {{116, 116, 63}, },
            {{97, 97, 64}, },
            {{115, 115, 65}, },
            {{97, 97, 66}, },
            {{0, 65535, -32}, },
            {},
            {{0, 65535, -32}, },
            {{48, 68, -16}, {69, 69, 67}, {70, 122, -18}, },
            {{48, 68, -16}, {69, 69, 68}, {70, 122, -18}, },
            {{48, 69, -35}, {70, 70, 69}, {71, 122, -35}, },
            {{48, 68, -16}, {69, 69, 70}, {70, 122, -18}, },
            {{48, 57, 9}, {65, 76, 13}, {77, 77, 71}, {78, 90, 13}, {97, 122, 17}, },
            {{48, 57, 9}, {65, 65, 72}, {66, 90, 13}, {97, 122, 17}, },
            {{111, 111, 73}, },
            {{108, 108, 74}, },
            {{97, 97, 75}, },
            {{116, 116, 76}, },
            {{101, 101, 77}, },
            {{101, 101, 78}, },
            {{110, 110, 79}, },
            {{117, 117, 80}, },
            {{116, 116, 81}, },
            {{116, 116, 82}, },
            {{110, 110, 83}, },
            {{48, 57, 9}, {65, 79, 13}, {80, 80, 84}, {81, 90, 13}, {97, 122, 17}, },
            {{48, 57, 9}, {65, 81, 13}, {82, 82, 85}, {83, 90, 13}, {97, 122, 17}, },
            {{48, 68, -16}, {69, 69, 86}, {70, 122, -18}, },
            {{48, 81, -70}, {82, 82, 87}, {83, 122, -70}, },
            {{48, 79, -69}, {80, 80, 88}, {81, 122, -69}, },
            {{48, 83, -34}, {84, 84, 89}, {85, 122, -34}, },
            {{109, 109, 90}, },
            {},
            {{108, 108, 91}, },
            {{105, 105, 92}, },
            {{114, 114, 93}, },
            {},
            {{116, 116, 94}, },
            {{114, 114, 95}, },
            {{101, 101, 96}, },
            {{99, 99, 97}, },
            {{115, 115, 98}, },
            {{48, 83, -34}, {84, 84, 99}, {85, 122, -34}, },
            {{48, 76, -56}, {77, 77, 100}, {78, 122, -56}, },
            {{48, 81, -70}, {82, 82, 101}, {83, 122, -70}, },
            {{48, 57, 9}, {65, 82, 13}, {83, 83, 102}, {84, 122, -17}, },
            {{48, 83, -34}, {84, 84, 103}, {85, 122, -34}, },
            {{48, 57, 9}, {65, 72, 13}, {73, 73, 104}, {74, 122, -16}, },
            {{97, 97, 105}, },
            {},
            {{97, 97, 106}, },
            {{110, 110, 107}, },
            {},
            {{110, 110, 108}, },
            {{115, 115, 109}, },
            {{97, 97, 110}, },
            {{105, 105, 111}, },
            {{48, 82, -89}, {83, 83, 112}, {84, 122, -17}, },
            {{48, 72, -91}, {73, 73, 113}, {74, 122, -16}, },
            {{48, 68, -16}, {69, 69, 114}, {70, 122, -18}, },
            {{48, 68, -16}, {69, 69, 115}, {70, 122, -18}, },
            {{48, 57, 9}, {65, 88, 13}, {89, 89, 116}, {90, 90, 13}, {97, 122, 17}, },
            {{48, 57, 9}, {65, 78, 13}, {79, 79, 117}, {80, 90, 13}, {97, 122, 17}, },
            {{116, 116, 118}, },
            {{108, 108, 119}, },
            {{97, 97, 120}, },
            {},
            {},
            {{115, 115, 121}, },
            {{116, 116, 122}, },
            {{48, 122, -11}, },
            {{48, 77, -17}, {78, 78, 123}, {79, 122, -2}, },
            {{48, 77, -17}, {78, 78, 124}, {79, 122, -2}, },
            {{48, 66, -14}, {67, 67, 125}, {68, 122, -14}, },
            {{48, 122, -11}, },
            {{48, 77, -17}, {78, 78, 126}, {79, 122, -2}, },
            {{97, 97, 127}, },
            {},
            {{108, 108, 128}, },
            {{101, 101, 129}, },
            {{105, 105, 130}, },
            {{48, 72, -91}, {73, 73, 131}, {74, 122, -16}, },
            {{48, 66, -14}, {67, 67, 132}, {68, 122, -14}, },
            {{48, 83, -34}, {84, 84, 133}, {85, 122, -34}, },
            {{48, 122, -11}, },
            {},
            {},
            {{115, 115, 134}, },
            {{111, 111, 135}, },
            {{48, 57, 9}, {65, 89, 13}, {90, 90, 136}, {97, 122, 17}, },
            {{48, 68, -16}, {69, 69, 137}, {70, 122, -18}, },
            {{48, 72, -91}, {73, 73, 138}, {74, 122, -16}, },
            {},
            {{110, 110, 139}, },
            {{48, 68, -16}, {69, 69, 140}, {70, 122, -18}, },
            {{48, 122, -11}, },
            {{48, 78, -106}, {79, 79, 141}, {80, 122, -106}, },
            {{115, 115, 142}, },
            {{48, 122, -11}, },
            {{48, 77, -17}, {78, 78, 143}, {79, 122, -2}, },
            {},
            {{48, 122, -11}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {19, 0, 0, 0, 0, -1, 20, 21, -1, 19, 24, 25, 19, 19, 19, 19, 19, 19, 22, 23, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 19, 19, 19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 19, -1, 6, -1, -1, -1, 3, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 19, -1, 10, -1, -1, 18, -1, -1, -1, -1, 19, 19, 19, 19, 19, 19, -1, -1, -1, 7, 9, -1, -1, 12, 19, 19, 19, 13, 19, -1, 8, -1, -1, -1, 19, 19, 19, 17, 4, 5, -1, -1, 19, 19, 19, 2, -1, 19, 15, 19, -1, 16, 19, 11, 14, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
