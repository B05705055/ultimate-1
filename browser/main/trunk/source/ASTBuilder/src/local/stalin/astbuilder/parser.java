
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081115
// Mon Mar 21 10:46:56 CET 2011
//----------------------------------------------------

package local.stalin.astbuilder;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.HashMap;
import java.util.HashSet;

/** CUP v0.12joho 20081115 generated parser.
  * @version Mon Mar 21 10:46:56 CET 2011
  */
public class parser extends java_cup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\142\000\002\003\003\016\000\016\003\023\000" +
    "\023\001\022\001\022\003\021\001\021\003\015" +
    "\000\015\002\017\003\017\005\001\000\001\002" +
    "\002\005\002\004\002\005\002\003\002\002\002" +
    "\001\012\002\013\004\005\003\005\001\004\000" +
    "\004\003\004\003\006\003\006\000\007\002\010" +
    "\000\010\002\011\005\011\003\011\004\020\001" +
    "\020\004\020\003\020\004\020\005\024\000\024" +
    "\003\014\000\014\001\025\000\025\002\025\002" +
    "\122\330\220\304\122\122\330\322\122\330\332" +
    "\122\330\274\122\122\134\122\122\122\254\326" +
    "\232\122\122\212\122\320\122\306\130\122\330" +
    "\262\122\122\324\324\122\322\132\222\322\136" +
    "\324\122\124\122\122\232\122\122\122\122\122" +
    "\122\122\122\134\130\216\122\122\320\320\330" +
    "\124\316\314\330\162\312\254\122\326\212\230" +
    "\122\122\132\122\122\324\u010a\006\000\000\026" +
    "\016\014\000\002\036\000\010\000\000\030\020" +
    "\000\054\134\040\000\000\000\032\052\000\056" +
    "\000\050\000\000\064\066\000\102\034\000\076" +
    "\044\076\000\100\000\066\000\062\000\046\042" +
    "\000\074\104\060\072\070\110\000\112\136\136" +
    "\000\140\142\016\000\106\114\000\000\000\000" +
    "\000\000\120\022\000\000\130\122\000\116\124" +
    "\024\067\161\055\151\067\136\072\000\047\135" +
    "\071\000\116\175\101\023\052\132\052\043\055" +
    "\111\017\053\035\111\067\136\035\113\047\137" +
    "\017\055\116\177\105\175\055\153\101\213\067" +
    "\163\067\165\052\115\072\163\072\165\071\163" +
    "\071\165\030\067\105\177\030\102\030\102\073" +
    "\175\001\011\050\104\050\104\060\155\030\076" +
    "\025\035\030\076\112\235\030\071\001\012\073" +
    "\177\060\157\023\057\025\065\113\231\112\237" +
    "\113\241\040\132\040\043\023\061\014\041\014" +
    "\004\014\132\014\043\107\231\002\017\107\233" +
    "\034\132\034\043\106\227\103\217\102\126\077" +
    "\126\051\141\043\127\024\063\013\011\011\035" +
    "\010\027\000\003\005\023\032\105\006\025\076" +
    "\205\046\071\044\071\053\147\121\211\111\211" +
    "\100\211\104\221\037\115\122\001\122\001\122" +
    "\001\122\001\122\001\122\001\122\001\117\001" +
    "\037\014\034\002\061\047\001\001\022\062\035" +
    "\007\051\052\003\015\023\043\024\035\036\037" +
    "\040\017\121\041\101\006\055\036\002\034\006" +
    "\054\041\034\050\030\041\051\010\001\111\112" +
    "\101\100\017\101\005\006\106\103\075\074\043" +
    "\073\041\040\036\001\001\001\040\001\001\037" +
    "\001\001\033\001\001\001\001\001\001\001\001" +
    "\011"
    };
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }



    String filename = "";

    public void setFileName(String filename) {
        this.filename = filename;
    }

    public void syntax_error(Symbol cur_token) {
    }


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {


    private static final int WRITEABLE = 1;
    private static final int OPTIONAL  = 2;

    String currentNode = null;
    Stack<String>  nodeNameStack = new Stack<String>();
    Stack<HashSet<String>> usedTypesStack = new Stack<HashSet<String>>();
    HashMap<String,Node> symbolTable = new HashMap<String,Node>();
    HashSet<String>      usedTypes;
    boolean hasError = false;

    public void report_error(int left, int right, String message)
    {
        hasError = true;
        System.err.println(parser.filename+":"
            + (left >> 16) + ":" + (left & 0xffff) + ":"
            + (right >> 16) + ":" + (right & 0xffff) + ": "
            + message);
    }

    void pushNode(String name) {
        nodeNameStack.push(currentNode);
        usedTypesStack.push(usedTypes);
        currentNode = name;
        usedTypes = new HashSet<String>();
    }

    void popNode() {
        currentNode = nodeNameStack.pop();
        usedTypes = usedTypesStack.pop();
    }

    void buildNode(String name, String parent, String comment,
                   List<Parameter> pl, boolean isAbstract, int left, int right) {
        if (comment == null)
            comment = Emit.buildClassComment(name, parent);
        else if (!comment.endsWith("."))
            comment += ".";
        Parameter[] params = pl.toArray(new Parameter[pl.size()]);
        Node node = new Node(name, parent, comment, usedTypes, isAbstract, params);
        Object previous = symbolTable.put(name, node);
        if (previous != null)
            report_error(left, right,
                         "Double definition of "+currentNode);
    }


  private final parser parser;

  /** Constructor */
  Action$(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT = null;
              java_cup.runtime.Symbol start_val$ = CUP$stack.get(CUP$size - 2);
              Grammar start_val = (Grammar) start_val$.value;
RESULT = start_val;
              /* ACCEPT */
              parser.done_parsing();
              return parser.getSymbolFactory().newSymbol("$START", 0, start_val$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= PackageDefinition_opt Import_List NodeDefinitionList 
            {
              Grammar RESULT = null;
              java_cup.runtime.Symbol imports$ = CUP$stack.get(CUP$size - 2);
              ArrayList<String> imports = (ArrayList<String>) imports$.value;
              java_cup.runtime.Symbol pkgName$ = CUP$stack.get(CUP$size - 3);
              String pkgName = (String) pkgName$.value;
 
        if (hasError) 
            RESULT = null; 
        else
            RESULT = new Grammar(pkgName, imports, symbolTable);
     
              return parser.getSymbolFactory().newSymbol("goal", 3, pkgName$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PackageDefinition_opt ::= 
            {
              String RESULT = null;
 RESULT = ""; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("PackageDefinition_opt", 14, CUP$sym, CUP$sym, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PackageDefinition_opt ::= PACKAGE FullQualifiedName_opt SEMI 
            {
              String RESULT = null;
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 2);
              String name = (String) name$.value;
 RESULT = name; 
              return parser.getSymbolFactory().newSymbol("PackageDefinition_opt", 14, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FullQualifiedName_opt ::= 
            {
              String RESULT = null;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("FullQualifiedName_opt", 19, CUP$sym, CUP$sym, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FullQualifiedName_opt ::= FullQualifiedName 
            {
              String RESULT = null;
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              String name = (String) name$.value;
 RESULT = name; 
              return parser.getSymbolFactory().newSymbol("FullQualifiedName_opt", 19, name$, name$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FullQualifiedName ::= IDENT 
            {
              String RESULT = null;
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              String name = (String) name$.value;
 RESULT = name; 
              return parser.getSymbolFactory().newSymbol("FullQualifiedName", 18, name$, name$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FullQualifiedName ::= FullQualifiedName DOT IDENT 
            {
              String RESULT = null;
              java_cup.runtime.Symbol post$ = CUP$stack.get(CUP$size - 1);
              String post = (String) post$.value;
              java_cup.runtime.Symbol pre$ = CUP$stack.get(CUP$size - 3);
              String pre = (String) pre$.value;
 RESULT = pre + "." + post; 
              return parser.getSymbolFactory().newSymbol("FullQualifiedName", 18, pre$, post$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TypeArgsCommaPlus ::= Type 
            {
              String RESULT = null;
              java_cup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 1);
              String t = (String) t$.value;
 RESULT = t; 
              return parser.getSymbolFactory().newSymbol("TypeArgsCommaPlus", 17, t$, t$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TypeArgsCommaPlus ::= TypeArgsCommaPlus COMMA Type 
            {
              String RESULT = null;
              java_cup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 1);
              String t = (String) t$.value;
              java_cup.runtime.Symbol ta$ = CUP$stack.get(CUP$size - 3);
              String ta = (String) ta$.value;
 RESULT = ta + ","+t; 
              return parser.getSymbolFactory().newSymbol("TypeArgsCommaPlus", 17, ta$, t$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Import_List ::= 
            {
              ArrayList<String> RESULT = null;
 RESULT = new ArrayList<String>(); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("Import_List", 13, CUP$sym, CUP$sym, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Import_List ::= Import_List Import 
            {
              ArrayList<String> RESULT = null;
              java_cup.runtime.Symbol i$ = CUP$stack.get(CUP$size - 1);
              String i = (String) i$.value;
              java_cup.runtime.Symbol l$ = CUP$stack.get(CUP$size - 2);
              ArrayList<String> l = (ArrayList<String>) l$.value;
 l.add(i); RESULT = l; 
              return parser.getSymbolFactory().newSymbol("Import_List", 13, l$, i$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Import ::= IMPORT FullQualifiedName SEMI 
            {
              String RESULT = null;
              java_cup.runtime.Symbol fqn$ = CUP$stack.get(CUP$size - 2);
              String fqn = (String) fqn$.value;
 RESULT = fqn; 
              return parser.getSymbolFactory().newSymbol("Import", 15, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Import ::= IMPORT FullQualifiedName DOT STAR SEMI 
            {
              String RESULT = null;
              java_cup.runtime.Symbol fqn$ = CUP$stack.get(CUP$size - 4);
              String fqn = (String) fqn$.value;
 RESULT = fqn + ".*"; 
              return parser.getSymbolFactory().newSymbol("Import", 15, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NodeDefinitionList ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("NodeDefinitionList", 1, CUP$sym, CUP$sym);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NodeDefinitionList ::= NodeDefinitionList NodeDefinition 
            {
              return parser.getSymbolFactory().newSymbol("NodeDefinitionList", 1, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NodeDefinition ::= DeclName DDEF Parameter_List Choice_opt SEMI 
            {
              java_cup.runtime.Symbol c$ = CUP$stack.get(CUP$size - 2);
              Boolean c = (Boolean) c$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              ArrayList<Parameter> list = (ArrayList<Parameter>) list$.value;
              java_cup.runtime.Symbol comment$ = CUP$stack.get(CUP$size - 5);
              String comment = (String) comment$.value;
 buildNode(currentNode, null, comment, list, !c.booleanValue(),
                  comment$.left, comment$.right); 
        popNode(); 
              return parser.getSymbolFactory().newSymbol("NodeDefinition", 2, comment$, CUP$stack.get(CUP$size - 1));
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NodeDefinition ::= DeclName DDEF ChoiceDefinition SEMI 
            {
              java_cup.runtime.Symbol c$ = CUP$stack.get(CUP$size - 2);
              Boolean c = (Boolean) c$.value;
              java_cup.runtime.Symbol comment$ = CUP$stack.get(CUP$size - 4);
              String comment = (String) comment$.value;
 buildNode(currentNode, null, comment, 
                  new ArrayList<Parameter>(0), !c.booleanValue(),
                  comment$.left, comment$.right); 
        popNode(); 
              return parser.getSymbolFactory().newSymbol("NodeDefinition", 2, comment$, CUP$stack.get(CUP$size - 1));
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NodeDefinition ::= DeclName DDEF Parameter_List Choice_opt error 
            {
              java_cup.runtime.Symbol err$ = CUP$stack.get(CUP$size - 1);
 popNode(); report_error(err$.left, err$.right, "`;' expected!"); 
              return parser.getSymbolFactory().newSymbol("NodeDefinition", 2, CUP$stack.get(CUP$size - 5), err$);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NodeDefinition ::= DeclName DDEF error 
            {
              java_cup.runtime.Symbol err$ = CUP$stack.get(CUP$size - 1);
 popNode(); report_error(err$.left, err$.right, "production expected!"); 
              return parser.getSymbolFactory().newSymbol("NodeDefinition", 2, CUP$stack.get(CUP$size - 3), err$);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NodeDefinition ::= DeclName error 
            {
              java_cup.runtime.Symbol err$ = CUP$stack.get(CUP$size - 1);
 popNode(); report_error(err$.left, err$.right, "`::=' expected!"); 
              return parser.getSymbolFactory().newSymbol("NodeDefinition", 2, CUP$stack.get(CUP$size - 2), err$);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NodeDefinition ::= error 
            {
              java_cup.runtime.Symbol err$ = CUP$stack.get(CUP$size - 1);
 report_error(err$.left, err$.right, "definition expected!"); 
              return parser.getSymbolFactory().newSymbol("NodeDefinition", 2, err$, err$);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DeclName ::= Comment_opt IDENT 
            {
              String RESULT = null;
              java_cup.runtime.Symbol node$ = CUP$stack.get(CUP$size - 1);
              String node = (String) node$.value;
              java_cup.runtime.Symbol comment$ = CUP$stack.get(CUP$size - 2);
              String comment = (String) comment$.value;
 pushNode(node); RESULT = comment; 
              return parser.getSymbolFactory().newSymbol("DeclName", 10, comment$, node$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BracedDeclName ::= LBRACE Comment_opt IDENT RBRACE 
            {
              String RESULT = null;
              java_cup.runtime.Symbol node$ = CUP$stack.get(CUP$size - 2);
              String node = (String) node$.value;
              java_cup.runtime.Symbol comment$ = CUP$stack.get(CUP$size - 3);
              String comment = (String) comment$.value;
 pushNode(node); RESULT = comment; 
              return parser.getSymbolFactory().newSymbol("BracedDeclName", 11, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1), RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ChoiceDefinition ::= ChoiceDefinition BAR ChoiceDefinition_Part 
            {
              Boolean RESULT = null;
              java_cup.runtime.Symbol c$ = CUP$stack.get(CUP$size - 1);
              Boolean c = (Boolean) c$.value;
              java_cup.runtime.Symbol l$ = CUP$stack.get(CUP$size - 3);
              Boolean l = (Boolean) l$.value;
 if (l.booleanValue()) RESULT = l; else RESULT = c; 
              return parser.getSymbolFactory().newSymbol("ChoiceDefinition", 5, l$, c$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ChoiceDefinition ::= ChoiceDefinition_Part 
            {
              Boolean RESULT = null;
              java_cup.runtime.Symbol c$ = CUP$stack.get(CUP$size - 1);
              Boolean c = (Boolean) c$.value;
 RESULT = c; 
              return parser.getSymbolFactory().newSymbol("ChoiceDefinition", 5, c$, c$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Choice_opt ::= 
            {
              Boolean RESULT = null;
 RESULT = Boolean.TRUE; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("Choice_opt", 4, CUP$sym, CUP$sym, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Choice_opt ::= LPAREN ChoiceDefinition RPAREN 
            {
              Boolean RESULT = null;
              java_cup.runtime.Symbol cd$ = CUP$stack.get(CUP$size - 2);
              Boolean cd = (Boolean) cd$.value;
 RESULT = cd; 
              return parser.getSymbolFactory().newSymbol("Choice_opt", 4, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Choice_opt ::= LPAREN ChoiceDefinition error 
            {
              Boolean RESULT = null;
              java_cup.runtime.Symbol err$ = CUP$stack.get(CUP$size - 1);
 report_error(err$.left, err$.right, "`|' or `)' expected"); 
              return parser.getSymbolFactory().newSymbol("Choice_opt", 4, CUP$stack.get(CUP$size - 3), err$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ChoiceDefinition_Part ::= BracedDeclName Parameter_List_opt Choice_opt 
            {
              Boolean RESULT = null;
              java_cup.runtime.Symbol c$ = CUP$stack.get(CUP$size - 1);
              Boolean c = (Boolean) c$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 2);
              ArrayList<Parameter> list = (ArrayList<Parameter>) list$.value;
              java_cup.runtime.Symbol comment$ = CUP$stack.get(CUP$size - 3);
              String comment = (String) comment$.value;
 
        buildNode(currentNode, nodeNameStack.peek(), comment, list, !c.booleanValue(),
                  comment$.left, comment$.right); 
        popNode(); 
        RESULT = Boolean.FALSE;
     
              return parser.getSymbolFactory().newSymbol("ChoiceDefinition_Part", 6, comment$, c$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ChoiceDefinition_Part ::= 
            {
              Boolean RESULT = null;

        RESULT = Boolean.TRUE;
     
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("ChoiceDefinition_Part", 6, CUP$sym, CUP$sym, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Parameter_List ::= Parameter_List_opt Parameter 
            {
              ArrayList<Parameter> RESULT = null;
              java_cup.runtime.Symbol p$ = CUP$stack.get(CUP$size - 1);
              Parameter p = (Parameter) p$.value;
              java_cup.runtime.Symbol l$ = CUP$stack.get(CUP$size - 2);
              ArrayList<Parameter> l = (ArrayList<Parameter>) l$.value;
 l.add(p); RESULT = l; 
              return parser.getSymbolFactory().newSymbol("Parameter_List", 7, l$, p$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Parameter_List_opt ::= 
            {
              ArrayList<Parameter> RESULT = null;
 RESULT = new ArrayList<Parameter>(); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("Parameter_List_opt", 8, CUP$sym, CUP$sym, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Parameter_List_opt ::= Parameter_List_opt Parameter 
            {
              ArrayList<Parameter> RESULT = null;
              java_cup.runtime.Symbol p$ = CUP$stack.get(CUP$size - 1);
              Parameter p = (Parameter) p$.value;
              java_cup.runtime.Symbol l$ = CUP$stack.get(CUP$size - 2);
              ArrayList<Parameter> l = (ArrayList<Parameter>) l$.value;
 l.add(p); RESULT = l; 
              return parser.getSymbolFactory().newSymbol("Parameter_List_opt", 8, l$, p$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Parameter ::= Comment_opt IDENT COLON Flags Type 
            {
              Parameter RESULT = null;
              java_cup.runtime.Symbol type$ = CUP$stack.get(CUP$size - 1);
              String type = (String) type$.value;
              java_cup.runtime.Symbol flags$ = CUP$stack.get(CUP$size - 2);
              Integer flags = (Integer) flags$.value;
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 4);
              String name = (String) name$.value;
              java_cup.runtime.Symbol comment$ = CUP$stack.get(CUP$size - 5);
              String comment = (String) comment$.value;
 if (comment == null)
            comment = Emit.buildFieldComment(currentNode, name, type);
        else if (!comment.endsWith("."))
            comment += ".";
        boolean writeable = (flags.intValue() & WRITEABLE) != 0;
        boolean optional = (flags.intValue() & OPTIONAL) != 0;
        RESULT = new Parameter(name, type, comment, writeable, optional); 
     
              return parser.getSymbolFactory().newSymbol("Parameter", 9, comment$, type$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Parameter ::= Comment_opt IDENT error 
            {
              Parameter RESULT = null;
              java_cup.runtime.Symbol err$ = CUP$stack.get(CUP$size - 1);
 report_error(err$.left, err$.right, "`:' expected!"); 
              return parser.getSymbolFactory().newSymbol("Parameter", 9, CUP$stack.get(CUP$size - 3), err$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Parameter ::= Comment_opt IDENT COLON error 
            {
              Parameter RESULT = null;
              java_cup.runtime.Symbol err$ = CUP$stack.get(CUP$size - 1);
 report_error(err$.left, err$.right, "Type expected!"); 
              return parser.getSymbolFactory().newSymbol("Parameter", 9, CUP$stack.get(CUP$size - 4), err$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Type ::= FullQualifiedName 
            {
              String RESULT = null;
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              String name = (String) name$.value;
 RESULT = name; usedTypes.add(name); 
              return parser.getSymbolFactory().newSymbol("Type", 16, name$, name$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Type ::= FullQualifiedName LANGLE TypeArgsCommaPlus RANGLE 
            {
              String RESULT = null;
              java_cup.runtime.Symbol ta$ = CUP$stack.get(CUP$size - 2);
              String ta = (String) ta$.value;
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 4);
              String name = (String) name$.value;
 RESULT = name + "<" + ta + ">"; usedTypes.add(name); 
              return parser.getSymbolFactory().newSymbol("Type", 16, name$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Type ::= Type LBRACKET RBRACKET 
            {
              String RESULT = null;
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 3);
              String name = (String) name$.value;
 RESULT = name + "[]"; 
              return parser.getSymbolFactory().newSymbol("Type", 16, name$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Type ::= LBRACE IdentList_tail IDENT RBRACE 
            {
              String RESULT = null;
              java_cup.runtime.Symbol i$ = CUP$stack.get(CUP$size - 2);
              String i = (String) i$.value;
              java_cup.runtime.Symbol l$ = CUP$stack.get(CUP$size - 3);
              String l = (String) l$.value;
 RESULT = "," + l + i; 
              return parser.getSymbolFactory().newSymbol("Type", 16, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1), RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Type ::= IDENT LBRACE IdentList_tail IDENT RBRACE 
            {
              String RESULT = null;
              java_cup.runtime.Symbol i$ = CUP$stack.get(CUP$size - 2);
              String i = (String) i$.value;
              java_cup.runtime.Symbol l$ = CUP$stack.get(CUP$size - 3);
              String l = (String) l$.value;
              java_cup.runtime.Symbol ename$ = CUP$stack.get(CUP$size - 5);
              String ename = (String) ename$.value;
 RESULT = "!" + ename + "," + l + i; 
              return parser.getSymbolFactory().newSymbol("Type", 16, ename$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IdentList_tail ::= 
            {
              String RESULT = null;
 RESULT =""; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("IdentList_tail", 20, CUP$sym, CUP$sym, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IdentList_tail ::= IdentList_tail IDENT COMMA 
            {
              String RESULT = null;
              java_cup.runtime.Symbol i$ = CUP$stack.get(CUP$size - 2);
              String i = (String) i$.value;
              java_cup.runtime.Symbol l$ = CUP$stack.get(CUP$size - 3);
              String l = (String) l$.value;
 RESULT = l + i + ","; 
              return parser.getSymbolFactory().newSymbol("IdentList_tail", 20, l$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Comment_opt ::= 
            {
              String RESULT = null;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("Comment_opt", 12, CUP$sym, CUP$sym, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Comment_opt ::= DOCCOMMENT 
            {
              String RESULT = null;
              java_cup.runtime.Symbol comment$ = CUP$stack.get(CUP$size - 1);
              String comment = (String) comment$.value;
 RESULT = comment; 
              return parser.getSymbolFactory().newSymbol("Comment_opt", 12, comment$, comment$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Flags ::= 
            {
              Integer RESULT = null;
 RESULT = 0; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("Flags", 21, CUP$sym, CUP$sym, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Flags ::= WRITEABLE Flags 
            {
              Integer RESULT = null;
              java_cup.runtime.Symbol flags$ = CUP$stack.get(CUP$size - 1);
              Integer flags = (Integer) flags$.value;
 RESULT = flags | WRITEABLE; 
              return parser.getSymbolFactory().newSymbol("Flags", 21, CUP$stack.get(CUP$size - 2), flags$, RESULT);
            }

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Flags ::= OPTIONAL Flags 
            {
              Integer RESULT = null;
              java_cup.runtime.Symbol flags$ = CUP$stack.get(CUP$size - 1);
              Integer flags = (Integer) flags$.value;
 RESULT = flags | OPTIONAL; 
              return parser.getSymbolFactory().newSymbol("Flags", 21, CUP$stack.get(CUP$size - 2), flags$, RESULT);
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
