/* ArrayStoreExpression -- Automatically generated by TreeBuilder */

package local.stalin.model.boogie.ast;
import local.stalin.model.IType;

import java.util.List;
/**
 * Represents a array store expression which is a special form of a expression.
 */
public class ArrayStoreExpression extends Expression {
    private static final long serialVersionUID = 1L;
    /**
     * The array of this array store expression.
     */
    Expression array;

    /**
     * The indices of this array store expression.
     */
    Expression[] indices;

    /**
     * The value of this array store expression.
     */
    Expression value;

    /**
     * The constructor taking initial values.
     * @param array the array of this array store expression.
     * @param indices the indices of this array store expression.
     * @param value the value of this array store expression.
     */
    public ArrayStoreExpression(Expression array, Expression[] indices, Expression value) {
        this.array = array;
        this.indices = indices;
        this.value = value;
    }

    /**
     * The constructor taking initial values.
     * @param type the type of this expression.
     * @param array the array of this array store expression.
     * @param indices the indices of this array store expression.
     * @param value the value of this array store expression.
     */
    public ArrayStoreExpression(IType type, Expression array, Expression[] indices, Expression value) {
        super(type);
        this.array = array;
        this.indices = indices;
        this.value = value;
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("ArrayStoreExpression").append('[');
        sb.append(array);
        sb.append(',');
        if (indices == null) {
            sb.append("null");
        } else {
            sb.append('[');
            for(int i1 = 0; i1 < indices.length; i1++) {
                if (i1 > 0) sb.append(',');
                    sb.append(indices[i1]);
            }
            sb.append(']');
        }
        sb.append(',').append(value);
        return sb.append(']').toString();
    }

    /**
     * Gets the array of this array store expression.
     * @return the array of this array store expression.
     */
    public Expression getArray() {
        return array;
    }

    /**
     * Gets the indices of this array store expression.
     * @return the indices of this array store expression.
     */
    public Expression[] getIndices() {
        return indices;
    }

    /**
     * Gets the value of this array store expression.
     * @return the value of this array store expression.
     */
    public Expression getValue() {
        return value;
    }

    public List<Object> getChildren() {
        List<Object> children = super.getChildren();
        children.add(array);
        children.add(indices);
        children.add(value);
        return children;
    }
}
