/* QuantifierExpression -- Automatically generated by TreeBuilder */

package local.stalin.model.boogie.ast;
import local.stalin.model.IType;

import java.util.List;
/**
 * Represents a quantifier expression which is a special form of a expression.
 */
public class QuantifierExpression extends Expression {
    private static final long serialVersionUID = 1L;
    /**
     * This is true for universal and false for existential quantifier.
     */
    boolean isUniversal;

    /**
     * The type params of this quantifier expression.
     */
    String[] typeParams;

    /**
     * The parameters of this quantifier expression.
     */
    VarList[] parameters;

    /**
     * The attributes of this quantifier expression.
     */
    Attribute[] attributes;

    /**
     * The subformula of this quantifier expression.
     */
    Expression subformula;

    /**
     * The constructor taking initial values.
     * @param isUniversal this is true for universal and false for existential quantifier.
     * @param typeParams the type params of this quantifier expression.
     * @param parameters the parameters of this quantifier expression.
     * @param attributes the attributes of this quantifier expression.
     * @param subformula the subformula of this quantifier expression.
     */
    public QuantifierExpression(boolean isUniversal, String[] typeParams, VarList[] parameters, Attribute[] attributes, Expression subformula) {
        this.isUniversal = isUniversal;
        this.typeParams = typeParams;
        this.parameters = parameters;
        this.attributes = attributes;
        this.subformula = subformula;
    }

    /**
     * The constructor taking initial values.
     * @param type the type of this expression.
     * @param isUniversal this is true for universal and false for existential quantifier.
     * @param typeParams the type params of this quantifier expression.
     * @param parameters the parameters of this quantifier expression.
     * @param attributes the attributes of this quantifier expression.
     * @param subformula the subformula of this quantifier expression.
     */
    public QuantifierExpression(IType type, boolean isUniversal, String[] typeParams, VarList[] parameters, Attribute[] attributes, Expression subformula) {
        super(type);
        this.isUniversal = isUniversal;
        this.typeParams = typeParams;
        this.parameters = parameters;
        this.attributes = attributes;
        this.subformula = subformula;
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("QuantifierExpression").append('[');
        sb.append(isUniversal);
        sb.append(',');
        if (typeParams == null) {
            sb.append("null");
        } else {
            sb.append('[');
            for(int i1 = 0; i1 < typeParams.length; i1++) {
                if (i1 > 0) sb.append(',');
                    sb.append(typeParams[i1]);
            }
            sb.append(']');
        }
        sb.append(',');
        if (parameters == null) {
            sb.append("null");
        } else {
            sb.append('[');
            for(int i1 = 0; i1 < parameters.length; i1++) {
                if (i1 > 0) sb.append(',');
                    sb.append(parameters[i1]);
            }
            sb.append(']');
        }
        sb.append(',');
        if (attributes == null) {
            sb.append("null");
        } else {
            sb.append('[');
            for(int i1 = 0; i1 < attributes.length; i1++) {
                if (i1 > 0) sb.append(',');
                    sb.append(attributes[i1]);
            }
            sb.append(']');
        }
        sb.append(',').append(subformula);
        return sb.append(']').toString();
    }

    /**
     * Checks this is true for universal and false for existential quantifier.
     * @return this is true for universal and false for existential quantifier.
     */
    public boolean isUniversal() {
        return isUniversal;
    }

    /**
     * Gets the type params of this quantifier expression.
     * @return the type params of this quantifier expression.
     */
    public String[] getTypeParams() {
        return typeParams;
    }

    /**
     * Gets the parameters of this quantifier expression.
     * @return the parameters of this quantifier expression.
     */
    public VarList[] getParameters() {
        return parameters;
    }

    /**
     * Gets the attributes of this quantifier expression.
     * @return the attributes of this quantifier expression.
     */
    public Attribute[] getAttributes() {
        return attributes;
    }

    /**
     * Gets the subformula of this quantifier expression.
     * @return the subformula of this quantifier expression.
     */
    public Expression getSubformula() {
        return subformula;
    }

    public List<Object> getChildren() {
        List<Object> children = super.getChildren();
        children.add(isUniversal);
        children.add(typeParams);
        children.add(parameters);
        children.add(attributes);
        children.add(subformula);
        return children;
    }
}
