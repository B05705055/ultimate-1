/* ASTType -- Automatically generated by TreeBuilder */

package local.stalin.model.boogie.ast;
import local.stalin.model.IType;

import java.util.List;
import local.stalin.model.boogie.ast.wrapper.ASTNode;
/**
 * Represents an ast type.
 * This is different from BoogieType, as it is not unified and still contains the
 * names of the type parameters.
 */
public abstract class ASTType extends ASTNode {
    private static final long serialVersionUID = 1L;
    /**
     * The boogie type of this a s t type.
     */
    IType boogieType;

    /**
     * The default constructor.
     */
    public ASTType() {
    }

    /**
     * The constructor taking initial values.
     * @param boogieType the boogie type of this a s t type.
     */
    public ASTType(IType boogieType) {
        this.boogieType = boogieType;
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("ASTType").append('[');
        sb.append(boogieType);
        return sb.append(']').toString();
    }

    /**
     * Gets the boogie type of this a s t type.
     * @return the boogie type of this a s t type.
     */
    public IType getBoogieType() {
        return boogieType;
    }

    /**
     * Sets the boogie type of this a s t type.
     * @param boogieType the boogie type of this a s t type.
     */
    public void setBoogieType(IType boogieType) {
        this.boogieType = boogieType;
    }

    public List<Object> getChildren() {
        List<Object> children = super.getChildren();
        children.add(boogieType);
        return children;
    }
}
