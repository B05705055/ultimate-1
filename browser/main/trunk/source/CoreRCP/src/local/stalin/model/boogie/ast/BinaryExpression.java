/* BinaryExpression -- Automatically generated by TreeBuilder */

package local.stalin.model.boogie.ast;
import local.stalin.model.IType;

import java.util.List;
/**
 * Represents a binary expression which is a special form of a expression.
 */
public class BinaryExpression extends Expression {
    private static final long serialVersionUID = 1L;
    public enum Operator {
        LOGICIFF, LOGICIMPLIES, LOGICAND, LOGICOR, COMPLT, COMPGT, COMPLEQ, 
        COMPGEQ, COMPEQ, COMPNEQ, COMPPO, BITVECCONCAT, ARITHPLUS, ARITHMINUS, 
        ARITHMUL, ARITHDIV, ARITHMOD
    }

    /**
     * The operator of this binary expression.
     */
    Operator operator;

    /**
     * The left of this binary expression.
     */
    Expression left;

    /**
     * The right of this binary expression.
     */
    Expression right;

    /**
     * The constructor taking initial values.
     * @param operator the operator of this binary expression.
     * @param left the left of this binary expression.
     * @param right the right of this binary expression.
     */
    public BinaryExpression(Operator operator, Expression left, Expression right) {
        this.operator = operator;
        this.left = left;
        this.right = right;
    }

    /**
     * The constructor taking initial values.
     * @param type the type of this expression.
     * @param operator the operator of this binary expression.
     * @param left the left of this binary expression.
     * @param right the right of this binary expression.
     */
    public BinaryExpression(IType type, Operator operator, Expression left, Expression right) {
        super(type);
        this.operator = operator;
        this.left = left;
        this.right = right;
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("BinaryExpression").append('[');
        sb.append(operator);
        sb.append(',').append(left);
        sb.append(',').append(right);
        return sb.append(']').toString();
    }

    /**
     * Gets the operator of this binary expression.
     * @return the operator of this binary expression.
     */
    public Operator getOperator() {
        return operator;
    }

    /**
     * Gets the left of this binary expression.
     * @return the left of this binary expression.
     */
    public Expression getLeft() {
        return left;
    }

    /**
     * Gets the right of this binary expression.
     * @return the right of this binary expression.
     */
    public Expression getRight() {
        return right;
    }

    public List<Object> getChildren() {
        List<Object> children = super.getChildren();
        children.add(operator);
        children.add(left);
        children.add(right);
        return children;
    }
}
