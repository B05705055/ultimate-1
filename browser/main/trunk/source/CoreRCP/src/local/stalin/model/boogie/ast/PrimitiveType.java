/* PrimitiveType -- Automatically generated by TreeBuilder */

package local.stalin.model.boogie.ast;
import local.stalin.model.IType;

import java.util.List;
/**
 * Represents a primitive type which is a special form of a a s t type.
 */
public class PrimitiveType extends ASTType {
    private static final long serialVersionUID = 1L;
    /**
     * The name of this primitive type.
     */
    String name;

    /**
     * The constructor taking initial values.
     * @param name the name of this primitive type.
     */
    public PrimitiveType(String name) {
        this.name = name;
    }

    /**
     * The constructor taking initial values.
     * @param boogieType the boogie type of this a s t type.
     * @param name the name of this primitive type.
     */
    public PrimitiveType(IType boogieType, String name) {
        super(boogieType);
        this.name = name;
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("PrimitiveType").append('[');
        sb.append(name);
        return sb.append(']').toString();
    }

    /**
     * Gets the name of this primitive type.
     * @return the name of this primitive type.
     */
    public String getName() {
        return name;
    }

    public List<Object> getChildren() {
        List<Object> children = super.getChildren();
        children.add(name);
        return children;
    }
}
