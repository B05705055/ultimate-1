/* LeftHandSide -- Automatically generated by TreeBuilder */

package local.stalin.model.boogie.ast;
import local.stalin.model.IType;

import java.util.List;
import local.stalin.model.boogie.ast.wrapper.ASTNode;
/**
 * Represents a left hand side.
 */
public abstract class LeftHandSide extends ASTNode {
    private static final long serialVersionUID = 1L;
    /**
     * The type of this left hand side.
     */
    IType type;

    /**
     * The default constructor.
     */
    public LeftHandSide() {
    }

    /**
     * The constructor taking initial values.
     * @param type the type of this left hand side.
     */
    public LeftHandSide(IType type) {
        this.type = type;
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("LeftHandSide").append('[');
        sb.append(type);
        return sb.append(']').toString();
    }

    /**
     * Gets the type of this left hand side.
     * @return the type of this left hand side.
     */
    public IType getType() {
        return type;
    }

    /**
     * Sets the type of this left hand side.
     * @param type the type of this left hand side.
     */
    public void setType(IType type) {
        this.type = type;
    }

    public List<Object> getChildren() {
        List<Object> children = super.getChildren();
        children.add(type);
        return children;
    }
}
