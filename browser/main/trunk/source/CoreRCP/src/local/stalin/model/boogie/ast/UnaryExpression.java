/* UnaryExpression -- Automatically generated by TreeBuilder */

package local.stalin.model.boogie.ast;
import local.stalin.model.IType;

import java.util.List;
/**
 * Represents a unary expression which is a special form of a expression.
 */
public class UnaryExpression extends Expression {
    private static final long serialVersionUID = 1L;
    public enum Operator {
        LOGICNEG, ARITHNEGATIVE, OLD
    }

    /**
     * The operator of this unary expression.
     */
    Operator operator;

    /**
     * The expr of this unary expression.
     */
    Expression expr;

    /**
     * The constructor taking initial values.
     * @param operator the operator of this unary expression.
     * @param expr the expr of this unary expression.
     */
    public UnaryExpression(Operator operator, Expression expr) {
        this.operator = operator;
        this.expr = expr;
    }

    /**
     * The constructor taking initial values.
     * @param type the type of this expression.
     * @param operator the operator of this unary expression.
     * @param expr the expr of this unary expression.
     */
    public UnaryExpression(IType type, Operator operator, Expression expr) {
        super(type);
        this.operator = operator;
        this.expr = expr;
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("UnaryExpression").append('[');
        sb.append(operator);
        sb.append(',').append(expr);
        return sb.append(']').toString();
    }

    /**
     * Gets the operator of this unary expression.
     * @return the operator of this unary expression.
     */
    public Operator getOperator() {
        return operator;
    }

    /**
     * Gets the expr of this unary expression.
     * @return the expr of this unary expression.
     */
    public Expression getExpr() {
        return expr;
    }

    public List<Object> getChildren() {
        List<Object> children = super.getChildren();
        children.add(operator);
        children.add(expr);
        return children;
    }
}
