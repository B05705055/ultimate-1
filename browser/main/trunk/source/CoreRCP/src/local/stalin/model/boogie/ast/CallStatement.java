/* CallStatement -- Automatically generated by TreeBuilder */

package local.stalin.model.boogie.ast;

import java.util.List;
/**
 * Represents a call statement which is a special form of a statement.
 */
public class CallStatement extends Statement {
    private static final long serialVersionUID = 1L;
    /**
     * True iff this call statement is forall.
     */
    boolean isForall;

    /**
     * The lhs of this call statement.
     */
    String[] lhs;

    /**
     * The method name of this call statement.
     */
    String methodName;

    /**
     * The arguments of this call statement.
     */
    Expression[] arguments;

    /**
     * The constructor taking initial values.
     * @param filename the filename of this statement.
     * @param lineNr the line nr of this statement.
     * @param isForall true iff this call statement is forall.
     * @param lhs the lhs of this call statement.
     * @param methodName the method name of this call statement.
     * @param arguments the arguments of this call statement.
     */
    public CallStatement(String filename, int lineNr, boolean isForall, String[] lhs, String methodName, Expression[] arguments) {
        super(filename, lineNr);
        this.isForall = isForall;
        this.lhs = lhs;
        this.methodName = methodName;
        this.arguments = arguments;
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("CallStatement").append('[');
        sb.append(isForall);
        sb.append(',');
        if (lhs == null) {
            sb.append("null");
        } else {
            sb.append('[');
            for(int i1 = 0; i1 < lhs.length; i1++) {
                if (i1 > 0) sb.append(',');
                    sb.append(lhs[i1]);
            }
            sb.append(']');
        }
        sb.append(',').append(methodName);
        sb.append(',');
        if (arguments == null) {
            sb.append("null");
        } else {
            sb.append('[');
            for(int i1 = 0; i1 < arguments.length; i1++) {
                if (i1 > 0) sb.append(',');
                    sb.append(arguments[i1]);
            }
            sb.append(']');
        }
        return sb.append(']').toString();
    }

    /**
     * Checks iff this call statement is forall.
     * @return true iff this call statement is forall.
     */
    public boolean isForall() {
        return isForall;
    }

    /**
     * Gets the lhs of this call statement.
     * @return the lhs of this call statement.
     */
    public String[] getLhs() {
        return lhs;
    }

    /**
     * Gets the method name of this call statement.
     * @return the method name of this call statement.
     */
    public String getMethodName() {
        return methodName;
    }

    /**
     * Gets the arguments of this call statement.
     * @return the arguments of this call statement.
     */
    public Expression[] getArguments() {
        return arguments;
    }

    public List<Object> getChildren() {
        List<Object> children = super.getChildren();
        children.add(isForall);
        children.add(lhs);
        children.add(methodName);
        children.add(arguments);
        return children;
    }
}
