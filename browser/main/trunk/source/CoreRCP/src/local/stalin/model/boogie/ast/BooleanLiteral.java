/* BooleanLiteral -- Automatically generated by TreeBuilder */

package local.stalin.model.boogie.ast;
import local.stalin.model.IType;

import java.util.List;
/**
 * Represents a boolean literal which is a special form of a expression.
 */
public class BooleanLiteral extends Expression {
    private static final long serialVersionUID = 1L;
    /**
     * The value of this boolean literal.
     */
    boolean value;

    /**
     * The constructor taking initial values.
     * @param value the value of this boolean literal.
     */
    public BooleanLiteral(boolean value) {
        this.value = value;
    }

    /**
     * The constructor taking initial values.
     * @param type the type of this expression.
     * @param value the value of this boolean literal.
     */
    public BooleanLiteral(IType type, boolean value) {
        super(type);
        this.value = value;
    }

    /**
     * Returns a textual description of this object.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("BooleanLiteral").append('[');
        sb.append(value);
        return sb.append(']').toString();
    }

    /**
     * Checks the value of this boolean literal.
     * @return the value of this boolean literal.
     */
    public boolean getValue() {
        return value;
    }

    public List<Object> getChildren() {
        List<Object> children = super.getChildren();
        children.add(value);
        return children;
    }
}
