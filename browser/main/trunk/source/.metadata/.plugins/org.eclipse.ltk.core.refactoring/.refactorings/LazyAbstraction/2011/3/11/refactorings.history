<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Rename field &apos;s_Logger&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver&apos; to &apos;s_logger&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.s_Logger&apos;&#x0A;- Renamed element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.s_logger&apos;&#x0A;- Update references to refactored element&#x0A;- Update textual occurrences in comments and strings" delegate="false" deprecate="false" description="Rename field &apos;s_Logger&apos;" flags="589826" getter="false" id="org.eclipse.jdt.ui.rename.field" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver^s_Logger" name="s_logger" references="true" setter="false" stamp="1300096922122" textual="false" version="1.0"/>&#x0A;<refactoring comment="Extract method &apos;private void logStats()&apos; from &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.paper_UNWIND()&apos; to &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Method name: &apos;logStats&apos;&#x0A;- Destination type: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver&apos;&#x0A;- Declared visibility: &apos;private&apos;" comments="false" description="Extract method &apos;logStats&apos;" destination="0" exceptions="false" flags="786434" id="org.eclipse.jdt.ui.extract.method" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java" name="logStats" replace="false" selection="7536 233" stamp="1300097101049" version="1.0" visibility="2"/>&#x0A;<refactoring comment="Extract method &apos;private int isImplicationUnsat(Formula assertionV, Formula assertionW)&apos; from &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.paper_COVER()&apos; to &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Method name: &apos;isImplicationUnsat&apos;&#x0A;- Destination type: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver&apos;&#x0A;- Declared visibility: &apos;private&apos;&#x0A;- Replace occurrences of statements with method" comments="false" description="Extract method &apos;isImplicationUnsat&apos;" destination="0" exceptions="false" flags="786434" id="org.eclipse.jdt.ui.extract.method" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java" name="isImplicationUnsat" replace="true" selection="18412 112" stamp="1300117976844" version="1.0" visibility="2"/>&#x0A;<refactoring comment="Rename method &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.isImplicationUnsat(...)&apos; to &apos;checkNotImplies&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.isImplicationUnsat(...)&apos;&#x0A;- Renamed element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.checkNotImplies(...)&apos;&#x0A;- Update references to refactored element" delegate="false" deprecate="true" description="Rename method &apos;isImplicationUnsat&apos;" flags="589826" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver~isImplicationUnsat~QFormula;~QFormula;" name="checkNotImplies" references="true" stamp="1300119102263" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;w&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.paper_REFINE(...)&apos; to &apos;coveredNode&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.paper_REFINE(UnwindingErrorLocation).w&apos;&#x0A;- Renamed element: &apos;w&apos;&#x0A;- Update references to refactored element" description="Rename local variable &apos;w&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver~paper_REFINE~QUnwindingErrorLocation;@w!14112!14126!14126!14126!QUnwindingNode;" name="coveredNode" references="true" stamp="1300137589206" version="1.0"/>&#x0A;<refactoring comment="Extract method &apos;private TermVariable getUniqueTermVariable(Entry&lt;String,TermVariable&gt; entry)&apos; from &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.getFormulas()&apos; to &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Method name: &apos;getUniqueTermVariable&apos;&#x0A;- Destination type: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver&apos;&#x0A;- Declared visibility: &apos;private&apos;&#x0A;- Generate method comment" comments="true" description="Extract method &apos;getUniqueTermVariable&apos;" destination="0" exceptions="false" flags="786434" id="org.eclipse.jdt.ui.extract.method" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java" name="getUniqueTermVariable" replace="false" selection="30226 76" stamp="1300186466008" version="1.0" visibility="2"/>&#x0A;<refactoring comment="Rename field &apos;availableTermVariables&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver&apos; to &apos;m_availableTermVariables&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.availableTermVariables&apos;&#x0A;- Renamed element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.m_availableTermVariables&apos;&#x0A;- Update references to refactored element&#x0A;- Update textual occurrences in comments and strings" delegate="false" deprecate="false" description="Rename field &apos;availableTermVariables&apos;" flags="589830" getter="false" id="org.eclipse.jdt.ui.rename.field" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver^availableTermVariables" name="m_availableTermVariables" references="true" setter="false" stamp="1300187842263" textual="false" version="1.0"/>&#x0A;<refactoring comment="Rename field &apos;usedTermVariables&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver&apos; to &apos;m_usedTermVariables&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.usedTermVariables&apos;&#x0A;- Renamed element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.m_usedTermVariables&apos;&#x0A;- Update references to refactored element&#x0A;- Update textual occurrences in comments and strings" delegate="false" deprecate="false" description="Rename field &apos;usedTermVariables&apos;" flags="589830" getter="false" id="org.eclipse.jdt.ui.rename.field" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver^usedTermVariables" name="m_usedTermVariables" references="true" setter="false" stamp="1300187846848" textual="false" version="1.0"/>&#x0A;<refactoring comment="Encapsulate field &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingProcRoot.m_locationToPreorder&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingProcRoot&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingProcRoot.m_locationToPreorder&apos;&#x0A;- Getter method name: &apos;getLocationToPreorder&apos;&#x0A;- Setter method name: &apos;s&apos;&#x0A;- Field visibility: &apos;public&apos;&#x0A;- Use getter and setter methods in declaring type&#x0A;- Generate method comments" comments="true" declaring="true" description="Encapsulate field &apos;m_locationToPreorder&apos;" flags="589830" getter="getLocationToPreorder" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{UnwindingProcRoot.java[UnwindingProcRoot^m_locationToPreorder" insertion="3" setter="s" stamp="1300212674938" version="1.0" visibility="1"/>
</session>