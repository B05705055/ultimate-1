<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring accessors="true" comment="Delete 1 element(s) from project &apos;LazyAbstraction&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode.java&apos;" description="Delete element" element1="/src&lt;local.stalin.plugins.generator.lazyabstraction{UnwindingNode.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1298285067762" subPackages="false" version="1.0"/>&#x0A;<refactoring comment="Rename type &apos;local.stalin.plugins.generator.lazyabstraction.UndwindingNode&apos; to &apos;UnwindingNode&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.UndwindingNode&apos;&#x0A;- Renamed element: &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode&apos;&#x0A;- Update references to refactored element&#x0A;- Update textual occurrences in comments and strings" description="Rename type &apos;UndwindingNode&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.type" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{UndwindingNode.java[UndwindingNode" matchStrategy="1" name="UnwindingNode" qualified="false" references="true" similarDeclarations="false" stamp="1298285355466" textual="false" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete 1 element(s) from project &apos;LazyAbstraction&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode.java&apos;" description="Delete element" element1="/src&lt;local.stalin.plugins.generator.lazyabstraction{UnwindingNode.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1298296703568" subPackages="false" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete 1 element(s) from project &apos;LazyAbstraction&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode.java&apos;" description="Delete element" element1="/src&lt;local.stalin.plugins.generator.lazyabstraction{UnwindingNode.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1298296812284" subPackages="false" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;procNode&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.processProcedure(...)&apos; to &apos;cfgProcNode&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.processProcedure(CFGExplicitNode).procNode&apos;&#x0A;- Renamed element: &apos;procNode&apos;&#x0A;- Update references to refactored element" description="Rename local variable &apos;procNode&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver~processProcedure~QCFGExplicitNode;@procNode!3216!3239!3232!3239!QCFGExplicitNode;" name="cfgProcNode" references="true" stamp="1298555211747" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;oldNode&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.expand(...)&apos; to &apos;cfgChild&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.expand(UnwindingNode, CFGExplicitNode, int).oldNode&apos;&#x0A;- Renamed element: &apos;oldNode&apos;&#x0A;- Update references to refactored element" description="Rename local variable &apos;oldNode&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver~expand~QUnwindingNode;~QCFGExplicitNode;~I@oldNode!3795!3856!3811!3817!QCFGExplicitNode;" name="cfgChild" references="true" stamp="1298556695132" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;newNode&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.expand(...)&apos; to &apos;unwChild&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.expand(UnwindingNode, CFGExplicitNode, int).newNode&apos;&#x0A;- Renamed element: &apos;newNode&apos;&#x0A;- Update references to refactored element" description="Rename local variable &apos;newNode&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver~expand~QUnwindingNode;~QCFGExplicitNode;~I@newNode!3863!3912!3877!3883!QUnwindingNode;" name="unwChild" references="true" stamp="1298556704803" version="1.0"/>&#x0A;<refactoring comment="Rename method &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.expand(...)&apos; to &apos;expandNode&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.expand(...)&apos;&#x0A;- Renamed element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.expandNode(...)&apos;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;expand&apos;" flags="589826" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver~expand~QUnwindingNode;~QCFGExplicitNode;~I" name="expandNode" references="true" stamp="1298557387189" version="1.0"/>&#x0A;<refactoring comment="Rename field &apos;m_allNodesInOrder&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingProcRoot&apos; to &apos;m_allNodesInPreorder&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingProcRoot.m_allNodesInOrder&apos;&#x0A;- Renamed element: &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingProcRoot.m_allNodesInPreorder&apos;&#x0A;- Update references to refactored element&#x0A;- Update textual occurrences in comments and strings" delegate="false" deprecate="false" description="Rename field &apos;m_allNodesInOrder&apos;" flags="589826" getter="false" id="org.eclipse.jdt.ui.rename.field" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{UnwindingProcRoot.java[UnwindingProcRoot^m_allNodesInOrder" name="m_allNodesInPreorder" references="true" setter="false" stamp="1298565090642" textual="false" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;procNode&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.process(...)&apos; to &apos;procRoot&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.process(IElement).procNode&apos;&#x0A;- Renamed element: &apos;procNode&apos;&#x0A;- Update references to refactored element" description="Rename local variable &apos;procNode&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver~process~QIElement;@procNode!2463!2529!2481!2488!QUnwindingProcRoot;" name="procRoot" references="true" stamp="1298565480671" version="1.0"/>&#x0A;<refactoring comment="Extract method &apos;private void paper_UNWIND()&apos; from &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.processProcedure()&apos; to &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Method name: &apos;paper_UNWIND&apos;&#x0A;- Destination type: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver&apos;&#x0A;- Declared visibility: &apos;private&apos;" comments="false" description="Extract method &apos;paper_UNWIND&apos;" destination="0" exceptions="false" flags="786434" id="org.eclipse.jdt.ui.extract.method" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java" name="paper_UNWIND" replace="false" selection="2988 342" stamp="1298566969528" version="1.0" visibility="2"/>&#x0A;<refactoring clone="true" comment="Infer generic type arguments on &apos;LazyAbstraction&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original elements:&#x0A;     local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.java&#x0A;- Assume clone() returns an instance of the receiver type&#x0A;- Leave unconstrained type arguments raw" description="Infer generic type arguments" element1="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java" flags="6" id="org.eclipse.jdt.ui.infer.typearguments" leave="true" stamp="1298568221472" version="1.0"/>&#x0A;<refactoring comment="Encapsulate field &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode.m_isCovered&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode.m_isCovered&apos;&#x0A;- Getter method name: &apos;isM_isCovered&apos;&#x0A;- Setter method name: &apos;setM_isCovered&apos;&#x0A;- Field visibility: &apos;public&apos;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;m_isCovered&apos;" flags="589830" getter="isM_isCovered" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{UnwindingNode.java[UnwindingNode^m_isCovered" insertion="16" setter="setM_isCovered" stamp="1298570485568" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Encapsulate field &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode.m_coveringNode&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode.m_coveringNode&apos;&#x0A;- Getter method name: &apos;getM_coveringNode&apos;&#x0A;- Setter method name: &apos;setM_coveringNode&apos;&#x0A;- Field visibility: &apos;public&apos;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;m_coveringNode&apos;" flags="589830" getter="getM_coveringNode" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{UnwindingNode.java[UnwindingNode^m_coveringNode" insertion="18" setter="setM_coveringNode" stamp="1298574463565" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Encapsulate field &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode.m_coveredNode&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode.m_coveredNode&apos;&#x0A;- Getter method name: &apos;getM_coveredNode&apos;&#x0A;- Setter method name: &apos;setM_coveredNode&apos;&#x0A;- Field visibility: &apos;public&apos;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;m_coveredNode&apos;" flags="589830" getter="getM_coveredNode" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{UnwindingNode.java[UnwindingNode^m_coveredNode" insertion="20" setter="setM_coveredNode" stamp="1298574469172" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Encapsulate field &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode.m_coveredNodes&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode.m_coveredNodes&apos;&#x0A;- Getter method name: &apos;getM_coveredNodes&apos;&#x0A;- Setter method name: &apos;setM_coveredNodes&apos;&#x0A;- Field visibility: &apos;public&apos;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;m_coveredNodes&apos;" flags="589830" getter="getM_coveredNodes" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{UnwindingNode.java[UnwindingNode^m_coveredNodes" insertion="22" setter="setM_coveredNodes" stamp="1298575233450" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Rename method &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.uncoverRec(...)&apos; to &apos;coverRec&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.uncoverRec(...)&apos;&#x0A;- Renamed element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.coverRec(...)&apos;&#x0A;- Update references to refactored element" delegate="false" deprecate="false" description="Rename method &apos;uncoverRec&apos;" flags="589826" id="org.eclipse.jdt.ui.rename.method" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver~uncoverRec~QList\&lt;QINode;&gt;;" name="coverRec" references="true" stamp="1298579699956" version="1.0"/>&#x0A;<refactoring comment="Encapsulate field &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode.m_isLeaf&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.UnwindingNode.m_isLeaf&apos;&#x0A;- Getter method name: &apos;isLeaf&apos;&#x0A;- Setter method name: &apos;set_isLeaf&apos;&#x0A;- Field visibility: &apos;public&apos;&#x0A;- Use getter and setter methods in declaring type" comments="false" declaring="true" description="Encapsulate field &apos;m_isLeaf&apos;" flags="589830" getter="isLeaf" id="org.eclipse.jdt.ui.self.encapsulate" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{UnwindingNode.java[UnwindingNode^m_isLeaf" insertion="22" setter="set_isLeaf" stamp="1298585968224" version="1.0" visibility="1"/>&#x0A;<refactoring comment="Rename local variable &apos;m_ShortestPath&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.getFormulas(...)&apos; to &apos;path&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.getFormulas(ArrayList&lt;IElement&gt;).m_ShortestPath&apos;&#x0A;- Renamed element: &apos;m_ShortestPath&apos;&#x0A;- Update references to refactored element" description="Rename local variable &apos;m_ShortestPath&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver~getFormulas~QArrayList\&lt;QIElement;&gt;;@m_ShortestPath!11325!11358!11345!11358!QArrayList\&lt;QIElement;&gt;;" name="path" references="true" stamp="1298654104936" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;m_OutConstants&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.getFormulas(...)&apos; to &apos;outConstants&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.getFormulas(ArrayList&lt;IElement&gt;).m_OutConstants&apos;&#x0A;- Renamed element: &apos;m_OutConstants&apos;&#x0A;- Update references to refactored element" description="Rename local variable &apos;m_OutConstants&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver~getFormulas~QArrayList\&lt;QIElement;&gt;;@m_OutConstants!11609!11675!11631!11644!QHashMap\&lt;QString;QTerm;&gt;;" name="outConstants" references="true" stamp="1298654149460" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;m_ShortestPath&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.get_partialFormula(...)&apos; to &apos;path&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.get_partialFormula(int, ArrayList&lt;IElement&gt;).m_ShortestPath&apos;&#x0A;- Renamed element: &apos;m_ShortestPath&apos;&#x0A;- Update references to refactored element" description="Rename local variable &apos;m_ShortestPath&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver~get_partialFormula~I~QArrayList\&lt;QIElement;&gt;;@m_ShortestPath!13085!13118!13105!13118!QArrayList\&lt;QIElement;&gt;;" name="path" references="true" stamp="1298654212329" version="1.0"/>&#x0A;<refactoring comment="Rename local variable &apos;m_OutConstants&apos; in &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.get_partialFormula(...)&apos; to &apos;outConstants&apos;&#x0A;- Original project: &apos;LazyAbstraction&apos;&#x0A;- Original element: &apos;local.stalin.plugins.generator.lazyabstraction.LazyAbstractionObserver.get_partialFormula(int, ArrayList&lt;IElement&gt;, HashMap&lt;String, Term&gt;).m_OutConstants&apos;&#x0A;- Renamed element: &apos;m_OutConstants&apos;&#x0A;- Update references to refactored element" description="Rename local variable &apos;m_OutConstants&apos;" id="org.eclipse.jdt.ui.rename.local.variable" input="/src&lt;local.stalin.plugins.generator.lazyabstraction{LazyAbstractionObserver.java[LazyAbstractionObserver~get_partialFormula~I~QArrayList\&lt;QIElement;&gt;;~QHashMap\&lt;QString;QTerm;&gt;;@m_OutConstants!13117!13152!13139!13152!QHashMap\&lt;QString;QTerm;&gt;;" name="outConstants" references="true" stamp="1298654279612" version="1.0"/>
</session>