package local.stalin.plugins.generator.lazyabstractiononcfg;

import java.util.Collections;
import java.util.List;

import local.stalin.access.IObserver;
import local.stalin.ep.interfaces.IGenerator;
import local.stalin.model.GraphType;
import local.stalin.model.IElement;
import local.stalin.model.MarkedTrace;
import local.stalin.model.TokenMap;
import local.stalin.core.api.StalinServices;

import org.apache.log4j.Logger;
import org.eclipse.core.runtime.preferences.IEclipsePreferences;
import org.eclipse.core.runtime.preferences.IScopeContext;

/**
 * Main class of Plug-In LazyAbstractionOnCFG
 * 
 *
 * TODO: refine comments
 * 
 */
public class LazyAbstractionOnCFG implements IGenerator {

	private static final String s_PLUGIN_NAME = Activator.s_PLUGIN_NAME;
	private static final String s_PLUGIN_ID = Activator.s_PLUGIN_ID;
	
	private LazyAbstractionOnCFGObserver m_Observer;
	private GraphType m_InputDefinition;
	
	private static Logger s_Logger = StalinServices.getInstance().getLogger(Activator.s_PLUGIN_ID);
	
	
	
	/* (non-Javadoc)
	 * @see local.stalin.ep.interfaces.IRCPPlugin#getName()
	 */
	@Override
    public String getName() {
        return s_PLUGIN_NAME;
    }

	/* (non-Javadoc)
	 * @see local.stalin.ep.interfaces.IRCPPlugin#getPluginID()
	 */
	@Override
    public String getPluginID() {
        return s_PLUGIN_ID;
    }

	/* (non-Javadoc)
	 * @see local.stalin.ep.interfaces.IRCPPlugin#init(java.lang.Object)
	 */
	@Override
    public int init(Object param) {
    	m_Observer = new LazyAbstractionOnCFGObserver();
    	return 0;
    }

	/* (non-Javadoc)
	 * @see local.stalin.ep.interfaces.ITool#getQueryKeyword()
	 */
	@Override
	public QueryKeyword getQueryKeyword() {
		return QueryKeyword.ALL;
	}

	/* (non-Javadoc)
	 * @see local.stalin.ep.interfaces.ITool#getDesiredToolID()
	 */
	@Override
	public List<String> getDesiredToolID() {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see local.stalin.ep.interfaces.ITool#setTokenMap(local.stalin.model.TokenMap)
	 */
	@Override
	public void setTokenMap(TokenMap tokenMap) {
		// TODO Auto-generated method stub

	}

	/* (non-Javadoc)
	 * @see local.stalin.ep.interfaces.ITool#setInputDefinition(local.stalin.model.GraphType)
	 */
	@Override
	public void setInputDefinition(GraphType graphType) {
		this.m_InputDefinition = graphType;
	}

	//@Override
	public List<IObserver> getObservers() {
		return Collections.singletonList((IObserver) m_Observer);
	}
	
	/* (non-Javadoc)
	 * @see local.stalin.ep.interfaces.IModifyingTool#getOutputDefinition()
	 */
	public GraphType getOutputDefinition() {
		/* 
		 * TODO This generated method body only assumes a standard case.
		 * Adapt it if necessary. Otherwise remove this todo-tag.
		 */
		return new GraphType(Activator.s_PLUGIN_ID,
				m_InputDefinition.getType(), m_InputDefinition.getFileNames());
	}
	
	/* (non-Javadoc)
	 * @see local.stalin.ep.interfaces.IGenerator#getModel()
	 */
	@Override
	public IElement getModel() {
		// TODO Auto-generated method stub
		return null;
	}


	The templates plug-in adds a new wizard that is accessible in "normal" new selection (ctrl + n) under category (folder) Stalin. The wizard is pretty self-explanatory but details on how to use it can be found in the presentation slides / STALIN 2.0 documentation. 
	Further development of the templates plug-in

	The project has the JET (Java Emitter Templates) Builder associated. This requires JET plug-in (available from the eclipse update site) and included in the Eclipse Modelling Distribution of Eclipse. 

	All changes should be made to the template files in project folder "templates" or the GUI related classes. Classes in the package "local.stalin.dev.eclipse.templates.filegenerators" should never be modified by hand! When the JET builder present those classes are generated instantly whenever one of the templates is changed. 

	However, JET is not required for exporting and using the plug-in 
	  
	Download in other formats:
	Plain Text 


	Powered by Trac 0.12.2
	By Edgewall Software.

	/* (non-Javadoc)
	 * @see local.stalin.ep.interfaces.ITool#getRequireGui()
	 */
	@Override
	public boolean isGuiRequired() {
		return false;
	}
	
	/**
	* @return marked traces or null if no special markers shall be added for output plug-ins
	*/
	public List<MarkedTrace> getMarkedTraces(){
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IEclipsePreferences[] getPreferences(IScopeContext cs,
			IScopeContext is) {
		// TODO Auto-generated method stub
		return null;
	}
}
